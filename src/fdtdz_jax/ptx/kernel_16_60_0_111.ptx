//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_60
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[144]
)
{
	.reg .pred 	%p<382>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<541>;
	.reg .b32 	%r<7865>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<561>;


	mov.b64 	%rd41, _ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd41;
	ld.param.v2.u32 	{%r1732, %r1733}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1734, %r1735}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1736, %r1737}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1738, %r1739}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1740, %r1741}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1742, %r1743}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1744, %r1745}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	mov.u32 	%r23, %tid.y;
	mov.u32 	%r24, %tid.z;
	mov.u32 	%r25, %ctaid.y;
	mov.u32 	%r26, %ctaid.z;
	mov.u32 	%r1746, 32;
	sub.s32 	%r27, %r1746, %r1739;
	mov.u32 	%r28, %tid.x;
	setp.le.s32 	%p12, %r27, %r28;
	add.s32 	%r1747, %r1745, -1;
	mad.lo.s32 	%r1748, %r1747, %r1744, %r1743;
	add.s32 	%r1749, %r1738, %r1737;
	add.s32 	%r1750, %r1749, %r1748;
	add.s32 	%r1751, %r1750, 1;
	mul.lo.s32 	%r1752, %r1732, %r1734;
	shl.b32 	%r29, %r1752, 1;
	shl.b32 	%r1753, %r1752, 2;
	div.s32 	%r1754, %r1751, %r1753;
	add.s32 	%r1755, %r1754, 1;
	mul.lo.s32 	%r1756, %r1755, %r1738;
	mul.lo.s32 	%r1757, %r1733, %r1735;
	shl.b32 	%r30, %r1757, 1;
	div.s32 	%r1758, %r1756, %r30;
	add.s32 	%r1759, %r1758, 1;
	mul.lo.s32 	%r31, %r1759, %r1737;
	@%p12 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f38, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f38;
  cvt.rn.f16.f32 high, %f38;
  mov.b32 %r7232, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f36, [%rd1+88];
	neg.f32 	%f35, %f36;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f35;
  mov.b32 %r7232, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd42, [%rd1+136];
	cvta.to.global.u64 	%rd2, %rd42;
	mad.lo.s32 	%r1762, %r1734, %r26, %r25;
	mad.lo.s32 	%r1763, %r1762, %r1733, %r24;
	mad.lo.s32 	%r1764, %r1763, %r1732, %r23;
	shl.b32 	%r35, %r1764, 5;
	add.s32 	%r7237, %r35, %r28;
	mul.lo.s32 	%r1765, %r1757, %r1752;
	shl.b32 	%r39, %r1765, 5;
	shl.b32 	%r1766, %r1739, 2;
	mov.u32 	%r1767, 128;
	sub.s32 	%r40, %r1767, %r1766;
	mul.lo.s32 	%r1768, %r1738, %r1737;
	mul.lo.s32 	%r1769, %r1768, %r1745;
	mul.lo.s32 	%r1770, %r1769, %r40;
	mul.lo.s32 	%r41, %r1770, 3;
	setp.ge.s32 	%p13, %r7237, %r41;
	@%p13 bra 	$L__BB0_10;

	not.b32 	%r1771, %r28;
	add.s32 	%r1772, %r41, %r1771;
	sub.s32 	%r1773, %r1772, %r35;
	mul.lo.s32 	%r1774, %r1757, %r1732;
	mul.lo.s32 	%r1775, %r1774, %r1734;
	shl.b32 	%r1776, %r1775, 5;
	div.u32 	%r42, %r1773, %r1776;
	add.s32 	%r1777, %r42, 1;
	and.b32  	%r7234, %r1777, 3;
	setp.eq.s32 	%p14, %r7234, 0;
	mov.u32 	%r7235, %r7237;
	@%p14 bra 	$L__BB0_7;

	mov.u32 	%r7235, %r7237;

$L__BB0_6:
	.pragma "nounroll";
	mul.wide.s32 	%rd43, %r7235, 4;
	add.s64 	%rd44, %rd2, %rd43;
	mov.u32 	%r1778, 0;
	st.global.u32 	[%rd44], %r1778;
	add.s32 	%r7235, %r7235, %r39;
	add.s32 	%r7234, %r7234, -1;
	setp.ne.s32 	%p15, %r7234, 0;
	@%p15 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p16, %r42, 3;
	@%p16 bra 	$L__BB0_10;

	mul.wide.s32 	%rd47, %r39, 4;

$L__BB0_9:
	mul.wide.s32 	%rd45, %r7235, 4;
	add.s64 	%rd46, %rd2, %rd45;
	mov.u32 	%r1779, 0;
	st.global.u32 	[%rd46], %r1779;
	add.s64 	%rd48, %rd46, %rd47;
	st.global.u32 	[%rd48], %r1779;
	add.s32 	%r1780, %r7235, %r39;
	add.s32 	%r1781, %r1780, %r39;
	add.s64 	%rd49, %rd48, %rd47;
	st.global.u32 	[%rd49], %r1779;
	add.s32 	%r1782, %r1781, %r39;
	add.s64 	%rd50, %rd49, %rd47;
	st.global.u32 	[%rd50], %r1779;
	add.s32 	%r7235, %r1782, %r39;
	setp.lt.s32 	%p17, %r7235, %r41;
	@%p17 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd51, [%rd1+56];
	cvta.to.global.u64 	%rd3, %rd51;
	sub.s32 	%r1783, %r1738, %r29;
	div.s32 	%r1784, %r1783, %r30;
	mul.lo.s32 	%r1785, %r1784, %r1737;
	sub.s32 	%r51, %r1785, %r29;
	sub.s32 	%r1786, %r1737, %r30;
	mul.lo.s32 	%r1787, %r1786, %r1734;
	mul.lo.s32 	%r52, %r1732, 384;
	add.s32 	%r1788, %r52, %r52;
	add.s32 	%r1789, %r1788, 128;
	mul.lo.s32 	%r1791, %r1757, %r51;
	mul.lo.s32 	%r53, %r1791, 768;
	mad.lo.s32 	%r54, %r1787, %r1789, %r53;
	bra.uni 	$L__BB0_11;

$L__BB0_737:
	mov.f32 	%f540, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f540;
  cvt.rn.f16.f32 high, %f540;
  mov.b32 %r7218, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd546, %r7237, 4;
	add.s64 	%rd547, %rd3, %rd546;
	st.global.u32 	[%rd547], %r7218;
	add.s32 	%r7237, %r7237, %r39;

$L__BB0_11:
	setp.lt.s32 	%p18, %r7237, %r54;
	@%p18 bra 	$L__BB0_737;

	ld.param.u64 	%rd52, [%rd1+96];
	cvta.to.global.u64 	%rd5, %rd52;
	ld.param.u64 	%rd53, [%rd1+64];
	cvta.to.global.u64 	%rd6, %rd53;
	mad.lo.s32 	%r7279, %r1732, %r25, %r23;
	mul.lo.s32 	%r58, %r1733, %r26;
	add.s32 	%r59, %r58, %r24;
	setp.ge.s32 	%p19, %r7279, %r1737;
	@%p19 bra 	$L__BB0_36;

	setp.gt.s32 	%p20, %r27, %r28;
	mov.u32 	%r1792, 31;
	sub.s32 	%r1793, %r1792, %r28;
	selp.b32 	%r1794, %r28, %r1793, %p20;
	shl.b32 	%r1795, %r1794, 2;
	mov.u32 	%r1796, 2;
	sub.s32 	%r60, %r1795, %r1740;
	sub.s32 	%r1797, %r1796, %r1740;
	add.s32 	%r61, %r1797, %r1795;
	shl.b32 	%r62, %r1768, 6;
	add.s32 	%r63, %r1737, -1;
	add.s32 	%r64, %r60, 1;
	add.s32 	%r65, %r61, 1;
	shl.b32 	%r66, %r28, 1;
	or.b32  	%r67, %r66, 1;
	shr.u32 	%r1799, %r67, 31;
	add.s32 	%r1800, %r67, %r1799;
	shr.s32 	%r69, %r1800, 1;
	and.b32  	%r1801, %r1800, -2;
	sub.s32 	%r1802, %r67, %r1801;
	add.s32 	%r68, %r1802, %r62;
	rem.s32 	%r1837, %r64, %r40;
	add.s32 	%r1838, %r1837, %r40;
	rem.s32 	%r92, %r1838, %r40;
	rem.s32 	%r1839, %r65, %r40;
	add.s32 	%r1840, %r1839, %r40;
	rem.s32 	%r93, %r1840, %r40;
	mov.u32 	%r7238, %r7279;

$L__BB0_14:
	setp.ge.s32 	%p21, %r59, %r1738;
	@%p21 bra 	$L__BB0_35;

	add.s32 	%r71, %r63, %r7238;
	rem.s32 	%r1803, %r60, %r40;
	add.s32 	%r1804, %r1803, %r40;
	rem.s32 	%r72, %r1804, %r40;
	rem.s32 	%r1805, %r61, %r40;
	add.s32 	%r1806, %r1805, %r40;
	rem.s32 	%r73, %r1806, %r40;
	mul.lo.s32 	%r74, %r7238, %r1738;
	add.s32 	%r1807, %r1737, %r7238;
	mul.lo.s32 	%r75, %r1807, %r1738;
	add.s32 	%r1808, %r1807, %r1737;
	mul.lo.s32 	%r76, %r1808, %r1738;
	mov.u32 	%r7239, %r59;

$L__BB0_16:
	mul.lo.s32 	%r78, %r7239, %r1737;
	add.s32 	%r79, %r78, %r7238;
	shl.b32 	%r80, %r79, 6;
	@%p20 bra 	$L__BB0_18;
	bra.uni 	$L__BB0_17;

$L__BB0_18:
	add.s32 	%r1811, %r74, %r7239;
	mul.lo.s32 	%r1812, %r1811, %r40;
	add.s32 	%r1813, %r1812, %r72;
	mul.wide.s32 	%rd54, %r1813, 4;
	add.s64 	%rd55, %rd5, %rd54;
	ld.global.f32 	%f41, [%rd55];
	add.s32 	%r1814, %r1812, %r73;
	mul.wide.s32 	%rd56, %r1814, 4;
	add.s64 	%rd57, %rd5, %rd56;
	ld.global.f32 	%f42, [%rd57];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f41;
  cvt.rn.f16.f32 high, %f42;
  mov.b32 %r7240, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_19;

$L__BB0_17:
	mov.f32 	%f40, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f40;
  cvt.rn.f16.f32 high, %f40;
  mov.b32 %r7240, {low,high};}

	// end inline asm

$L__BB0_19:
	shl.b32 	%r84, %r79, 5;
	add.s32 	%r1815, %r84, %r28;
	shl.b32 	%r1816, %r1815, 2;
	add.s32 	%r1817, %r62, %r1816;
	mul.wide.s32 	%rd58, %r1817, 4;
	add.s64 	%rd59, %rd6, %rd58;
	st.global.u32 	[%rd59], %r7240;
	@%p20 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_20;

$L__BB0_21:
	add.s32 	%r1820, %r75, %r7239;
	mul.lo.s32 	%r1821, %r1820, %r40;
	add.s32 	%r1822, %r1821, %r72;
	mul.wide.s32 	%rd60, %r1822, 4;
	add.s64 	%rd61, %rd5, %rd60;
	ld.global.f32 	%f45, [%rd61];
	add.s32 	%r1823, %r1821, %r73;
	mul.wide.s32 	%rd62, %r1823, 4;
	add.s64 	%rd63, %rd5, %rd62;
	ld.global.f32 	%f46, [%rd63];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f45;
  cvt.rn.f16.f32 high, %f46;
  mov.b32 %r7241, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_22;

$L__BB0_20:
	mov.f32 	%f44, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f44;
  cvt.rn.f16.f32 high, %f44;
  mov.b32 %r7241, {low,high};}

	// end inline asm

$L__BB0_22:
	add.s32 	%r1824, %r66, %r80;
	mul.wide.s32 	%rd64, %r1824, 4;
	add.s64 	%rd65, %rd6, %rd64;
	st.global.u32 	[%rd65], %r7241;
	@%p20 bra 	$L__BB0_24;
	bra.uni 	$L__BB0_23;

$L__BB0_24:
	add.s32 	%r1827, %r76, %r7239;
	mul.lo.s32 	%r1828, %r1827, %r40;
	add.s32 	%r1829, %r1828, %r72;
	mul.wide.s32 	%rd66, %r1829, 4;
	add.s64 	%rd67, %rd5, %rd66;
	ld.global.f32 	%f49, [%rd67];
	add.s32 	%r1830, %r1828, %r73;
	mul.wide.s32 	%rd68, %r1830, 4;
	add.s64 	%rd69, %rd5, %rd68;
	ld.global.f32 	%f50, [%rd69];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f49;
  cvt.rn.f16.f32 high, %f50;
  mov.b32 %r7242, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_25;

$L__BB0_23:
	mov.f32 	%f48, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f48;
  cvt.rn.f16.f32 high, %f48;
  mov.b32 %r7242, {low,high};}

	// end inline asm

$L__BB0_25:
	rem.s32 	%r1831, %r71, %r1737;
	add.s32 	%r1832, %r1831, %r78;
	shl.b32 	%r91, %r1832, 5;
	add.s32 	%r1833, %r91, %r28;
	shl.b32 	%r1834, %r1833, 2;
	add.s32 	%r1835, %r62, %r1834;
	add.s32 	%r1836, %r1835, 2;
	mul.wide.s32 	%rd70, %r1836, 4;
	add.s64 	%rd71, %rd6, %rd70;
	st.global.u32 	[%rd71], %r7242;
	@%p20 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1843, %r74, %r7239;
	mul.lo.s32 	%r1844, %r1843, %r40;
	add.s32 	%r1845, %r1844, %r92;
	mul.wide.s32 	%rd72, %r1845, 4;
	add.s64 	%rd73, %rd5, %rd72;
	ld.global.f32 	%f53, [%rd73];
	add.s32 	%r1846, %r1844, %r93;
	mul.wide.s32 	%rd74, %r1846, 4;
	add.s64 	%rd75, %rd5, %rd74;
	ld.global.f32 	%f54, [%rd75];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f53;
  cvt.rn.f16.f32 high, %f54;
  mov.b32 %r7243, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	mov.f32 	%f52, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f52;
  cvt.rn.f16.f32 high, %f52;
  mov.b32 %r7243, {low,high};}

	// end inline asm

$L__BB0_28:
	add.s32 	%r1847, %r84, %r69;
	shl.b32 	%r1848, %r1847, 2;
	add.s32 	%r1849, %r68, %r1848;
	mul.wide.s32 	%rd76, %r1849, 4;
	add.s64 	%rd77, %rd6, %rd76;
	st.global.u32 	[%rd77], %r7243;
	@%p20 bra 	$L__BB0_30;
	bra.uni 	$L__BB0_29;

$L__BB0_30:
	add.s32 	%r1852, %r75, %r7239;
	mul.lo.s32 	%r1853, %r1852, %r40;
	add.s32 	%r1854, %r1853, %r92;
	mul.wide.s32 	%rd78, %r1854, 4;
	add.s64 	%rd79, %rd5, %rd78;
	ld.global.f32 	%f57, [%rd79];
	add.s32 	%r1855, %r1853, %r93;
	mul.wide.s32 	%rd80, %r1855, 4;
	add.s64 	%rd81, %rd5, %rd80;
	ld.global.f32 	%f58, [%rd81];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f57;
  cvt.rn.f16.f32 high, %f58;
  mov.b32 %r7244, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_31;

$L__BB0_29:
	mov.f32 	%f56, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f56;
  cvt.rn.f16.f32 high, %f56;
  mov.b32 %r7244, {low,high};}

	// end inline asm

$L__BB0_31:
	add.s32 	%r1856, %r67, %r80;
	mul.wide.s32 	%rd82, %r1856, 4;
	add.s64 	%rd83, %rd6, %rd82;
	st.global.u32 	[%rd83], %r7244;
	@%p20 bra 	$L__BB0_33;
	bra.uni 	$L__BB0_32;

$L__BB0_33:
	add.s32 	%r1859, %r76, %r7239;
	mul.lo.s32 	%r1860, %r1859, %r40;
	add.s32 	%r1861, %r1860, %r92;
	mul.wide.s32 	%rd84, %r1861, 4;
	add.s64 	%rd85, %rd5, %rd84;
	ld.global.f32 	%f61, [%rd85];
	add.s32 	%r1862, %r1860, %r93;
	mul.wide.s32 	%rd86, %r1862, 4;
	add.s64 	%rd87, %rd5, %rd86;
	ld.global.f32 	%f62, [%rd87];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f61;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r7245, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_34;

$L__BB0_32:
	mov.f32 	%f60, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r7245, {low,high};}

	// end inline asm

$L__BB0_34:
	add.s32 	%r1863, %r91, %r69;
	shl.b32 	%r1864, %r1863, 2;
	add.s32 	%r1865, %r68, %r1864;
	add.s32 	%r1866, %r1865, 2;
	mul.wide.s32 	%rd88, %r1866, 4;
	add.s64 	%rd89, %rd6, %rd88;
	st.global.u32 	[%rd89], %r7245;
	add.s32 	%r7239, %r7239, %r1757;
	setp.lt.s32 	%p28, %r7239, %r1738;
	@%p28 bra 	$L__BB0_16;

$L__BB0_35:
	add.s32 	%r7238, %r7238, %r1752;
	setp.lt.s32 	%p29, %r7238, %r1737;
	@%p29 bra 	$L__BB0_14;

$L__BB0_36:
	ld.param.u64 	%rd90, [%rd1+104];
	cvta.to.global.u64 	%rd7, %rd90;
	ld.param.u64 	%rd91, [%rd1+72];
	cvta.to.global.u64 	%rd8, %rd91;
	@%p19 bra 	$L__BB0_120;

	shl.b32 	%r105, %r59, 1;
	mov.u64 	%rd92, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	mov.u32 	%r7246, %r7279;

$L__BB0_38:
	setp.ge.s32 	%p31, %r105, %r1738;
	@%p31 bra 	$L__BB0_119;

	mov.u32 	%r7247, %r105;

$L__BB0_40:
	setp.ne.s32 	%p32, %r28, 0;
	@%p32 bra 	$L__BB0_118;

	shr.u32 	%r1868, %r7247, 31;
	add.s32 	%r1869, %r7247, %r1868;
	shr.s32 	%r1870, %r1869, 1;
	mad.lo.s32 	%r1871, %r1870, %r1737, %r7246;
	shl.b32 	%r109, %r1871, 5;
	add.s32 	%r110, %r7247, -2;
	mul.lo.s32 	%r111, %r110, %r1737;
	add.s32 	%r1872, %r1738, %r110;
	mul.lo.s32 	%r112, %r1872, %r1737;
	add.s32 	%r1873, %r1872, %r1738;
	mul.lo.s32 	%r113, %r1873, %r1737;
	add.s32 	%r114, %r111, %r1737;
	add.s32 	%r115, %r7247, -1;
	add.s32 	%r1874, %r1738, %r115;
	mul.lo.s32 	%r116, %r1874, %r1737;
	add.s32 	%r1875, %r1874, %r1738;
	mul.lo.s32 	%r117, %r1875, %r1737;
	add.s32 	%r1876, %r1738, %r7247;
	mul.lo.s32 	%r118, %r1876, %r1737;
	add.s32 	%r1877, %r1876, %r1738;
	mul.lo.s32 	%r119, %r1877, %r1737;
	mul.lo.s32 	%r120, %r7247, %r1737;
	add.s32 	%r121, %r120, %r1737;
	add.s32 	%r122, %r7247, 1;
	add.s32 	%r1878, %r1738, %r122;
	mul.lo.s32 	%r123, %r1878, %r1737;
	add.s32 	%r1879, %r1878, %r1738;
	mul.lo.s32 	%r124, %r1879, %r1737;
	add.s32 	%r125, %r121, %r1737;
	add.s32 	%r126, %r7247, 2;
	add.s32 	%r1880, %r1738, %r126;
	mul.lo.s32 	%r127, %r1880, %r1737;
	add.s32 	%r1881, %r1880, %r1738;
	mul.lo.s32 	%r128, %r1881, %r1737;
	mov.u32 	%r7250, 0;
	mov.u64 	%rd558, %rd92;

$L__BB0_42:
	ld.global.nc.u32 	%r1882, [%rd558];
	cvt.rn.f64.s32 	%fd1, %r1882;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r130, %r1882, %r7246;
	setp.lt.s32 	%p33, %r130, %r1737;
	or.b32  	%r1883, %r110, %r130;
	setp.gt.s32 	%p34, %r1883, -1;
	and.pred  	%p35, %p33, %p34;
	setp.lt.s32 	%p36, %r110, %r1738;
	and.pred  	%p1, %p36, %p35;
	cvt.rn.f32.f64 	%f63, %fd3;
	add.f32 	%f64, %f63, 0f3E800000;
	abs.f32 	%f1, %f64;
	add.f32 	%f65, %f1, 0f40200000;
	setp.geu.f32 	%p37, %f65, 0f40000000;
	@%p37 bra 	$L__BB0_47;

	@%p1 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_44;

$L__BB0_45:
	add.s32 	%r1886, %r111, %r130;
	mul.wide.s32 	%rd93, %r1886, 4;
	add.s64 	%rd94, %rd7, %rd93;
	ld.global.f32 	%f68, [%rd94];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f68;
  mov.b32 %r7249, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_46;

$L__BB0_44:
	mov.f32 	%f67, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f67;
  cvt.rn.f16.f32 high, %f67;
  mov.b32 %r7249, {low,high};}

	// end inline asm

$L__BB0_46:
	add.s32 	%r1887, %r7250, %r109;
	mul.wide.s32 	%rd95, %r1887, 4;
	add.s64 	%rd96, %rd8, %rd95;
	st.global.u32 	[%rd96], %r7249;
	add.s32 	%r7250, %r7250, 1;

$L__BB0_47:
	cvt.rn.f32.f64 	%f69, %fd1;
	add.f32 	%f70, %f69, 0f3E800000;
	abs.f32 	%f2, %f70;
	add.f32 	%f3, %f2, 0f40000000;
	setp.geu.f32 	%p38, %f3, 0f40000000;
	@%p38 bra 	$L__BB0_52;

	@%p1 bra 	$L__BB0_50;
	bra.uni 	$L__BB0_49;

$L__BB0_50:
	add.s32 	%r1890, %r112, %r130;
	mul.wide.s32 	%rd97, %r1890, 4;
	add.s64 	%rd98, %rd7, %rd97;
	ld.global.f32 	%f73, [%rd98];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f73;
  mov.b32 %r7251, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_51;

$L__BB0_49:
	mov.f32 	%f72, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f72;
  cvt.rn.f16.f32 high, %f72;
  mov.b32 %r7251, {low,high};}

	// end inline asm

$L__BB0_51:
	add.s32 	%r1891, %r7250, %r109;
	mul.wide.s32 	%rd99, %r1891, 4;
	add.s64 	%rd100, %rd8, %rd99;
	st.global.u32 	[%rd100], %r7251;
	add.s32 	%r7250, %r7250, 1;

$L__BB0_52:
	add.f32 	%f74, %f2, 0f40200000;
	setp.geu.f32 	%p39, %f74, 0f40000000;
	@%p39 bra 	$L__BB0_57;

	@%p1 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1894, %r113, %r130;
	mul.wide.s32 	%rd101, %r1894, 4;
	add.s64 	%rd102, %rd7, %rd101;
	ld.global.f32 	%f77, [%rd102];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f77;
  mov.b32 %r7253, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	mov.f32 	%f76, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f76;
  cvt.rn.f16.f32 high, %f76;
  mov.b32 %r7253, {low,high};}

	// end inline asm

$L__BB0_56:
	add.s32 	%r1895, %r7250, %r109;
	mul.wide.s32 	%rd103, %r1895, 4;
	add.s64 	%rd104, %rd8, %rd103;
	st.global.u32 	[%rd104], %r7253;
	add.s32 	%r7250, %r7250, 1;

$L__BB0_57:
	or.b32  	%r1896, %r115, %r130;
	setp.gt.s32 	%p40, %r1896, -1;
	and.pred  	%p42, %p33, %p40;
	setp.le.s32 	%p43, %r7247, %r1738;
	and.pred  	%p2, %p43, %p42;
	add.f32 	%f4, %f1, 0f3FC00000;
	setp.geu.f32 	%p44, %f4, 0f40000000;
	@%p44 bra 	$L__BB0_62;

	@%p2 bra 	$L__BB0_60;
	bra.uni 	$L__BB0_59;

$L__BB0_60:
	add.s32 	%r1899, %r114, %r130;
	mul.wide.s32 	%rd105, %r1899, 4;
	add.s64 	%rd106, %rd7, %rd105;
	ld.global.f32 	%f80, [%rd106];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f80;
  mov.b32 %r7255, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_61;

$L__BB0_59:
	mov.f32 	%f79, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f79;
  cvt.rn.f16.f32 high, %f79;
  mov.b32 %r7255, {low,high};}

	// end inline asm

$L__BB0_61:
	add.s32 	%r1900, %r7250, %r109;
	mul.wide.s32 	%rd107, %r1900, 4;
	add.s64 	%rd108, %rd8, %rd107;
	st.global.u32 	[%rd108], %r7255;
	add.s32 	%r7250, %r7250, 1;

$L__BB0_62:
	add.f32 	%f5, %f2, 0f3F800000;
	setp.geu.f32 	%p45, %f5, 0f40000000;
	@%p45 bra 	$L__BB0_67;

	@%p2 bra 	$L__BB0_65;
	bra.uni 	$L__BB0_64;

$L__BB0_65:
	add.s32 	%r1903, %r116, %r130;
	mul.wide.s32 	%rd109, %r1903, 4;
	add.s64 	%rd110, %rd7, %rd109;
	ld.global.f32 	%f83, [%rd110];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f83;
  mov.b32 %r7257, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_66;

$L__BB0_64:
	mov.f32 	%f82, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f82;
  cvt.rn.f16.f32 high, %f82;
  mov.b32 %r7257, {low,high};}

	// end inline asm

$L__BB0_66:
	add.s32 	%r1904, %r7250, %r109;
	mul.wide.s32 	%rd111, %r1904, 4;
	add.s64 	%rd112, %rd8, %rd111;
	st.global.u32 	[%rd112], %r7257;
	add.s32 	%r7250, %r7250, 1;

$L__BB0_67:
	add.f32 	%f6, %f2, 0f3FC00000;
	setp.geu.f32 	%p46, %f6, 0f40000000;
	@%p46 bra 	$L__BB0_72;

	@%p2 bra 	$L__BB0_70;
	bra.uni 	$L__BB0_69;

$L__BB0_70:
	add.s32 	%r1907, %r117, %r130;
	mul.wide.s32 	%rd113, %r1907, 4;
	add.s64 	%rd114, %rd7, %rd113;
	ld.global.f32 	%f86, [%rd114];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f86;
  mov.b32 %r7259, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_71;

$L__BB0_69:
	mov.f32 	%f85, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f85;
  cvt.rn.f16.f32 high, %f85;
  mov.b32 %r7259, {low,high};}

	// end inline asm

$L__BB0_71:
	add.s32 	%r1908, %r7250, %r109;
	mul.wide.s32 	%rd115, %r1908, 4;
	add.s64 	%rd116, %rd8, %rd115;
	st.global.u32 	[%rd116], %r7259;
	add.s32 	%r7250, %r7250, 1;

$L__BB0_72:
	or.b32  	%r1909, %r7247, %r130;
	setp.gt.s32 	%p47, %r1909, -1;
	and.pred  	%p49, %p33, %p47;
	setp.lt.s32 	%p50, %r7247, %r1738;
	and.pred  	%p3, %p50, %p49;
	add.f32 	%f7, %f1, 0f3F000000;
	setp.geu.f32 	%p51, %f7, 0f40000000;
	@%p51 bra 	$L__BB0_77;

	@%p3 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1912, %r120, %r130;
	mul.wide.s32 	%rd117, %r1912, 4;
	add.s64 	%rd118, %rd7, %rd117;
	ld.global.f32 	%f89, [%rd118];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f89;
  mov.b32 %r7261, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f88, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f88;
  cvt.rn.f16.f32 high, %f88;
  mov.b32 %r7261, {low,high};}

	// end inline asm

$L__BB0_76:
	add.s32 	%r1913, %r7250, %r109;
	mul.wide.s32 	%rd119, %r1913, 4;
	add.s64 	%rd120, %rd8, %rd119;
	st.global.u32 	[%rd120], %r7261;
	add.s32 	%r7250, %r7250, 1;

$L__BB0_77:
	add.f32 	%f90, %f2, 0f00000000;
	setp.geu.f32 	%p52, %f90, 0f40000000;
	@%p52 bra 	$L__BB0_82;

	@%p3 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1916, %r118, %r130;
	mul.wide.s32 	%rd121, %r1916, 4;
	add.s64 	%rd122, %rd7, %rd121;
	ld.global.f32 	%f93, [%rd122];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f93;
  mov.b32 %r7263, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f92, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f92;
  cvt.rn.f16.f32 high, %f92;
  mov.b32 %r7263, {low,high};}

	// end inline asm

$L__BB0_81:
	add.s32 	%r1917, %r7250, %r109;
	mul.wide.s32 	%rd123, %r1917, 4;
	add.s64 	%rd124, %rd8, %rd123;
	st.global.u32 	[%rd124], %r7263;
	add.s32 	%r7250, %r7250, 1;

$L__BB0_82:
	add.f32 	%f8, %f2, 0f3F000000;
	setp.geu.f32 	%p53, %f8, 0f40000000;
	@%p53 bra 	$L__BB0_87;

	@%p3 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r1920, %r119, %r130;
	mul.wide.s32 	%rd125, %r1920, 4;
	add.s64 	%rd126, %rd7, %rd125;
	ld.global.f32 	%f96, [%rd126];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f96;
  mov.b32 %r7265, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f95, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f95;
  cvt.rn.f16.f32 high, %f95;
  mov.b32 %r7265, {low,high};}

	// end inline asm

$L__BB0_86:
	add.s32 	%r1921, %r7250, %r109;
	mul.wide.s32 	%rd127, %r1921, 4;
	add.s64 	%rd128, %rd8, %rd127;
	st.global.u32 	[%rd128], %r7265;
	add.s32 	%r7250, %r7250, 1;

$L__BB0_87:
	or.b32  	%r1922, %r122, %r130;
	setp.gt.s32 	%p54, %r1922, -1;
	and.pred  	%p56, %p33, %p54;
	setp.lt.s32 	%p57, %r122, %r1738;
	and.pred  	%p4, %p57, %p56;
	@%p51 bra 	$L__BB0_92;

	@%p4 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r1925, %r121, %r130;
	mul.wide.s32 	%rd129, %r1925, 4;
	add.s64 	%rd130, %rd7, %rd129;
	ld.global.f32 	%f99, [%rd130];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f99;
  mov.b32 %r7267, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f98, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f98;
  cvt.rn.f16.f32 high, %f98;
  mov.b32 %r7267, {low,high};}

	// end inline asm

$L__BB0_91:
	add.s32 	%r1926, %r7250, %r109;
	mul.wide.s32 	%rd131, %r1926, 4;
	add.s64 	%rd132, %rd8, %rd131;
	st.global.u32 	[%rd132], %r7267;
	add.s32 	%r7250, %r7250, 1;

$L__BB0_92:
	@%p45 bra 	$L__BB0_97;

	@%p4 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r1929, %r123, %r130;
	mul.wide.s32 	%rd133, %r1929, 4;
	add.s64 	%rd134, %rd7, %rd133;
	ld.global.f32 	%f102, [%rd134];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f102;
  mov.b32 %r7269, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f101, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f101;
  cvt.rn.f16.f32 high, %f101;
  mov.b32 %r7269, {low,high};}

	// end inline asm

$L__BB0_96:
	add.s32 	%r1930, %r7250, %r109;
	mul.wide.s32 	%rd135, %r1930, 4;
	add.s64 	%rd136, %rd8, %rd135;
	st.global.u32 	[%rd136], %r7269;
	add.s32 	%r7250, %r7250, 1;

$L__BB0_97:
	@%p53 bra 	$L__BB0_102;

	@%p4 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r1933, %r124, %r130;
	mul.wide.s32 	%rd137, %r1933, 4;
	add.s64 	%rd138, %rd7, %rd137;
	ld.global.f32 	%f105, [%rd138];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f105;
  mov.b32 %r7271, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f104, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f104;
  cvt.rn.f16.f32 high, %f104;
  mov.b32 %r7271, {low,high};}

	// end inline asm

$L__BB0_101:
	add.s32 	%r1934, %r7250, %r109;
	mul.wide.s32 	%rd139, %r1934, 4;
	add.s64 	%rd140, %rd8, %rd139;
	st.global.u32 	[%rd140], %r7271;
	add.s32 	%r7250, %r7250, 1;

$L__BB0_102:
	or.b32  	%r1935, %r126, %r130;
	setp.gt.s32 	%p61, %r1935, -1;
	and.pred  	%p63, %p33, %p61;
	setp.lt.s32 	%p64, %r126, %r1738;
	and.pred  	%p5, %p64, %p63;
	@%p44 bra 	$L__BB0_107;

	@%p5 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r1938, %r125, %r130;
	mul.wide.s32 	%rd141, %r1938, 4;
	add.s64 	%rd142, %rd7, %rd141;
	ld.global.f32 	%f108, [%rd142];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f108;
  mov.b32 %r7273, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f107, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f107;
  cvt.rn.f16.f32 high, %f107;
  mov.b32 %r7273, {low,high};}

	// end inline asm

$L__BB0_106:
	add.s32 	%r1939, %r7250, %r109;
	mul.wide.s32 	%rd143, %r1939, 4;
	add.s64 	%rd144, %rd8, %rd143;
	st.global.u32 	[%rd144], %r7273;
	add.s32 	%r7250, %r7250, 1;

$L__BB0_107:
	@%p38 bra 	$L__BB0_112;

	@%p5 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r1942, %r127, %r130;
	mul.wide.s32 	%rd145, %r1942, 4;
	add.s64 	%rd146, %rd7, %rd145;
	ld.global.f32 	%f111, [%rd146];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f111;
  mov.b32 %r7275, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f110, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f110;
  cvt.rn.f16.f32 high, %f110;
  mov.b32 %r7275, {low,high};}

	// end inline asm

$L__BB0_111:
	add.s32 	%r1943, %r7250, %r109;
	mul.wide.s32 	%rd147, %r1943, 4;
	add.s64 	%rd148, %rd8, %rd147;
	st.global.u32 	[%rd148], %r7275;
	add.s32 	%r7250, %r7250, 1;

$L__BB0_112:
	@%p46 bra 	$L__BB0_117;

	@%p5 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r1946, %r128, %r130;
	mul.wide.s32 	%rd149, %r1946, 4;
	add.s64 	%rd150, %rd7, %rd149;
	ld.global.f32 	%f114, [%rd150];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f114;
  mov.b32 %r7277, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f113, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f113;
  cvt.rn.f16.f32 high, %f113;
  mov.b32 %r7277, {low,high};}

	// end inline asm

$L__BB0_116:
	add.s32 	%r1947, %r7250, %r109;
	mul.wide.s32 	%rd151, %r1947, 4;
	add.s64 	%rd152, %rd8, %rd151;
	st.global.u32 	[%rd152], %r7277;
	add.s32 	%r7250, %r7250, 1;

$L__BB0_117:
	add.s64 	%rd558, %rd558, 4;
	mov.u64 	%rd153, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd154, %rd153, 24;
	setp.ne.s64 	%p68, %rd558, %rd154;
	@%p68 bra 	$L__BB0_42;

$L__BB0_118:
	add.s32 	%r7247, %r7247, %r30;
	setp.lt.s32 	%p69, %r7247, %r1738;
	@%p69 bra 	$L__BB0_40;

$L__BB0_119:
	add.s32 	%r7246, %r7246, %r1752;
	setp.lt.s32 	%p70, %r7246, %r1737;
	@%p70 bra 	$L__BB0_38;

$L__BB0_120:
	setp.eq.s32 	%p71, %r1741, 1;
	ld.param.u64 	%rd155, [%rd1+112];
	cvta.to.global.u64 	%rd11, %rd155;
	ld.param.u64 	%rd156, [%rd1+80];
	cvta.to.global.u64 	%rd12, %rd156;
	@%p71 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_121;

$L__BB0_138:
	@%p19 bra 	$L__BB0_267;

	shl.b32 	%r233, %r59, 1;
	shr.u32 	%r1993, %r1742, 31;
	add.s32 	%r1994, %r1742, %r1993;
	bfe.u32 	%r234, %r1994, 1, 1;
	mov.u64 	%rd176, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;

$L__BB0_140:
	setp.ge.s32 	%p81, %r233, %r1738;
	@%p81 bra 	$L__BB0_266;

	mov.u32 	%r7285, %r233;

$L__BB0_142:
	setp.ne.s32 	%p82, %r28, 0;
	@%p82 bra 	$L__BB0_265;

	shr.u32 	%r1996, %r7285, 31;
	add.s32 	%r1997, %r7285, %r1996;
	shr.s32 	%r1998, %r1997, 1;
	mad.lo.s32 	%r1999, %r1998, %r1737, %r7279;
	shl.b32 	%r238, %r1999, 5;
	add.s32 	%r239, %r7285, -2;
	mul.lo.s32 	%r240, %r239, %r1737;
	add.s32 	%r2000, %r1738, %r239;
	mul.lo.s32 	%r241, %r2000, %r1737;
	add.s32 	%r242, %r240, %r1737;
	add.s32 	%r243, %r7285, -1;
	add.s32 	%r2001, %r1738, %r243;
	mul.lo.s32 	%r244, %r2001, %r1737;
	add.s32 	%r2002, %r1738, %r7285;
	mul.lo.s32 	%r245, %r2002, %r1737;
	mul.lo.s32 	%r246, %r7285, %r1737;
	add.s32 	%r247, %r246, %r1737;
	add.s32 	%r248, %r7285, 1;
	add.s32 	%r2003, %r1738, %r248;
	mul.lo.s32 	%r249, %r2003, %r1737;
	add.s32 	%r250, %r247, %r1737;
	add.s32 	%r251, %r7285, 2;
	add.s32 	%r2004, %r1738, %r251;
	mul.lo.s32 	%r252, %r2004, %r1737;
	mov.u32 	%r7289, 0;
	mov.u64 	%rd559, 24;
	mov.u64 	%rd560, %rd176;

$L__BB0_144:
	ld.global.nc.u32 	%r2005, [%rd560];
	cvt.rn.f64.s32 	%fd2, %r2005;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r254, %r2005, %r7279;
	setp.lt.s32 	%p83, %r254, %r1737;
	or.b32  	%r2006, %r239, %r254;
	setp.gt.s32 	%p84, %r2006, -1;
	and.pred  	%p85, %p83, %p84;
	setp.lt.s32 	%p86, %r239, %r1738;
	and.pred  	%p6, %p86, %p85;
	cvt.rn.f32.f64 	%f131, %fd4;
	add.f32 	%f132, %f131, 0f3E800000;
	abs.f32 	%f9, %f132;
	add.f32 	%f133, %f9, 0f40200000;
	setp.geu.f32 	%p87, %f133, 0f40000000;
	@%p87 bra 	$L__BB0_156;

	@%p6 bra 	$L__BB0_147;
	bra.uni 	$L__BB0_146;

$L__BB0_147:
	setp.eq.s32 	%p88, %r234, 0;
	add.s32 	%r2008, %r240, %r254;
	shl.b32 	%r2009, %r2008, 1;
	mul.wide.s32 	%rd177, %r2009, 4;
	add.s64 	%rd178, %rd11, %rd177;
	ld.global.f32 	%f10, [%rd178];
	@%p88 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_148;

$L__BB0_149:
	mov.f32 	%f139, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f10;
  cvt.rn.f16.f32 high, %f139;
  mov.b32 %r7287, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_146:
	mov.f32 	%f135, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f135;
  cvt.rn.f16.f32 high, %f135;
  mov.b32 %r7287, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_148:
	mov.f32 	%f136, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f136;
  cvt.rn.f16.f32 high, %f10;
  mov.b32 %r7287, {low,high};}

	// end inline asm

$L__BB0_150:
	add.s32 	%r259, %r7289, %r238;
	mul.wide.s32 	%rd179, %r259, 4;
	add.s64 	%rd180, %rd12, %rd179;
	st.global.u32 	[%rd180], %r7287;
	@%p6 bra 	$L__BB0_152;
	bra.uni 	$L__BB0_151;

$L__BB0_152:
	setp.eq.s32 	%p89, %r234, 0;
	add.s32 	%r2013, %r241, %r254;
	shl.b32 	%r2014, %r2013, 1;
	mul.wide.s32 	%rd181, %r2014, 4;
	add.s64 	%rd182, %rd11, %rd181;
	ld.global.f32 	%f11, [%rd182];
	@%p89 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_153;

$L__BB0_154:
	mov.f32 	%f145, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f11;
  cvt.rn.f16.f32 high, %f145;
  mov.b32 %r7288, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_151:
	mov.f32 	%f141, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f141;
  cvt.rn.f16.f32 high, %f141;
  mov.b32 %r7288, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_153:
	mov.f32 	%f142, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f142;
  cvt.rn.f16.f32 high, %f11;
  mov.b32 %r7288, {low,high};}

	// end inline asm

$L__BB0_155:
	add.s32 	%r2017, %r259, 1;
	mul.wide.s32 	%rd183, %r2017, 4;
	add.s64 	%rd184, %rd12, %rd183;
	st.global.u32 	[%rd184], %r7288;
	add.s32 	%r7289, %r7289, 2;

$L__BB0_156:
	cvt.rn.f32.f64 	%f146, %fd2;
	add.f32 	%f147, %f146, 0f3E800000;
	abs.f32 	%f12, %f147;
	add.f32 	%f13, %f12, 0f40000000;
	setp.geu.f32 	%p90, %f13, 0f40000000;
	@%p90 bra 	$L__BB0_168;

	@%p6 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	setp.eq.s32 	%p91, %r234, 0;
	add.s32 	%r2019, %r240, %r254;
	shl.b32 	%r2020, %r2019, 1;
	or.b32  	%r2021, %r2020, 1;
	mul.wide.s32 	%rd185, %r2021, 4;
	add.s64 	%rd186, %rd11, %rd185;
	ld.global.f32 	%f14, [%rd186];
	@%p91 bra 	$L__BB0_161;
	bra.uni 	$L__BB0_160;

$L__BB0_161:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f14;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r7290, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_158:
	mov.f32 	%f149, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f149;
  cvt.rn.f16.f32 high, %f149;
  mov.b32 %r7290, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_160:
	mov.f32 	%f150, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f150;
  cvt.rn.f16.f32 high, %f14;
  mov.b32 %r7290, {low,high};}

	// end inline asm

$L__BB0_162:
	add.s32 	%r270, %r7289, %r238;
	mul.wide.s32 	%rd187, %r270, 4;
	add.s64 	%rd188, %rd12, %rd187;
	st.global.u32 	[%rd188], %r7290;
	@%p6 bra 	$L__BB0_164;
	bra.uni 	$L__BB0_163;

$L__BB0_164:
	setp.eq.s32 	%p92, %r234, 0;
	add.s32 	%r2025, %r241, %r254;
	shl.b32 	%r2026, %r2025, 1;
	or.b32  	%r2027, %r2026, 1;
	mul.wide.s32 	%rd189, %r2027, 4;
	add.s64 	%rd190, %rd11, %rd189;
	ld.global.f32 	%f15, [%rd190];
	@%p92 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_165;

$L__BB0_166:
	mov.f32 	%f159, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f15;
  cvt.rn.f16.f32 high, %f159;
  mov.b32 %r7291, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_163:
	mov.f32 	%f155, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f155;
  cvt.rn.f16.f32 high, %f155;
  mov.b32 %r7291, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_165:
	mov.f32 	%f156, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f156;
  cvt.rn.f16.f32 high, %f15;
  mov.b32 %r7291, {low,high};}

	// end inline asm

$L__BB0_167:
	add.s32 	%r2030, %r270, 1;
	mul.wide.s32 	%rd191, %r2030, 4;
	add.s64 	%rd192, %rd12, %rd191;
	st.global.u32 	[%rd192], %r7291;
	add.s32 	%r7289, %r7289, 2;

$L__BB0_168:
	or.b32  	%r2031, %r243, %r254;
	setp.gt.s32 	%p93, %r2031, -1;
	and.pred  	%p95, %p83, %p93;
	setp.le.s32 	%p96, %r7285, %r1738;
	and.pred  	%p7, %p96, %p95;
	add.f32 	%f16, %f9, 0f3FC00000;
	setp.geu.f32 	%p97, %f16, 0f40000000;
	@%p97 bra 	$L__BB0_180;

	@%p7 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_170;

$L__BB0_171:
	setp.eq.s32 	%p98, %r234, 0;
	add.s32 	%r2033, %r242, %r254;
	shl.b32 	%r2034, %r2033, 1;
	mul.wide.s32 	%rd193, %r2034, 4;
	add.s64 	%rd194, %rd11, %rd193;
	ld.global.f32 	%f17, [%rd194];
	@%p98 bra 	$L__BB0_173;
	bra.uni 	$L__BB0_172;

$L__BB0_173:
	mov.f32 	%f165, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f17;
  cvt.rn.f16.f32 high, %f165;
  mov.b32 %r7293, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_170:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f161;
  mov.b32 %r7293, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_172:
	mov.f32 	%f162, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f162;
  cvt.rn.f16.f32 high, %f17;
  mov.b32 %r7293, {low,high};}

	// end inline asm

$L__BB0_174:
	add.s32 	%r281, %r7289, %r238;
	mul.wide.s32 	%rd195, %r281, 4;
	add.s64 	%rd196, %rd12, %rd195;
	st.global.u32 	[%rd196], %r7293;
	@%p7 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_175;

$L__BB0_176:
	setp.eq.s32 	%p99, %r234, 0;
	add.s32 	%r2038, %r244, %r254;
	shl.b32 	%r2039, %r2038, 1;
	mul.wide.s32 	%rd197, %r2039, 4;
	add.s64 	%rd198, %rd11, %rd197;
	ld.global.f32 	%f18, [%rd198];
	@%p99 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_177;

$L__BB0_178:
	mov.f32 	%f171, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f18;
  cvt.rn.f16.f32 high, %f171;
  mov.b32 %r7294, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_175:
	mov.f32 	%f167, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f167;
  cvt.rn.f16.f32 high, %f167;
  mov.b32 %r7294, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_177:
	mov.f32 	%f168, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f168;
  cvt.rn.f16.f32 high, %f18;
  mov.b32 %r7294, {low,high};}

	// end inline asm

$L__BB0_179:
	add.s32 	%r2042, %r281, 1;
	mul.wide.s32 	%rd199, %r2042, 4;
	add.s64 	%rd200, %rd12, %rd199;
	st.global.u32 	[%rd200], %r7294;
	add.s32 	%r7289, %r7289, 2;

$L__BB0_180:
	add.f32 	%f19, %f12, 0f3F800000;
	setp.geu.f32 	%p100, %f19, 0f40000000;
	@%p100 bra 	$L__BB0_192;

	@%p7 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_182;

$L__BB0_183:
	setp.eq.s32 	%p101, %r234, 0;
	add.s32 	%r2044, %r242, %r254;
	shl.b32 	%r2045, %r2044, 1;
	or.b32  	%r2046, %r2045, 1;
	mul.wide.s32 	%rd201, %r2046, 4;
	add.s64 	%rd202, %rd11, %rd201;
	ld.global.f32 	%f20, [%rd202];
	@%p101 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_184;

$L__BB0_185:
	mov.f32 	%f177, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f20;
  cvt.rn.f16.f32 high, %f177;
  mov.b32 %r7296, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_182:
	mov.f32 	%f173, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f173;
  cvt.rn.f16.f32 high, %f173;
  mov.b32 %r7296, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_184:
	mov.f32 	%f174, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f174;
  cvt.rn.f16.f32 high, %f20;
  mov.b32 %r7296, {low,high};}

	// end inline asm

$L__BB0_186:
	add.s32 	%r292, %r7289, %r238;
	mul.wide.s32 	%rd203, %r292, 4;
	add.s64 	%rd204, %rd12, %rd203;
	st.global.u32 	[%rd204], %r7296;
	@%p7 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_187;

$L__BB0_188:
	setp.eq.s32 	%p102, %r234, 0;
	add.s32 	%r2050, %r244, %r254;
	shl.b32 	%r2051, %r2050, 1;
	or.b32  	%r2052, %r2051, 1;
	mul.wide.s32 	%rd205, %r2052, 4;
	add.s64 	%rd206, %rd11, %rd205;
	ld.global.f32 	%f21, [%rd206];
	@%p102 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_189;

$L__BB0_190:
	mov.f32 	%f183, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f21;
  cvt.rn.f16.f32 high, %f183;
  mov.b32 %r7297, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_187:
	mov.f32 	%f179, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f179;
  cvt.rn.f16.f32 high, %f179;
  mov.b32 %r7297, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_189:
	mov.f32 	%f180, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f180;
  cvt.rn.f16.f32 high, %f21;
  mov.b32 %r7297, {low,high};}

	// end inline asm

$L__BB0_191:
	add.s32 	%r2055, %r292, 1;
	mul.wide.s32 	%rd207, %r2055, 4;
	add.s64 	%rd208, %rd12, %rd207;
	st.global.u32 	[%rd208], %r7297;
	add.s32 	%r7289, %r7289, 2;

$L__BB0_192:
	or.b32  	%r2056, %r7285, %r254;
	setp.gt.s32 	%p103, %r2056, -1;
	and.pred  	%p105, %p83, %p103;
	setp.lt.s32 	%p106, %r7285, %r1738;
	and.pred  	%p8, %p106, %p105;
	add.f32 	%f22, %f9, 0f3F000000;
	setp.geu.f32 	%p107, %f22, 0f40000000;
	@%p107 bra 	$L__BB0_204;

	@%p8 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_194;

$L__BB0_195:
	setp.eq.s32 	%p108, %r234, 0;
	add.s32 	%r2058, %r246, %r254;
	shl.b32 	%r2059, %r2058, 1;
	mul.wide.s32 	%rd209, %r2059, 4;
	add.s64 	%rd210, %rd11, %rd209;
	ld.global.f32 	%f23, [%rd210];
	@%p108 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_196;

$L__BB0_197:
	mov.f32 	%f189, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f23;
  cvt.rn.f16.f32 high, %f189;
  mov.b32 %r7299, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_194:
	mov.f32 	%f185, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f185;
  cvt.rn.f16.f32 high, %f185;
  mov.b32 %r7299, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_196:
	mov.f32 	%f186, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f186;
  cvt.rn.f16.f32 high, %f23;
  mov.b32 %r7299, {low,high};}

	// end inline asm

$L__BB0_198:
	add.s32 	%r303, %r7289, %r238;
	mul.wide.s32 	%rd211, %r303, 4;
	add.s64 	%rd212, %rd12, %rd211;
	st.global.u32 	[%rd212], %r7299;
	@%p8 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_199;

$L__BB0_200:
	setp.eq.s32 	%p109, %r234, 0;
	add.s32 	%r2063, %r245, %r254;
	shl.b32 	%r2064, %r2063, 1;
	mul.wide.s32 	%rd213, %r2064, 4;
	add.s64 	%rd214, %rd11, %rd213;
	ld.global.f32 	%f24, [%rd214];
	@%p109 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_201;

$L__BB0_202:
	mov.f32 	%f195, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f24;
  cvt.rn.f16.f32 high, %f195;
  mov.b32 %r7300, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_199:
	mov.f32 	%f191, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f191;
  cvt.rn.f16.f32 high, %f191;
  mov.b32 %r7300, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_201:
	mov.f32 	%f192, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f192;
  cvt.rn.f16.f32 high, %f24;
  mov.b32 %r7300, {low,high};}

	// end inline asm

$L__BB0_203:
	add.s32 	%r2067, %r303, 1;
	mul.wide.s32 	%rd215, %r2067, 4;
	add.s64 	%rd216, %rd12, %rd215;
	st.global.u32 	[%rd216], %r7300;
	add.s32 	%r7289, %r7289, 2;

$L__BB0_204:
	add.f32 	%f196, %f12, 0f00000000;
	setp.geu.f32 	%p110, %f196, 0f40000000;
	@%p110 bra 	$L__BB0_216;

	@%p8 bra 	$L__BB0_207;
	bra.uni 	$L__BB0_206;

$L__BB0_207:
	setp.eq.s32 	%p111, %r234, 0;
	add.s32 	%r2069, %r246, %r254;
	shl.b32 	%r2070, %r2069, 1;
	or.b32  	%r2071, %r2070, 1;
	mul.wide.s32 	%rd217, %r2071, 4;
	add.s64 	%rd218, %rd11, %rd217;
	ld.global.f32 	%f25, [%rd218];
	@%p111 bra 	$L__BB0_209;
	bra.uni 	$L__BB0_208;

$L__BB0_209:
	mov.f32 	%f202, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f25;
  cvt.rn.f16.f32 high, %f202;
  mov.b32 %r7302, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_206:
	mov.f32 	%f198, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f198;
  cvt.rn.f16.f32 high, %f198;
  mov.b32 %r7302, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_208:
	mov.f32 	%f199, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f199;
  cvt.rn.f16.f32 high, %f25;
  mov.b32 %r7302, {low,high};}

	// end inline asm

$L__BB0_210:
	add.s32 	%r314, %r7289, %r238;
	mul.wide.s32 	%rd219, %r314, 4;
	add.s64 	%rd220, %rd12, %rd219;
	st.global.u32 	[%rd220], %r7302;
	@%p8 bra 	$L__BB0_212;
	bra.uni 	$L__BB0_211;

$L__BB0_212:
	setp.eq.s32 	%p112, %r234, 0;
	add.s32 	%r2075, %r245, %r254;
	shl.b32 	%r2076, %r2075, 1;
	or.b32  	%r2077, %r2076, 1;
	mul.wide.s32 	%rd221, %r2077, 4;
	add.s64 	%rd222, %rd11, %rd221;
	ld.global.f32 	%f26, [%rd222];
	@%p112 bra 	$L__BB0_214;
	bra.uni 	$L__BB0_213;

$L__BB0_214:
	mov.f32 	%f208, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f26;
  cvt.rn.f16.f32 high, %f208;
  mov.b32 %r7303, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_211:
	mov.f32 	%f204, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f204;
  cvt.rn.f16.f32 high, %f204;
  mov.b32 %r7303, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_213:
	mov.f32 	%f205, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f205;
  cvt.rn.f16.f32 high, %f26;
  mov.b32 %r7303, {low,high};}

	// end inline asm

$L__BB0_215:
	add.s32 	%r2080, %r314, 1;
	mul.wide.s32 	%rd223, %r2080, 4;
	add.s64 	%rd224, %rd12, %rd223;
	st.global.u32 	[%rd224], %r7303;
	add.s32 	%r7289, %r7289, 2;

$L__BB0_216:
	or.b32  	%r2081, %r248, %r254;
	setp.gt.s32 	%p113, %r2081, -1;
	and.pred  	%p115, %p83, %p113;
	setp.lt.s32 	%p116, %r248, %r1738;
	and.pred  	%p9, %p116, %p115;
	@%p107 bra 	$L__BB0_228;

	@%p9 bra 	$L__BB0_219;
	bra.uni 	$L__BB0_218;

$L__BB0_219:
	setp.eq.s32 	%p118, %r234, 0;
	add.s32 	%r2083, %r247, %r254;
	shl.b32 	%r2084, %r2083, 1;
	mul.wide.s32 	%rd225, %r2084, 4;
	add.s64 	%rd226, %rd11, %rd225;
	ld.global.f32 	%f27, [%rd226];
	@%p118 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_220;

$L__BB0_221:
	mov.f32 	%f214, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f27;
  cvt.rn.f16.f32 high, %f214;
  mov.b32 %r7305, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_218:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r7305, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_220:
	mov.f32 	%f211, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f211;
  cvt.rn.f16.f32 high, %f27;
  mov.b32 %r7305, {low,high};}

	// end inline asm

$L__BB0_222:
	add.s32 	%r325, %r7289, %r238;
	mul.wide.s32 	%rd227, %r325, 4;
	add.s64 	%rd228, %rd12, %rd227;
	st.global.u32 	[%rd228], %r7305;
	@%p9 bra 	$L__BB0_224;
	bra.uni 	$L__BB0_223;

$L__BB0_224:
	setp.eq.s32 	%p119, %r234, 0;
	add.s32 	%r2088, %r249, %r254;
	shl.b32 	%r2089, %r2088, 1;
	mul.wide.s32 	%rd229, %r2089, 4;
	add.s64 	%rd230, %rd11, %rd229;
	ld.global.f32 	%f28, [%rd230];
	@%p119 bra 	$L__BB0_226;
	bra.uni 	$L__BB0_225;

$L__BB0_226:
	mov.f32 	%f220, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f28;
  cvt.rn.f16.f32 high, %f220;
  mov.b32 %r7306, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_223:
	mov.f32 	%f216, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f216;
  cvt.rn.f16.f32 high, %f216;
  mov.b32 %r7306, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_225:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f28;
  mov.b32 %r7306, {low,high};}

	// end inline asm

$L__BB0_227:
	add.s32 	%r2092, %r325, 1;
	mul.wide.s32 	%rd231, %r2092, 4;
	add.s64 	%rd232, %rd12, %rd231;
	st.global.u32 	[%rd232], %r7306;
	add.s32 	%r7289, %r7289, 2;

$L__BB0_228:
	@%p100 bra 	$L__BB0_240;

	@%p9 bra 	$L__BB0_231;
	bra.uni 	$L__BB0_230;

$L__BB0_231:
	setp.eq.s32 	%p121, %r234, 0;
	add.s32 	%r2094, %r247, %r254;
	shl.b32 	%r2095, %r2094, 1;
	or.b32  	%r2096, %r2095, 1;
	mul.wide.s32 	%rd233, %r2096, 4;
	add.s64 	%rd234, %rd11, %rd233;
	ld.global.f32 	%f29, [%rd234];
	@%p121 bra 	$L__BB0_233;
	bra.uni 	$L__BB0_232;

$L__BB0_233:
	mov.f32 	%f226, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f29;
  cvt.rn.f16.f32 high, %f226;
  mov.b32 %r7308, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_230:
	mov.f32 	%f222, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f222;
  cvt.rn.f16.f32 high, %f222;
  mov.b32 %r7308, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_232:
	mov.f32 	%f223, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f223;
  cvt.rn.f16.f32 high, %f29;
  mov.b32 %r7308, {low,high};}

	// end inline asm

$L__BB0_234:
	add.s32 	%r336, %r7289, %r238;
	mul.wide.s32 	%rd235, %r336, 4;
	add.s64 	%rd236, %rd12, %rd235;
	st.global.u32 	[%rd236], %r7308;
	@%p9 bra 	$L__BB0_236;
	bra.uni 	$L__BB0_235;

$L__BB0_236:
	setp.eq.s32 	%p122, %r234, 0;
	add.s32 	%r2100, %r249, %r254;
	shl.b32 	%r2101, %r2100, 1;
	or.b32  	%r2102, %r2101, 1;
	mul.wide.s32 	%rd237, %r2102, 4;
	add.s64 	%rd238, %rd11, %rd237;
	ld.global.f32 	%f30, [%rd238];
	@%p122 bra 	$L__BB0_238;
	bra.uni 	$L__BB0_237;

$L__BB0_238:
	mov.f32 	%f232, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f30;
  cvt.rn.f16.f32 high, %f232;
  mov.b32 %r7309, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_235:
	mov.f32 	%f228, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f228;
  cvt.rn.f16.f32 high, %f228;
  mov.b32 %r7309, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_237:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f30;
  mov.b32 %r7309, {low,high};}

	// end inline asm

$L__BB0_239:
	add.s32 	%r2105, %r336, 1;
	mul.wide.s32 	%rd239, %r2105, 4;
	add.s64 	%rd240, %rd12, %rd239;
	st.global.u32 	[%rd240], %r7309;
	add.s32 	%r7289, %r7289, 2;

$L__BB0_240:
	or.b32  	%r2106, %r251, %r254;
	setp.gt.s32 	%p123, %r2106, -1;
	and.pred  	%p125, %p83, %p123;
	setp.lt.s32 	%p126, %r251, %r1738;
	and.pred  	%p10, %p126, %p125;
	@%p97 bra 	$L__BB0_252;

	@%p10 bra 	$L__BB0_243;
	bra.uni 	$L__BB0_242;

$L__BB0_243:
	setp.eq.s32 	%p128, %r234, 0;
	add.s32 	%r2108, %r250, %r254;
	shl.b32 	%r2109, %r2108, 1;
	mul.wide.s32 	%rd241, %r2109, 4;
	add.s64 	%rd242, %rd11, %rd241;
	ld.global.f32 	%f31, [%rd242];
	@%p128 bra 	$L__BB0_245;
	bra.uni 	$L__BB0_244;

$L__BB0_245:
	mov.f32 	%f238, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f31;
  cvt.rn.f16.f32 high, %f238;
  mov.b32 %r7311, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_242:
	mov.f32 	%f234, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f234;
  cvt.rn.f16.f32 high, %f234;
  mov.b32 %r7311, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_244:
	mov.f32 	%f235, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f235;
  cvt.rn.f16.f32 high, %f31;
  mov.b32 %r7311, {low,high};}

	// end inline asm

$L__BB0_246:
	add.s32 	%r347, %r7289, %r238;
	mul.wide.s32 	%rd243, %r347, 4;
	add.s64 	%rd244, %rd12, %rd243;
	st.global.u32 	[%rd244], %r7311;
	@%p10 bra 	$L__BB0_248;
	bra.uni 	$L__BB0_247;

$L__BB0_248:
	setp.eq.s32 	%p129, %r234, 0;
	add.s32 	%r2113, %r252, %r254;
	shl.b32 	%r2114, %r2113, 1;
	mul.wide.s32 	%rd245, %r2114, 4;
	add.s64 	%rd246, %rd11, %rd245;
	ld.global.f32 	%f32, [%rd246];
	@%p129 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_249;

$L__BB0_250:
	mov.f32 	%f244, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f32;
  cvt.rn.f16.f32 high, %f244;
  mov.b32 %r7312, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_247:
	mov.f32 	%f240, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f240;
  cvt.rn.f16.f32 high, %f240;
  mov.b32 %r7312, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_249:
	mov.f32 	%f241, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f241;
  cvt.rn.f16.f32 high, %f32;
  mov.b32 %r7312, {low,high};}

	// end inline asm

$L__BB0_251:
	add.s32 	%r2117, %r347, 1;
	mul.wide.s32 	%rd247, %r2117, 4;
	add.s64 	%rd248, %rd12, %rd247;
	st.global.u32 	[%rd248], %r7312;
	add.s32 	%r7289, %r7289, 2;

$L__BB0_252:
	@%p90 bra 	$L__BB0_264;

	@%p10 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_254;

$L__BB0_255:
	setp.eq.s32 	%p131, %r234, 0;
	add.s32 	%r2119, %r250, %r254;
	shl.b32 	%r2120, %r2119, 1;
	or.b32  	%r2121, %r2120, 1;
	mul.wide.s32 	%rd249, %r2121, 4;
	add.s64 	%rd250, %rd11, %rd249;
	ld.global.f32 	%f33, [%rd250];
	@%p131 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_256;

$L__BB0_257:
	mov.f32 	%f250, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f33;
  cvt.rn.f16.f32 high, %f250;
  mov.b32 %r7314, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_254:
	mov.f32 	%f246, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f246;
  cvt.rn.f16.f32 high, %f246;
  mov.b32 %r7314, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_256:
	mov.f32 	%f247, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f247;
  cvt.rn.f16.f32 high, %f33;
  mov.b32 %r7314, {low,high};}

	// end inline asm

$L__BB0_258:
	add.s32 	%r358, %r7289, %r238;
	mul.wide.s32 	%rd251, %r358, 4;
	add.s64 	%rd252, %rd12, %rd251;
	st.global.u32 	[%rd252], %r7314;
	@%p10 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_259;

$L__BB0_260:
	setp.eq.s32 	%p132, %r234, 0;
	add.s32 	%r2125, %r252, %r254;
	shl.b32 	%r2126, %r2125, 1;
	or.b32  	%r2127, %r2126, 1;
	mul.wide.s32 	%rd253, %r2127, 4;
	add.s64 	%rd254, %rd11, %rd253;
	ld.global.f32 	%f34, [%rd254];
	@%p132 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_261;

$L__BB0_262:
	mov.f32 	%f256, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f34;
  cvt.rn.f16.f32 high, %f256;
  mov.b32 %r7315, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_259:
	mov.f32 	%f252, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f252;
  cvt.rn.f16.f32 high, %f252;
  mov.b32 %r7315, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_261:
	mov.f32 	%f253, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f253;
  cvt.rn.f16.f32 high, %f34;
  mov.b32 %r7315, {low,high};}

	// end inline asm

$L__BB0_263:
	add.s32 	%r2130, %r358, 1;
	mul.wide.s32 	%rd255, %r2130, 4;
	add.s64 	%rd256, %rd12, %rd255;
	st.global.u32 	[%rd256], %r7315;
	add.s32 	%r7289, %r7289, 2;

$L__BB0_264:
	add.s64 	%rd560, %rd560, 4;
	add.s64 	%rd559, %rd559, -4;
	setp.ne.s64 	%p133, %rd559, 0;
	@%p133 bra 	$L__BB0_144;

$L__BB0_265:
	add.s32 	%r7285, %r7285, %r30;
	setp.lt.s32 	%p134, %r7285, %r1738;
	@%p134 bra 	$L__BB0_142;

$L__BB0_266:
	add.s32 	%r7279, %r7279, %r1752;
	setp.lt.s32 	%p135, %r7279, %r1737;
	@%p135 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_267;

$L__BB0_121:
	@%p19 bra 	$L__BB0_267;

	neg.s32 	%r208, %r58;
	mov.u32 	%r1948, 31;
	sub.s32 	%r1949, %r1948, %r28;
	setp.gt.s32 	%p73, %r27, %r28;
	selp.b32 	%r1950, %r28, %r1949, %p73;
	shl.b32 	%r1951, %r1950, 2;
	mov.u32 	%r1952, 2;
	sub.s32 	%r209, %r1951, %r1740;
	sub.s32 	%r1953, %r1952, %r1740;
	add.s32 	%r210, %r1953, %r1951;
	add.s32 	%r211, %r1737, -1;
	add.s32 	%r212, %r209, 1;
	add.s32 	%r213, %r210, 1;
	rem.s32 	%r1978, %r212, %r40;
	add.s32 	%r1979, %r1978, %r40;
	rem.s32 	%r224, %r1979, %r40;
	rem.s32 	%r1980, %r213, %r40;
	add.s32 	%r1981, %r1980, %r40;
	rem.s32 	%r225, %r1981, %r40;

$L__BB0_123:
	setp.ne.s32 	%p74, %r24, %r208;
	@%p74 bra 	$L__BB0_137;

	shl.b32 	%r215, %r7279, 1;
	rem.s32 	%r1954, %r209, %r40;
	add.s32 	%r1955, %r1954, %r40;
	rem.s32 	%r216, %r1955, %r40;
	rem.s32 	%r1956, %r210, %r40;
	add.s32 	%r1957, %r1956, %r40;
	rem.s32 	%r217, %r1957, %r40;
	@%p73 bra 	$L__BB0_126;
	bra.uni 	$L__BB0_125;

$L__BB0_126:
	mul.lo.s32 	%r1960, %r215, %r40;
	add.s32 	%r1961, %r1960, %r216;
	mul.wide.s32 	%rd157, %r1961, 4;
	add.s64 	%rd158, %rd11, %rd157;
	ld.global.f32 	%f117, [%rd158];
	add.s32 	%r1962, %r1960, %r217;
	mul.wide.s32 	%rd159, %r1962, 4;
	add.s64 	%rd160, %rd11, %rd159;
	ld.global.f32 	%f118, [%rd160];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f117;
  cvt.rn.f16.f32 high, %f118;
  mov.b32 %r7280, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_127;

$L__BB0_125:
	mov.f32 	%f116, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f116;
  cvt.rn.f16.f32 high, %f116;
  mov.b32 %r7280, {low,high};}

	// end inline asm

$L__BB0_127:
	shl.b32 	%r1963, %r7279, 5;
	add.s32 	%r1964, %r1963, %r28;
	shl.b32 	%r1965, %r1964, 2;
	mul.wide.s32 	%rd161, %r1965, 4;
	add.s64 	%rd13, %rd12, %rd161;
	st.global.u32 	[%rd13], %r7280;
	@%p73 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_128;

$L__BB0_129:
	add.s32 	%r1968, %r215, 1;
	mul.lo.s32 	%r1969, %r1968, %r40;
	add.s32 	%r1970, %r1969, %r216;
	mul.wide.s32 	%rd162, %r1970, 4;
	add.s64 	%rd163, %rd11, %rd162;
	ld.global.f32 	%f121, [%rd163];
	add.s32 	%r1971, %r1969, %r217;
	mul.wide.s32 	%rd164, %r1971, 4;
	add.s64 	%rd165, %rd11, %rd164;
	ld.global.f32 	%f122, [%rd165];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f121;
  cvt.rn.f16.f32 high, %f122;
  mov.b32 %r7281, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_130;

$L__BB0_128:
	mov.f32 	%f120, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f120;
  cvt.rn.f16.f32 high, %f120;
  mov.b32 %r7281, {low,high};}

	// end inline asm

$L__BB0_130:
	add.s32 	%r1972, %r211, %r7279;
	rem.s32 	%r1973, %r1972, %r1737;
	shl.b32 	%r1974, %r1973, 5;
	add.s32 	%r1975, %r1974, %r28;
	shl.b32 	%r1976, %r1975, 2;
	or.b32  	%r1977, %r1976, 2;
	mul.wide.s32 	%rd166, %r1977, 4;
	add.s64 	%rd14, %rd12, %rd166;
	st.global.u32 	[%rd14], %r7281;
	@%p73 bra 	$L__BB0_132;
	bra.uni 	$L__BB0_131;

$L__BB0_132:
	mul.lo.s32 	%r1984, %r215, %r40;
	add.s32 	%r1985, %r1984, %r224;
	mul.wide.s32 	%rd167, %r1985, 4;
	add.s64 	%rd168, %rd11, %rd167;
	ld.global.f32 	%f125, [%rd168];
	add.s32 	%r1986, %r1984, %r225;
	mul.wide.s32 	%rd169, %r1986, 4;
	add.s64 	%rd170, %rd11, %rd169;
	ld.global.f32 	%f126, [%rd170];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f125;
  cvt.rn.f16.f32 high, %f126;
  mov.b32 %r7282, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_133;

$L__BB0_131:
	mov.f32 	%f124, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f124;
  cvt.rn.f16.f32 high, %f124;
  mov.b32 %r7282, {low,high};}

	// end inline asm

$L__BB0_133:
	st.global.u32 	[%rd13+4], %r7282;
	@%p73 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r1989, %r215, 1;
	mul.lo.s32 	%r1990, %r1989, %r40;
	add.s32 	%r1991, %r1990, %r224;
	mul.wide.s32 	%rd171, %r1991, 4;
	add.s64 	%rd172, %rd11, %rd171;
	ld.global.f32 	%f129, [%rd172];
	add.s32 	%r1992, %r1990, %r225;
	mul.wide.s32 	%rd173, %r1992, 4;
	add.s64 	%rd174, %rd11, %rd173;
	ld.global.f32 	%f130, [%rd174];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f129;
  cvt.rn.f16.f32 high, %f130;
  mov.b32 %r7283, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f128, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f128;
  cvt.rn.f16.f32 high, %f128;
  mov.b32 %r7283, {low,high};}

	// end inline asm

$L__BB0_136:
	st.global.u32 	[%rd14+4], %r7283;

$L__BB0_137:
	add.s32 	%r7279, %r7279, %r1752;
	setp.lt.s32 	%p79, %r7279, %r1737;
	@%p79 bra 	$L__BB0_123;

$L__BB0_267:
	add.s32 	%r2132, %r1732, -1;
	mad.lo.s32 	%r2133, %r1733, 576, 128;
	mul.lo.s32 	%r2134, %r2133, %r2132;
	add.s32 	%r2135, %r52, -64;
	add.s32 	%r2136, %r2135, %r52;
	add.s32 	%r2137, %r1733, -1;
	mad.lo.s32 	%r2138, %r2136, %r2137, %r2134;
	mul.lo.s32 	%r2139, %r2132, %r1733;
	mul.lo.s32 	%r2140, %r2139, 320;
	mad.lo.s32 	%r2141, %r2135, %r2137, %r2140;
	add.s32 	%r367, %r2141, %r2138;
	setp.lt.s32 	%p136, %r367, 1;
	mov.f32 	%f258, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r7494, {low,high};}

	// end inline asm
	@%p136 bra 	$L__BB0_270;

	mov.u32 	%r7319, 0;
	mov.u32 	%r7317, _ZN6kernel5shmemE;

$L__BB0_269:
	st.shared.u32 	[%r7317], %r7494;
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2144, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7317+4], %r2144;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2145, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7317+8], %r2145;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2146, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7317+12], %r2146;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r7494, {low,high};}

	// end inline asm
	add.s32 	%r7317, %r7317, 16;
	add.s32 	%r7319, %r7319, 4;
	setp.lt.s32 	%p137, %r7319, %r367;
	@%p137 bra 	$L__BB0_269;

$L__BB0_270:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r7495, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r2149, {low,high};}

	// end inline asm
	ld.param.u64 	%rd257, [%rd1+128];
	cvta.to.global.u64 	%rd19, %rd257;
	mov.u32 	%r2150, 31;
	sub.s32 	%r2151, %r2150, %r28;
	setp.gt.s32 	%p138, %r27, %r28;
	selp.b32 	%r2152, %r28, %r2151, %p138;
	shl.b32 	%r2153, %r2152, 2;
	sub.s32 	%r378, %r2153, %r1740;
	rem.s32 	%r2154, %r378, %r40;
	add.s32 	%r2155, %r2154, %r40;
	rem.s32 	%r379, %r2155, %r40;
	add.s32 	%r2156, %r378, 2;
	rem.s32 	%r2157, %r2156, %r40;
	add.s32 	%r2158, %r2157, %r40;
	rem.s32 	%r380, %r2158, %r40;
	mul.lo.s32 	%r2159, %r379, 6;
	mul.lo.s32 	%r2160, %r380, 6;
	mul.wide.s32 	%rd258, %r2159, 4;
	add.s64 	%rd20, %rd19, %rd258;
	mul.wide.s32 	%rd259, %r2160, 4;
	add.s64 	%rd21, %rd19, %rd259;
	@%p12 bra 	$L__BB0_272;
	bra.uni 	$L__BB0_271;

$L__BB0_272:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r7321, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_273;

$L__BB0_271:
	ld.global.f32 	%f273, [%rd20];
	ld.global.f32 	%f274, [%rd20+8];
	add.f32 	%f271, %f273, %f274;
	ld.global.f32 	%f275, [%rd21+8];
	ld.global.f32 	%f276, [%rd21];
	add.f32 	%f272, %f276, %f275;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f271;
  cvt.rn.f16.f32 high, %f272;
  mov.b32 %r7321, {low,high};}

	// end inline asm

$L__BB0_273:
	@%p12 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	ld.global.f32 	%f281, [%rd20+4];
	ld.global.f32 	%f282, [%rd21+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f281;
  cvt.rn.f16.f32 high, %f282;
  mov.b32 %r7322, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	ld.global.f32 	%f279, [%rd20];
	ld.global.f32 	%f280, [%rd21];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f279;
  cvt.rn.f16.f32 high, %f280;
  mov.b32 %r7322, {low,high};}

	// end inline asm

$L__BB0_276:
	@%p12 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	mov.f32 	%f290, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f290;
  cvt.rn.f16.f32 high, %f290;
  mov.b32 %r7323, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_279;

$L__BB0_277:
	ld.global.f32 	%f285, [%rd20+20];
	ld.global.f32 	%f286, [%rd20+12];
	add.f32 	%f283, %f286, %f285;
	ld.global.f32 	%f287, [%rd21+20];
	ld.global.f32 	%f288, [%rd21+12];
	add.f32 	%f284, %f288, %f287;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f284;
  mov.b32 %r7323, {low,high};}

	// end inline asm

$L__BB0_279:
	@%p12 bra 	$L__BB0_281;
	bra.uni 	$L__BB0_280;

$L__BB0_281:
	ld.global.f32 	%f293, [%rd20+16];
	ld.global.f32 	%f294, [%rd21+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f293;
  cvt.rn.f16.f32 high, %f294;
  mov.b32 %r7324, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_282;

$L__BB0_280:
	ld.global.f32 	%f291, [%rd20+12];
	ld.global.f32 	%f292, [%rd21+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f292;
  mov.b32 %r7324, {low,high};}

	// end inline asm

$L__BB0_282:
	add.s32 	%r2169, %r378, 1;
	rem.s32 	%r2170, %r2169, %r40;
	add.s32 	%r2171, %r2170, %r40;
	rem.s32 	%r393, %r2171, %r40;
	add.s32 	%r2172, %r378, 3;
	rem.s32 	%r2173, %r2172, %r40;
	add.s32 	%r2174, %r2173, %r40;
	rem.s32 	%r394, %r2174, %r40;
	mul.lo.s32 	%r2175, %r393, 6;
	mul.lo.s32 	%r2176, %r394, 6;
	mul.wide.s32 	%rd260, %r2175, 4;
	add.s64 	%rd22, %rd19, %rd260;
	mul.wide.s32 	%rd261, %r2176, 4;
	add.s64 	%rd23, %rd19, %rd261;
	@%p12 bra 	$L__BB0_284;
	bra.uni 	$L__BB0_283;

$L__BB0_284:
	mov.f32 	%f302, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f302;
  cvt.rn.f16.f32 high, %f302;
  mov.b32 %r7325, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_285;

$L__BB0_283:
	ld.global.f32 	%f297, [%rd22];
	ld.global.f32 	%f298, [%rd22+8];
	add.f32 	%f295, %f297, %f298;
	ld.global.f32 	%f299, [%rd23+8];
	ld.global.f32 	%f300, [%rd23];
	add.f32 	%f296, %f300, %f299;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f295;
  cvt.rn.f16.f32 high, %f296;
  mov.b32 %r7325, {low,high};}

	// end inline asm

$L__BB0_285:
	@%p12 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	ld.global.f32 	%f305, [%rd22+4];
	ld.global.f32 	%f306, [%rd23+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f305;
  cvt.rn.f16.f32 high, %f306;
  mov.b32 %r7326, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	ld.global.f32 	%f303, [%rd22];
	ld.global.f32 	%f304, [%rd23];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f303;
  cvt.rn.f16.f32 high, %f304;
  mov.b32 %r7326, {low,high};}

	// end inline asm

$L__BB0_288:
	@%p12 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	mov.f32 	%f314, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f314;
  cvt.rn.f16.f32 high, %f314;
  mov.b32 %r7327, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_291;

$L__BB0_289:
	ld.global.f32 	%f309, [%rd22+20];
	ld.global.f32 	%f310, [%rd22+12];
	add.f32 	%f307, %f310, %f309;
	ld.global.f32 	%f311, [%rd23+20];
	ld.global.f32 	%f312, [%rd23+12];
	add.f32 	%f308, %f312, %f311;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f307;
  cvt.rn.f16.f32 high, %f308;
  mov.b32 %r7327, {low,high};}

	// end inline asm

$L__BB0_291:
	@%p12 bra 	$L__BB0_293;
	bra.uni 	$L__BB0_292;

$L__BB0_293:
	ld.global.f32 	%f317, [%rd22+16];
	ld.global.f32 	%f318, [%rd23+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f317;
  cvt.rn.f16.f32 high, %f318;
  mov.b32 %r7328, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_294;

$L__BB0_292:
	ld.global.f32 	%f315, [%rd22+12];
	ld.global.f32 	%f316, [%rd23+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f315;
  cvt.rn.f16.f32 high, %f316;
  mov.b32 %r7328, {low,high};}

	// end inline asm

$L__BB0_294:
	// begin inline asm
	mov.u32 %r2185, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd262, %r2185;
	// begin inline asm
	mov.u32 %r2186, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd263, %r2186;
	bfi.b64 	%rd24, %rd263, %rd262, 32, 32;
	setp.ne.s64 	%p147, %rd24, 0;
	@%p147 bra 	$L__BB0_296;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_296:
	mov.u32 	%r2187, %nctaid.x;
	mov.u32 	%r2188, %nctaid.y;
	mul.lo.s32 	%r2189, %r2187, %r2188;
	mov.u32 	%r2190, %nctaid.z;
	mul.lo.s32 	%r407, %r2189, %r2190;
	neg.s32 	%r2191, %r24;
	add.s32 	%r2192, %r28, %r23;
	setp.ne.s32 	%p148, %r2192, %r2191;
	mov.u32 	%r2193, %ctaid.x;
	add.s32 	%r408, %r2193, %r25;
	neg.s32 	%r409, %r26;
	bar.sync 	0;
	@%p148 bra 	$L__BB0_300;

	setp.eq.s32 	%p149, %r408, %r409;
	mov.u32 	%r2194, -2147483647;
	sub.s32 	%r2195, %r2194, %r407;
	selp.b32 	%r2196, %r2195, 1, %p149;
	membar.gl;
	add.s64 	%rd264, %rd24, 4;
	atom.add.u32 	%r410, [%rd264], %r2196;

$L__BB0_298:
	ld.volatile.u32 	%r2197, [%rd24+4];
	xor.b32  	%r2198, %r2197, %r410;
	setp.gt.s32 	%p150, %r2198, -1;
	@%p150 bra 	$L__BB0_298;

	membar.gl;

$L__BB0_300:
	bar.sync 	0;
	setp.lt.s32 	%p151, %r31, 1;
	@%p151 bra 	$L__BB0_736;

	not.b32 	%r2212, %r23;
	add.s32 	%r2213, %r1732, %r2212;
	shr.s32 	%r2214, %r1742, 31;
	shr.u32 	%r2215, %r2214, 30;
	add.s32 	%r2216, %r1742, %r2215;
	shr.s32 	%r411, %r2216, 2;
	mul.lo.s32 	%r2217, %r2213, 384;
	add.s32 	%r2218, %r2217, %r53;
	add.s32 	%r2219, %r28, 31;
	shr.s32 	%r2220, %r2219, 31;
	shr.u32 	%r2221, %r2220, 27;
	add.s32 	%r2222, %r2219, %r2221;
	and.b32  	%r2223, %r2222, -32;
	sub.s32 	%r2224, %r2219, %r2223;
	add.s32 	%r412, %r2218, -64;
	add.s32 	%r2225, %r28, 33;
	shr.s32 	%r2226, %r2225, 31;
	shr.u32 	%r2227, %r2226, 27;
	add.s32 	%r2228, %r2225, %r2227;
	and.b32  	%r2229, %r2228, -32;
	sub.s32 	%r2230, %r2225, %r2229;
	add.s32 	%r2231, %r2217, %r52;
	add.s32 	%r413, %r53, %r2231;
	shr.u32 	%r2232, %r1742, 31;
	add.s32 	%r2233, %r1742, %r2232;
	and.b32  	%r2234, %r2233, -2;
	sub.s32 	%r414, %r1742, %r2234;
	setp.lt.s32 	%p152, %r28, 32;
	selp.b32 	%r415, %r2224, %r28, %p152;
	selp.b32 	%r416, %r2230, %r28, %p152;
	mov.u32 	%r2211, 0;
	// begin inline asm
	{mov.u32 %r2235, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2561, %r2235, 8;
	add.s32 	%r2562, %r2561, -8192;
	or.b32  	%r2239, %r2562, 31;
	mul.wide.s32 	%rd273, %r28, 16;
	mul.wide.s32 	%rd275, %r28, 8;
	mov.u32 	%r7606, %r2149;
	mov.u32 	%r7636, %r2149;
	mov.u32 	%r7607, %r2149;
	mov.u32 	%r7637, %r2149;
	mov.u32 	%r7608, %r2149;
	mov.u32 	%r7334, %r2149;
	mov.u32 	%r7335, %r2149;
	mov.u32 	%r7649, %r2149;
	mov.u32 	%r7638, %r2149;
	mov.u32 	%r7639, %r2149;
	mov.u32 	%r7609, %r2149;
	mov.u32 	%r7610, %r2149;
	mov.u32 	%r7611, %r2149;
	mov.u32 	%r7342, %r2149;
	mov.u32 	%r7343, %r2149;
	mov.u32 	%r7648, %r2149;
	mov.u32 	%r7640, %r2149;
	mov.u32 	%r7641, %r2149;
	mov.u32 	%r7618, %r2149;
	mov.u32 	%r7348, %r2149;
	mov.u32 	%r7349, %r2149;
	mov.u32 	%r7350, %r2149;
	mov.u32 	%r7659, %r2149;
	mov.u32 	%r7645, %r2149;
	mov.u32 	%r7650, %r2149;
	mov.u32 	%r7619, %r2149;
	mov.u32 	%r7355, %r2149;
	mov.u32 	%r7356, %r2149;
	mov.u32 	%r7357, %r2149;
	mov.u32 	%r7653, %r2149;
	mov.u32 	%r7642, %r2149;
	mov.u32 	%r7651, %r2149;
	mov.u32 	%r7620, %r2149;
	mov.u32 	%r7621, %r2149;
	mov.u32 	%r7363, %r2149;
	mov.u32 	%r7654, %r2149;
	mov.u32 	%r7655, %r2149;
	mov.u32 	%r7366, %r2149;
	mov.u32 	%r7622, %r2149;
	mov.u32 	%r7623, %r2149;
	mov.u32 	%r7624, %r2149;
	mov.u32 	%r7370, %r2149;
	mov.u32 	%r7656, %r2149;
	mov.u32 	%r7657, %r2149;
	mov.u32 	%r7625, %r2149;
	mov.u32 	%r7626, %r2149;
	mov.u32 	%r7627, %r2149;
	mov.u32 	%r7612, %r2149;
	mov.u32 	%r7377, %r2149;
	mov.u32 	%r7643, %r2149;
	mov.u32 	%r7644, %r2149;
	mov.u32 	%r7613, %r2149;
	mov.u32 	%r7381, %r2149;
	mov.u32 	%r7646, %r2149;
	mov.u32 	%r7647, %r2149;
	mov.u32 	%r7676, %r2149;
	mov.u32 	%r7385, %r2149;
	mov.u32 	%r7386, %r2149;
	mov.u32 	%r7387, %r2149;
	mov.u32 	%r7532, %r2149;
	mov.u32 	%r7677, %r2149;
	mov.u32 	%r7390, %r2149;
	mov.u32 	%r7391, %r2149;
	mov.u32 	%r7392, %r2149;
	mov.u32 	%r7533, %r2149;
	mov.u32 	%r7678, %r2149;
	mov.u32 	%r7679, %r2149;
	mov.u32 	%r7396, %r2149;
	mov.u32 	%r7397, %r2149;
	mov.u32 	%r7398, %r2149;
	mov.u32 	%r7534, %r2149;
	mov.u32 	%r7400, %r2149;
	mov.u32 	%r7680, %r2149;
	mov.u32 	%r7681, %r2149;
	mov.u32 	%r7403, %r2149;
	mov.u32 	%r7404, %r2149;
	mov.u32 	%r7405, %r2149;
	mov.u32 	%r7536, %r2149;
	mov.u32 	%r7407, %r2149;
	mov.u32 	%r7408, %r2149;
	mov.u32 	%r7409, %r2149;
	mov.u32 	%r7410, %r2149;
	mov.u32 	%r7660, %r2149;
	mov.u32 	%r7412, %r2149;
	mov.u32 	%r7413, %r2149;
	mov.u32 	%r7414, %r2149;
	mov.u32 	%r7415, %r2149;
	mov.u32 	%r7661, %r2149;
	mov.u32 	%r7628, %r2149;
	mov.u32 	%r7629, %r2149;
	mov.u32 	%r7630, %r2149;
	mov.u32 	%r7631, %r2149;
	mov.u32 	%r7421, %r2149;
	mov.u32 	%r7422, %r2149;
	mov.u32 	%r7685, %r2149;
	mov.u32 	%r7424, %r2149;
	mov.u32 	%r7425, %r2149;
	mov.u32 	%r7540, %r2149;
	mov.u32 	%r7427, %r2149;
	mov.u32 	%r7428, %r2149;
	mov.u32 	%r7429, %r2149;
	mov.u32 	%r7430, %r2149;
	mov.u32 	%r7687, %r2149;
	mov.u32 	%r7432, %r2149;
	mov.u32 	%r7433, %r2149;
	mov.u32 	%r7543, %r2149;
	mov.u32 	%r7435, %r2149;
	mov.u32 	%r7436, %r2149;
	mov.u32 	%r7437, %r2149;
	mov.u32 	%r7438, %r2149;
	mov.u32 	%r7688, %r2149;
	mov.u32 	%r7440, %r2149;
	mov.u32 	%r7441, %r2149;
	mov.u32 	%r7442, %r2149;
	mov.u32 	%r7546, %r2149;
	mov.u32 	%r7444, %r2149;
	mov.u32 	%r7445, %r2149;
	mov.u32 	%r7446, %r2149;
	mov.u32 	%r7447, %r2149;
	mov.u32 	%r7689, %r2149;
	mov.u32 	%r7449, %r2149;
	mov.u32 	%r7450, %r2149;
	mov.u32 	%r7451, %r2149;
	mov.u32 	%r7549, %r2149;
	mov.u32 	%r7453, %r2149;
	mov.u32 	%r7454, %r2149;
	mov.u32 	%r7455, %r2149;
	mov.u32 	%r7456, %r2149;
	mov.u32 	%r7457, %r2149;
	mov.u32 	%r7458, %r2149;
	mov.u32 	%r7459, %r2149;
	mov.u32 	%r7460, %r2149;
	mov.u32 	%r7461, %r2149;
	mov.u32 	%r7462, %r2149;
	mov.u32 	%r7463, %r2149;
	mov.u32 	%r7464, %r2149;
	mov.u32 	%r7465, %r2149;
	mov.u32 	%r7466, %r2149;
	mov.u32 	%r7467, %r2149;
	mov.u32 	%r7468, %r2149;
	mov.u32 	%r7469, %r2149;
	mov.u32 	%r7470, %r2149;
	mov.u32 	%r7471, %r2149;
	mov.u32 	%r7472, %r2149;
	mov.u32 	%r7473, %r2149;
	mov.u32 	%r7474, %r2149;
	mov.u32 	%r7475, %r2211;
	mov.u32 	%r7476, %r2211;
	mov.u32 	%r7477, %r2211;
	mov.u32 	%r7478, %r2211;
	mov.u32 	%r7479, %r2211;
	mov.u32 	%r7480, %r2211;
	mov.u32 	%r7481, %r2211;
	mov.u32 	%r7482, %r2211;
	mov.u32 	%r7483, %r2211;
	mov.u32 	%r7484, %r2211;
	mov.u32 	%r7485, %r2211;
	mov.u32 	%r7486, %r2211;
	mov.u32 	%r7614, %r2149;
	mov.u32 	%r7615, %r2149;
	mov.u32 	%r7616, %r2149;
	mov.u32 	%r7617, %r2149;
	mov.u32 	%r7632, %r2149;
	mov.u32 	%r7633, %r2149;
	mov.u32 	%r7493, %r2211;

$L__BB0_302:
	mov.u32 	%r554, %r7689;
	mov.u32 	%r553, %r7447;
	mov.u32 	%r545, %r7688;
	mov.u32 	%r544, %r7438;
	mov.u32 	%r537, %r7687;
	mov.u32 	%r529, %r7685;
	mov.u32 	%r7447, %r7681;
	mov.u32 	%r499, %r7680;
	mov.u32 	%r7438, %r7679;
	mov.u32 	%r491, %r7678;
	mov.u32 	%r484, %r7677;
	mov.u32 	%r477, %r7676;
	sub.s32 	%r7229, %r1737, %r30;
	mov.u32 	%r2250, 1;
	not.b32 	%r2524, %r25;
	mov.u32 	%r2516, -1;
	add.s32 	%r2525, %r1734, %r2524;
	mul.lo.s32 	%r2526, %r2525, %r1736;
	add.s32 	%r2527, %r7493, %r2526;
	not.b32 	%r2529, %r26;
	add.s32 	%r2530, %r1735, %r2529;
	mul.lo.s32 	%r2531, %r2530, %r1736;
	add.s32 	%r2532, %r7493, %r2531;
	add.s32 	%r2533, %r2526, %r2531;
	add.s32 	%r2534, %r2533, %r1737;
	mad.lo.s32 	%r2537, %r2525, %r1732, %r2213;
	not.b32 	%r2538, %r24;
	add.s32 	%r2539, %r1733, %r2538;
	mad.lo.s32 	%r2540, %r2530, %r1733, %r2539;
	add.s32 	%r2541, %r2537, %r2540;
	shl.b32 	%r2542, %r2541, 1;
	add.s32 	%r2543, %r2534, %r2542;
	add.s32 	%r2544, %r7493, %r2543;
	add.s32 	%r2545, %r7493, %r2533;
	div.s32 	%r2546, %r2544, %r1737;
	neg.s32 	%r2547, %r1737;
	sub.s32 	%r2550, %r30, %r1737;
	sub.s32 	%r2551, %r2537, %r2540;
	shl.b32 	%r2552, %r2551, 1;
	add.s32 	%r2553, %r2552, %r1738;
	mad.lo.s32 	%r2554, %r2546, %r30, %r2553;
	mad.lo.s32 	%r2555, %r2546, %r2550, %r2545;
	div.s32 	%r2556, %r2554, %r1738;
	mul.lo.s32 	%r2557, %r2556, %r1738;
	sub.s32 	%r2560, %r1753, %r1738;
	mov.u32 	%r2334, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r2236,%r7495,%r2211,%r2239,%r2516;
}
	// end inline asm
	selp.b32 	%r2242, %r7322, %r2236, %p12;
	// begin inline asm
	{mul.f16x2 %r7579,%r2242,%r7474;
}
	// end inline asm
	selp.b32 	%r2245, %r7326, %r2236, %p12;
	// begin inline asm
	{mul.f16x2 %r7577,%r2245,%r7469;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2248,%r7495,%r2250,%r2239,%r2516;
}
	// end inline asm
	selp.b32 	%r2254, %r7322, %r2248, %p12;
	// begin inline asm
	{mul.f16x2 %r7578,%r2254,%r7473;
}
	// end inline asm
	selp.b32 	%r2257, %r7326, %r2248, %p12;
	// begin inline asm
	{mul.f16x2 %r7576,%r2257,%r7468;
}
	// end inline asm
	mov.u32 	%r2262, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r2260,%r7495,%r2262,%r2239,%r2516;
}
	// end inline asm
	selp.b32 	%r2266, %r7322, %r2260, %p12;
	// begin inline asm
	{mul.f16x2 %r7575,%r2266,%r7464;
}
	// end inline asm
	selp.b32 	%r2269, %r7326, %r2260, %p12;
	// begin inline asm
	{mul.f16x2 %r7574,%r2269,%r7462;
}
	// end inline asm
	mov.u32 	%r2274, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2272,%r7495,%r2274,%r2239,%r2516;
}
	// end inline asm
	selp.b32 	%r2278, %r7322, %r2272, %p12;
	// begin inline asm
	{mul.f16x2 %r7573,%r2278,%r7661;
}
	// end inline asm
	selp.b32 	%r2281, %r7326, %r2272, %p12;
	// begin inline asm
	{mul.f16x2 %r7571,%r2281,%r7660;
}
	// end inline asm
	mov.u32 	%r2286, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r2284,%r7495,%r2286,%r2239,%r2516;
}
	// end inline asm
	selp.b32 	%r2290, %r7322, %r2284, %p12;
	// begin inline asm
	{mul.f16x2 %r7572,%r2290,%r7460;
}
	// end inline asm
	selp.b32 	%r2293, %r7326, %r2284, %p12;
	// begin inline asm
	{mul.f16x2 %r7570,%r2293,%r7457;
}
	// end inline asm
	mov.u32 	%r2298, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2296,%r7495,%r2298,%r2239,%r2516;
}
	// end inline asm
	selp.b32 	%r2302, %r7322, %r2296, %p12;
	// begin inline asm
	{mul.f16x2 %r7569,%r2302,%r7454;
}
	// end inline asm
	selp.b32 	%r2305, %r7326, %r2296, %p12;
	// begin inline asm
	{mul.f16x2 %r7566,%r2305,%r7445;
}
	// end inline asm
	mov.u32 	%r2310, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r2308,%r7495,%r2310,%r2239,%r2516;
}
	// end inline asm
	selp.b32 	%r2314, %r7322, %r2308, %p12;
	// begin inline asm
	{mul.f16x2 %r7568,%r2314,%r7453;
}
	// end inline asm
	selp.b32 	%r2317, %r7326, %r2308, %p12;
	// begin inline asm
	{mul.f16x2 %r7565,%r2317,%r7444;
}
	// end inline asm
	mov.u32 	%r2322, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2320,%r7495,%r2322,%r2239,%r2516;
}
	// end inline asm
	selp.b32 	%r2326, %r7322, %r2320, %p12;
	// begin inline asm
	{mul.f16x2 %r7567,%r2326,%r7549;
}
	// end inline asm
	selp.b32 	%r2329, %r7326, %r2320, %p12;
	// begin inline asm
	{mul.f16x2 %r7564,%r2329,%r7546;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2332,%r7495,%r2334,%r2239,%r2516;
}
	// end inline asm
	selp.b32 	%r2338, %r7322, %r2332, %p12;
	// begin inline asm
	{mul.f16x2 %r7563,%r2338,%r7436;
}
	// end inline asm
	selp.b32 	%r2341, %r7326, %r2332, %p12;
	// begin inline asm
	{mul.f16x2 %r7560,%r2341,%r7428;
}
	// end inline asm
	mov.u32 	%r2346, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2344,%r7495,%r2346,%r2239,%r2516;
}
	// end inline asm
	selp.b32 	%r2350, %r7322, %r2344, %p12;
	// begin inline asm
	{mul.f16x2 %r7562,%r2350,%r7435;
}
	// end inline asm
	selp.b32 	%r2353, %r7326, %r2344, %p12;
	// begin inline asm
	{mul.f16x2 %r7559,%r2353,%r7427;
}
	// end inline asm
	mov.u32 	%r2358, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r2356,%r7495,%r2358,%r2239,%r2516;
}
	// end inline asm
	selp.b32 	%r2362, %r7322, %r2356, %p12;
	// begin inline asm
	{mul.f16x2 %r7561,%r2362,%r7543;
}
	// end inline asm
	selp.b32 	%r2365, %r7326, %r2356, %p12;
	// begin inline asm
	{mul.f16x2 %r7558,%r2365,%r7540;
}
	// end inline asm
	mov.u32 	%r2370, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2368,%r7495,%r2370,%r2239,%r2516;
}
	// end inline asm
	selp.b32 	%r2374, %r7322, %r2368, %p12;
	// begin inline asm
	{mul.f16x2 %r7557,%r2374,%r7647;
}
	// end inline asm
	selp.b32 	%r2377, %r7326, %r2368, %p12;
	// begin inline asm
	{mul.f16x2 %r7556,%r2377,%r7644;
}
	// end inline asm
	mov.u32 	%r2382, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r2380,%r7495,%r2382,%r2239,%r2516;
}
	// end inline asm
	selp.b32 	%r2386, %r7322, %r2380, %p12;
	// begin inline asm
	{mul.f16x2 %r7555,%r2386,%r7657;
}
	// end inline asm
	selp.b32 	%r2389, %r7326, %r2380, %p12;
	// begin inline asm
	{mul.f16x2 %r7553,%r2389,%r7655;
}
	// end inline asm
	mov.u32 	%r2394, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2392,%r7495,%r2394,%r2239,%r2516;
}
	// end inline asm
	selp.b32 	%r2398, %r7322, %r2392, %p12;
	// begin inline asm
	{mul.f16x2 %r7554,%r2398,%r7656;
}
	// end inline asm
	selp.b32 	%r2401, %r7326, %r2392, %p12;
	// begin inline asm
	{mul.f16x2 %r7552,%r2401,%r7654;
}
	// end inline asm
	mov.u32 	%r2406, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r2404,%r7495,%r2406,%r2239,%r2516;
}
	// end inline asm
	selp.b32 	%r2410, %r7322, %r2404, %p12;
	// begin inline asm
	{mul.f16x2 %r7551,%r2410,%r7651;
}
	// end inline asm
	selp.b32 	%r2413, %r7326, %r2404, %p12;
	// begin inline asm
	{mul.f16x2 %r7548,%r2413,%r7650;
}
	// end inline asm
	mov.u32 	%r2418, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2416,%r7495,%r2418,%r2239,%r2516;
}
	// end inline asm
	selp.b32 	%r2422, %r7322, %r2416, %p12;
	// begin inline asm
	{mul.f16x2 %r7550,%r2422,%r7407;
}
	// end inline asm
	selp.b32 	%r2425, %r7326, %r2416, %p12;
	// begin inline asm
	{mul.f16x2 %r7547,%r2425,%r7400;
}
	// end inline asm
	mov.u32 	%r2430, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r2428,%r7495,%r2430,%r2239,%r2516;
}
	// end inline asm
	selp.b32 	%r2434, %r7322, %r2428, %p12;
	// begin inline asm
	{mul.f16x2 %r7549,%r2434,%r7536;
}
	// end inline asm
	selp.b32 	%r2437, %r7326, %r2428, %p12;
	// begin inline asm
	{mul.f16x2 %r7546,%r2437,%r7534;
}
	// end inline asm
	mov.u32 	%r2442, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2440,%r7495,%r2442,%r2239,%r2516;
}
	// end inline asm
	selp.b32 	%r2446, %r7322, %r2440, %p12;
	// begin inline asm
	{mul.f16x2 %r7545,%r2446,%r7641;
}
	// end inline asm
	selp.b32 	%r2449, %r7326, %r2440, %p12;
	// begin inline asm
	{mul.f16x2 %r7542,%r2449,%r7639;
}
	// end inline asm
	mov.u32 	%r2454, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2452,%r7495,%r2454,%r2239,%r2516;
}
	// end inline asm
	selp.b32 	%r2458, %r7322, %r2452, %p12;
	// begin inline asm
	{mul.f16x2 %r7544,%r2458,%r7640;
}
	// end inline asm
	selp.b32 	%r2461, %r7326, %r2452, %p12;
	// begin inline asm
	{mul.f16x2 %r7541,%r2461,%r7638;
}
	// end inline asm
	mov.u32 	%r2466, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2464,%r7495,%r2466,%r2239,%r2516;
}
	// end inline asm
	selp.b32 	%r2470, %r7322, %r2464, %p12;
	// begin inline asm
	{mul.f16x2 %r7543,%r2470,%r7533;
}
	// end inline asm
	selp.b32 	%r2473, %r7326, %r2464, %p12;
	// begin inline asm
	{mul.f16x2 %r7540,%r2473,%r7532;
}
	// end inline asm
	mov.u32 	%r2478, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2476,%r7495,%r2478,%r2239,%r2516;
}
	// end inline asm
	selp.b32 	%r2482, %r7322, %r2476, %p12;
	// begin inline asm
	{mul.f16x2 %r7539,%r2482,%r7636;
}
	// end inline asm
	selp.b32 	%r2485, %r7326, %r2476, %p12;
	// begin inline asm
	{mul.f16x2 %r7538,%r2485,%r7637;
}
	// end inline asm
	mov.u32 	%r2490, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2488,%r7495,%r2490,%r2239,%r2516;
}
	// end inline asm
	selp.b32 	%r2494, %r7322, %r2488, %p12;
	// begin inline asm
	{mul.f16x2 %r7537,%r2494,%r7642;
}
	// end inline asm
	selp.b32 	%r2497, %r7326, %r2488, %p12;
	// begin inline asm
	{mul.f16x2 %r7535,%r2497,%r7645;
}
	// end inline asm
	mov.u32 	%r2502, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2500,%r7495,%r2502,%r2239,%r2516;
}
	// end inline asm
	selp.b32 	%r2506, %r7322, %r2500, %p12;
	// begin inline asm
	{mul.f16x2 %r7536,%r2506,%r7653;
}
	// end inline asm
	selp.b32 	%r2509, %r7326, %r2500, %p12;
	// begin inline asm
	{mul.f16x2 %r7534,%r2509,%r7659;
}
	// end inline asm
	mov.u32 	%r2514, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2512,%r7495,%r2514,%r2239,%r2516;
}
	// end inline asm
	selp.b32 	%r2518, %r7322, %r2512, %p12;
	// begin inline asm
	{mul.f16x2 %r7533,%r2518,%r7648;
}
	// end inline asm
	selp.b32 	%r2521, %r7326, %r2512, %p12;
	// begin inline asm
	{mul.f16x2 %r7532,%r2521,%r7649;
}
	// end inline asm
	rem.s32 	%r654, %r2527, %r51;
	rem.s32 	%r655, %r2532, %r7229;
	mad.lo.s32 	%r656, %r2546, %r2547, %r2544;
	sub.s32 	%r657, %r2554, %r2557;
	mad.lo.s32 	%r658, %r2556, %r2560, %r2555;
	ld.param.u64 	%rd266, [%rd1+120];
	cvta.to.global.u64 	%rd267, %rd266;
	shl.b32 	%r2610, %r658, 1;
	mul.wide.s32 	%rd268, %r2610, 4;
	add.s64 	%rd25, %rd267, %rd268;
	@%p71 bra 	$L__BB0_310;
	bra.uni 	$L__BB0_303;

$L__BB0_310:
	add.s32 	%r2813, %r1748, 1;
	setp.lt.s32 	%p160, %r658, %r2813;
	setp.eq.s32 	%p161, %r411, %r28;
	setp.gt.s32 	%p162, %r658, -1;
	and.pred  	%p163, %p161, %p162;
	and.pred  	%p164, %p160, %p163;
	@%p164 bra 	$L__BB0_312;
	bra.uni 	$L__BB0_311;

$L__BB0_312:
	ld.global.f32 	%f329, [%rd25];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f329;
  mov.b32 %r7498, {low,low};}

	// end inline asm
	ld.global.f32 	%f330, [%rd25+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f330;
  mov.b32 %r7499, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_313;

$L__BB0_303:
	add.s32 	%r2613, %r1748, 1;
	setp.lt.s32 	%p155, %r658, %r2613;
	setp.gt.s32 	%p156, %r658, -1;
	and.pred  	%p157, %p156, %p155;
	@%p157 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f323, [%rd25];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f323;
  mov.b32 %r7496, {low,low};}

	// end inline asm
	ld.global.f32 	%f324, [%rd25+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f324;
  mov.b32 %r7497, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_311:
	mov.f32 	%f328, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7498, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7499, {low,high};}

	// end inline asm

$L__BB0_313:
	mov.u32 	%r2821, 0;
	mov.u32 	%r2832, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2819,%r7494,%r2821,%r2239,%r2832;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2824,%r7498,%r2819;
}
	// end inline asm
	mov.u32 	%r2830, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2828,%r7494,%r2830,%r2239,%r2832;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2833,%r7499,%r2828;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7501,%r2824,%r2833;
}
	// end inline asm
	setp.eq.s32 	%p165, %r414, 0;
	mov.u32 	%r7500, %r7501;
	@%p165 bra 	$L__BB0_315;

	mov.f32 	%f332, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f332;
  cvt.rn.f16.f32 high, %f332;
  mov.b32 %r7500, {low,high};}

	// end inline asm

$L__BB0_315:
	// begin inline asm
	{add.f16x2 %r7579,%r7579,%r7500;
}
	// end inline asm
	setp.eq.s32 	%p166, %r414, 1;
	@%p166 bra 	$L__BB0_317;

	mov.f32 	%f334, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f334;
  cvt.rn.f16.f32 high, %f334;
  mov.b32 %r7501, {low,high};}

	// end inline asm

$L__BB0_317:
	// begin inline asm
	{add.f16x2 %r7577,%r7577,%r7501;
}
	// end inline asm
	mov.u32 	%r2854, 2;
	mov.u32 	%r2865, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2852,%r7494,%r2854,%r2239,%r2865;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2857,%r7498,%r2852;
}
	// end inline asm
	mov.u32 	%r2863, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2861,%r7494,%r2863,%r2239,%r2865;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2866,%r7499,%r2861;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7503,%r2857,%r2866;
}
	// end inline asm
	mov.u32 	%r7502, %r7503;
	@%p165 bra 	$L__BB0_319;

	mov.f32 	%f336, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f336;
  cvt.rn.f16.f32 high, %f336;
  mov.b32 %r7502, {low,high};}

	// end inline asm

$L__BB0_319:
	// begin inline asm
	{add.f16x2 %r7578,%r7578,%r7502;
}
	// end inline asm
	@%p166 bra 	$L__BB0_321;

	mov.f32 	%f338, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f338;
  cvt.rn.f16.f32 high, %f338;
  mov.b32 %r7503, {low,high};}

	// end inline asm

$L__BB0_321:
	// begin inline asm
	{add.f16x2 %r7576,%r7576,%r7503;
}
	// end inline asm
	mov.u32 	%r2887, 4;
	mov.u32 	%r2898, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2885,%r7494,%r2887,%r2239,%r2898;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2890,%r7498,%r2885;
}
	// end inline asm
	mov.u32 	%r2896, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2894,%r7494,%r2896,%r2239,%r2898;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2899,%r7499,%r2894;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7505,%r2890,%r2899;
}
	// end inline asm
	mov.u32 	%r7504, %r7505;
	@%p165 bra 	$L__BB0_323;

	mov.f32 	%f340, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f340;
  mov.b32 %r7504, {low,high};}

	// end inline asm

$L__BB0_323:
	// begin inline asm
	{add.f16x2 %r7575,%r7575,%r7504;
}
	// end inline asm
	@%p166 bra 	$L__BB0_325;

	mov.f32 	%f342, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f342;
  cvt.rn.f16.f32 high, %f342;
  mov.b32 %r7505, {low,high};}

	// end inline asm

$L__BB0_325:
	// begin inline asm
	{add.f16x2 %r7574,%r7574,%r7505;
}
	// end inline asm
	mov.u32 	%r2920, 6;
	mov.u32 	%r2931, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2918,%r7494,%r2920,%r2239,%r2931;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2923,%r7498,%r2918;
}
	// end inline asm
	mov.u32 	%r2929, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2927,%r7494,%r2929,%r2239,%r2931;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2932,%r7499,%r2927;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7507,%r2923,%r2932;
}
	// end inline asm
	mov.u32 	%r7506, %r7507;
	@%p165 bra 	$L__BB0_327;

	mov.f32 	%f344, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f344;
  cvt.rn.f16.f32 high, %f344;
  mov.b32 %r7506, {low,high};}

	// end inline asm

$L__BB0_327:
	// begin inline asm
	{add.f16x2 %r7573,%r7573,%r7506;
}
	// end inline asm
	@%p166 bra 	$L__BB0_329;

	mov.f32 	%f346, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f346;
  cvt.rn.f16.f32 high, %f346;
  mov.b32 %r7507, {low,high};}

	// end inline asm

$L__BB0_329:
	// begin inline asm
	{add.f16x2 %r7571,%r7571,%r7507;
}
	// end inline asm
	mov.u32 	%r2953, 8;
	mov.u32 	%r2964, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2951,%r7494,%r2953,%r2239,%r2964;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2956,%r7498,%r2951;
}
	// end inline asm
	mov.u32 	%r2962, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2960,%r7494,%r2962,%r2239,%r2964;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2965,%r7499,%r2960;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7509,%r2956,%r2965;
}
	// end inline asm
	mov.u32 	%r7508, %r7509;
	@%p165 bra 	$L__BB0_331;

	mov.f32 	%f348, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f348;
  cvt.rn.f16.f32 high, %f348;
  mov.b32 %r7508, {low,high};}

	// end inline asm

$L__BB0_331:
	// begin inline asm
	{add.f16x2 %r7572,%r7572,%r7508;
}
	// end inline asm
	@%p166 bra 	$L__BB0_333;

	mov.f32 	%f350, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f350;
  cvt.rn.f16.f32 high, %f350;
  mov.b32 %r7509, {low,high};}

	// end inline asm

$L__BB0_333:
	// begin inline asm
	{add.f16x2 %r7570,%r7570,%r7509;
}
	// end inline asm
	mov.u32 	%r2986, 10;
	mov.u32 	%r2997, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2984,%r7494,%r2986,%r2239,%r2997;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2989,%r7498,%r2984;
}
	// end inline asm
	mov.u32 	%r2995, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2993,%r7494,%r2995,%r2239,%r2997;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2998,%r7499,%r2993;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7511,%r2989,%r2998;
}
	// end inline asm
	mov.u32 	%r7510, %r7511;
	@%p165 bra 	$L__BB0_335;

	mov.f32 	%f352, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f352;
  cvt.rn.f16.f32 high, %f352;
  mov.b32 %r7510, {low,high};}

	// end inline asm

$L__BB0_335:
	// begin inline asm
	{add.f16x2 %r7569,%r7569,%r7510;
}
	// end inline asm
	@%p166 bra 	$L__BB0_337;

	mov.f32 	%f354, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f354;
  cvt.rn.f16.f32 high, %f354;
  mov.b32 %r7511, {low,high};}

	// end inline asm

$L__BB0_337:
	// begin inline asm
	{add.f16x2 %r7566,%r7566,%r7511;
}
	// end inline asm
	mov.u32 	%r3019, 12;
	mov.u32 	%r3030, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3017,%r7494,%r3019,%r2239,%r3030;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3022,%r7498,%r3017;
}
	// end inline asm
	mov.u32 	%r3028, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r3026,%r7494,%r3028,%r2239,%r3030;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3031,%r7499,%r3026;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7513,%r3022,%r3031;
}
	// end inline asm
	mov.u32 	%r7512, %r7513;
	@%p165 bra 	$L__BB0_339;

	mov.f32 	%f356, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f356;
  cvt.rn.f16.f32 high, %f356;
  mov.b32 %r7512, {low,high};}

	// end inline asm

$L__BB0_339:
	// begin inline asm
	{add.f16x2 %r7568,%r7568,%r7512;
}
	// end inline asm
	@%p166 bra 	$L__BB0_341;

	mov.f32 	%f358, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f358;
  cvt.rn.f16.f32 high, %f358;
  mov.b32 %r7513, {low,high};}

	// end inline asm

$L__BB0_341:
	// begin inline asm
	{add.f16x2 %r7565,%r7565,%r7513;
}
	// end inline asm
	mov.u32 	%r3052, 14;
	mov.u32 	%r3063, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3050,%r7494,%r3052,%r2239,%r3063;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3055,%r7498,%r3050;
}
	// end inline asm
	mov.u32 	%r3061, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r3059,%r7494,%r3061,%r2239,%r3063;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3064,%r7499,%r3059;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7515,%r3055,%r3064;
}
	// end inline asm
	mov.u32 	%r7514, %r7515;
	@%p165 bra 	$L__BB0_343;

	mov.f32 	%f360, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f360;
  cvt.rn.f16.f32 high, %f360;
  mov.b32 %r7514, {low,high};}

	// end inline asm

$L__BB0_343:
	// begin inline asm
	{add.f16x2 %r7563,%r7563,%r7514;
}
	// end inline asm
	@%p166 bra 	$L__BB0_345;

	mov.f32 	%f362, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f362;
  cvt.rn.f16.f32 high, %f362;
  mov.b32 %r7515, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r7560,%r7560,%r7515;
}
	// end inline asm
	mov.u32 	%r3085, 16;
	mov.u32 	%r3096, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3083,%r7494,%r3085,%r2239,%r3096;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3088,%r7498,%r3083;
}
	// end inline asm
	mov.u32 	%r3094, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r3092,%r7494,%r3094,%r2239,%r3096;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3097,%r7499,%r3092;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7517,%r3088,%r3097;
}
	// end inline asm
	mov.u32 	%r7516, %r7517;
	@%p165 bra 	$L__BB0_347;

	mov.f32 	%f364, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f364;
  cvt.rn.f16.f32 high, %f364;
  mov.b32 %r7516, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r7562,%r7562,%r7516;
}
	// end inline asm
	@%p166 bra 	$L__BB0_349;

	mov.f32 	%f366, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f366;
  cvt.rn.f16.f32 high, %f366;
  mov.b32 %r7517, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r7559,%r7559,%r7517;
}
	// end inline asm
	mov.u32 	%r3118, 18;
	mov.u32 	%r3129, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3116,%r7494,%r3118,%r2239,%r3129;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3121,%r7498,%r3116;
}
	// end inline asm
	mov.u32 	%r3127, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r3125,%r7494,%r3127,%r2239,%r3129;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3130,%r7499,%r3125;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7519,%r3121,%r3130;
}
	// end inline asm
	mov.u32 	%r7518, %r7519;
	@%p165 bra 	$L__BB0_351;

	mov.f32 	%f368, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f368;
  cvt.rn.f16.f32 high, %f368;
  mov.b32 %r7518, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r7557,%r7557,%r7518;
}
	// end inline asm
	@%p166 bra 	$L__BB0_353;

	mov.f32 	%f370, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f370;
  cvt.rn.f16.f32 high, %f370;
  mov.b32 %r7519, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r7556,%r7556,%r7519;
}
	// end inline asm
	mov.u32 	%r3151, 20;
	mov.u32 	%r3162, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3149,%r7494,%r3151,%r2239,%r3162;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3154,%r7498,%r3149;
}
	// end inline asm
	mov.u32 	%r3160, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r3158,%r7494,%r3160,%r2239,%r3162;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3163,%r7499,%r3158;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7521,%r3154,%r3163;
}
	// end inline asm
	mov.u32 	%r7520, %r7521;
	@%p165 bra 	$L__BB0_355;

	mov.f32 	%f372, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f372;
  cvt.rn.f16.f32 high, %f372;
  mov.b32 %r7520, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r7555,%r7555,%r7520;
}
	// end inline asm
	@%p166 bra 	$L__BB0_357;

	mov.f32 	%f374, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f374;
  cvt.rn.f16.f32 high, %f374;
  mov.b32 %r7521, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r7553,%r7553,%r7521;
}
	// end inline asm
	mov.u32 	%r3184, 22;
	mov.u32 	%r3195, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3182,%r7494,%r3184,%r2239,%r3195;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3187,%r7498,%r3182;
}
	// end inline asm
	mov.u32 	%r3193, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r3191,%r7494,%r3193,%r2239,%r3195;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3196,%r7499,%r3191;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7523,%r3187,%r3196;
}
	// end inline asm
	mov.u32 	%r7522, %r7523;
	@%p165 bra 	$L__BB0_359;

	mov.f32 	%f376, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f376;
  cvt.rn.f16.f32 high, %f376;
  mov.b32 %r7522, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r7551,%r7551,%r7522;
}
	// end inline asm
	@%p166 bra 	$L__BB0_361;

	mov.f32 	%f378, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f378;
  cvt.rn.f16.f32 high, %f378;
  mov.b32 %r7523, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r7548,%r7548,%r7523;
}
	// end inline asm
	mov.u32 	%r3217, 24;
	mov.u32 	%r3228, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3215,%r7494,%r3217,%r2239,%r3228;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3220,%r7498,%r3215;
}
	// end inline asm
	mov.u32 	%r3226, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r3224,%r7494,%r3226,%r2239,%r3228;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3229,%r7499,%r3224;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7525,%r3220,%r3229;
}
	// end inline asm
	mov.u32 	%r7524, %r7525;
	@%p165 bra 	$L__BB0_363;

	mov.f32 	%f380, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f380;
  cvt.rn.f16.f32 high, %f380;
  mov.b32 %r7524, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r7550,%r7550,%r7524;
}
	// end inline asm
	@%p166 bra 	$L__BB0_365;

	mov.f32 	%f382, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f382;
  cvt.rn.f16.f32 high, %f382;
  mov.b32 %r7525, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r7547,%r7547,%r7525;
}
	// end inline asm
	mov.u32 	%r3250, 26;
	mov.u32 	%r3261, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3248,%r7494,%r3250,%r2239,%r3261;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3253,%r7498,%r3248;
}
	// end inline asm
	mov.u32 	%r3259, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r3257,%r7494,%r3259,%r2239,%r3261;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3262,%r7499,%r3257;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7527,%r3253,%r3262;
}
	// end inline asm
	mov.u32 	%r7526, %r7527;
	@%p165 bra 	$L__BB0_367;

	mov.f32 	%f384, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f384;
  cvt.rn.f16.f32 high, %f384;
  mov.b32 %r7526, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r7545,%r7545,%r7526;
}
	// end inline asm
	@%p166 bra 	$L__BB0_369;

	mov.f32 	%f386, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f386;
  cvt.rn.f16.f32 high, %f386;
  mov.b32 %r7527, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r7542,%r7542,%r7527;
}
	// end inline asm
	mov.u32 	%r3283, 28;
	mov.u32 	%r3294, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3281,%r7494,%r3283,%r2239,%r3294;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3286,%r7498,%r3281;
}
	// end inline asm
	mov.u32 	%r3292, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r3290,%r7494,%r3292,%r2239,%r3294;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3295,%r7499,%r3290;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7529,%r3286,%r3295;
}
	// end inline asm
	mov.u32 	%r7528, %r7529;
	@%p165 bra 	$L__BB0_371;

	mov.f32 	%f388, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f388;
  cvt.rn.f16.f32 high, %f388;
  mov.b32 %r7528, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r7544,%r7544,%r7528;
}
	// end inline asm
	@%p166 bra 	$L__BB0_373;

	mov.f32 	%f390, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f390;
  cvt.rn.f16.f32 high, %f390;
  mov.b32 %r7529, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r7541,%r7541,%r7529;
}
	// end inline asm
	mov.u32 	%r3325, 31;
	mov.u32 	%r3316, 30;
	mov.u32 	%r3327, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3314,%r7494,%r3316,%r2239,%r3327;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3319,%r7498,%r3314;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3323,%r7494,%r3325,%r2239,%r3327;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3328,%r7499,%r3323;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7531,%r3319,%r3328;
}
	// end inline asm
	mov.u32 	%r7530, %r7531;
	@%p165 bra 	$L__BB0_375;

	mov.f32 	%f392, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f392;
  cvt.rn.f16.f32 high, %f392;
  mov.b32 %r7530, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r7537,%r7537,%r7530;
}
	// end inline asm
	@%p166 bra 	$L__BB0_377;

	mov.f32 	%f394, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f394;
  cvt.rn.f16.f32 high, %f394;
  mov.b32 %r7531, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r7535,%r7535,%r7531;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_304:
	mov.f32 	%f322, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7496, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7497, {low,high};}

	// end inline asm

$L__BB0_306:
	setp.eq.s32 	%p158, %r657, %r1742;
	@%p158 bra 	$L__BB0_309;
	bra.uni 	$L__BB0_307;

$L__BB0_309:
	// begin inline asm
	{mul.f16x2 %r2715,%r7496,%r7478;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7579,%r7579,%r2715;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2721,%r7496,%r7476;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7567,%r7567,%r2721;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2727,%r7496,%r7482;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7569,%r7569,%r2727;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2733,%r7496,%r7480;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7549,%r7549,%r2733;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2739,%r7496,%r7486;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7551,%r7551,%r2739;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2745,%r7496,%r7484;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7536,%r7536,%r2745;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2751,%r7497,%r7482;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7573,%r7573,%r2751;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2757,%r7497,%r7480;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7554,%r7554,%r2757;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2763,%r7496,%r7477;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7577,%r7577,%r2763;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2769,%r7496,%r7475;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7564,%r7564,%r2769;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2775,%r7496,%r7481;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7566,%r7566,%r2775;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2781,%r7496,%r7479;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7546,%r7546,%r2781;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2787,%r7496,%r7485;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7548,%r7548,%r2787;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2793,%r7496,%r7483;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7534,%r7534,%r2793;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2799,%r7497,%r7481;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7571,%r7571,%r2799;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2805,%r7497,%r7479;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7552,%r7552,%r2805;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_307:
	add.s32 	%r2618, %r1742, -2;
	setp.ne.s32 	%p159, %r657, %r2618;
	@%p159 bra 	$L__BB0_378;

	// begin inline asm
	{mul.f16x2 %r2619,%r7496,%r7482;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7557,%r7557,%r2619;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2625,%r7496,%r7480;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7539,%r7539,%r2625;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2631,%r7497,%r7478;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7575,%r7575,%r2631;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2637,%r7497,%r7476;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7561,%r7561,%r2637;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2643,%r7497,%r7482;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7563,%r7563,%r2643;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2649,%r7497,%r7480;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7543,%r7543,%r2649;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2655,%r7497,%r7486;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7545,%r7545,%r2655;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2661,%r7497,%r7484;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7533,%r7533,%r2661;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2667,%r7496,%r7481;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7556,%r7556,%r2667;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2673,%r7496,%r7479;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7538,%r7538,%r2673;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2679,%r7497,%r7477;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7574,%r7574,%r2679;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2685,%r7497,%r7475;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7558,%r7558,%r2685;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2691,%r7497,%r7481;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7560,%r7560,%r2691;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2697,%r7497,%r7479;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7540,%r7540,%r2697;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2703,%r7497,%r7485;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7542,%r7542,%r2703;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2709,%r7497,%r7483;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7532,%r7532,%r2709;
}
	// end inline asm

$L__BB0_378:
	setp.lt.s32 	%p197, %r23, 1;
	mov.u32 	%r7676, %r2149;
	mov.u32 	%r7677, %r2149;
	mov.u32 	%r7682, %r2149;
	mov.u32 	%r7683, %r2149;
	mov.u32 	%r7684, %r2149;
	mov.u32 	%r7685, %r2149;
	mov.u32 	%r7686, %r2149;
	mov.u32 	%r7687, %r2149;
	mov.u32 	%r7694, %r2149;
	mov.u32 	%r7695, %r2149;
	@%p197 bra 	$L__BB0_380;

	mul.lo.s32 	%r3346, %r1733, 320;
	add.s32 	%r3347, %r23, -1;
	mul.lo.s32 	%r3348, %r24, 320;
	mad.lo.s32 	%r3349, %r3346, %r3347, %r3348;
	add.s32 	%r3352, %r1788, -64;
	mad.lo.s32 	%r3357, %r3352, %r2137, %r2134;
	add.s32 	%r3358, %r3349, %r3357;
	shl.b32 	%r3359, %r3358, 2;
	mov.u32 	%r3360, _ZN6kernel5shmemE;
	add.s32 	%r3361, %r3360, %r3359;
	shl.b32 	%r3362, %r28, 4;
	add.s32 	%r3363, %r3361, %r3362;
	ld.shared.v4.u32 	{%r7687, %r7685, %r7677, %r7676}, [%r3363];
	shl.b32 	%r3368, %r28, 3;
	add.s32 	%r3369, %r3361, %r3368;
	ld.shared.v2.u32 	{%r7686, %r7684}, [%r3369+512];
	ld.shared.v4.u32 	{%r7695, %r7694, %r7683, %r7682}, [%r3363+768];

$L__BB0_380:
	setp.lt.s32 	%p198, %r24, 1;
	mov.u32 	%r7678, %r2149;
	mov.u32 	%r7679, %r2149;
	mov.u32 	%r7680, %r2149;
	mov.u32 	%r7681, %r2149;
	mov.u32 	%r7688, %r2149;
	mov.u32 	%r7689, %r2149;
	mov.u32 	%r7690, %r2149;
	mov.u32 	%r7691, %r2149;
	mov.u32 	%r7692, %r2149;
	mov.u32 	%r7693, %r2149;
	mov.u32 	%r7696, %r2149;
	mov.u32 	%r7697, %r2149;
	@%p198 bra 	$L__BB0_383;

	mad.lo.s32 	%r3381, %r2213, 384, %r2140;
	add.s32 	%r3384, %r24, -1;
	mad.lo.s32 	%r3385, %r2135, %r3384, %r3381;
	add.s32 	%r3391, %r3385, %r2138;
	shl.b32 	%r3392, %r3391, 2;
	mov.u32 	%r3393, _ZN6kernel5shmemE;
	add.s32 	%r3394, %r3393, %r3392;
	shl.b32 	%r3395, %r28, 4;
	add.s32 	%r3396, %r3394, %r3395;
	ld.shared.v4.u32 	{%r7697, %r7696, %r7692, %r7690}, [%r3396];
	shl.b32 	%r3401, %r28, 3;
	add.s32 	%r3402, %r3394, %r3401;
	ld.shared.v2.u32 	{%r7693, %r7691}, [%r3402+512];
	ld.shared.v4.u32 	{%r7689, %r7688, %r7680, %r7678}, [%r3396+768];
	mov.u32 	%r7679, %r2149;
	mov.u32 	%r7681, %r2149;
	@%p197 bra 	$L__BB0_383;

	add.s32 	%r7219, %r3402, 512;
	ld.shared.v2.u32 	{%r7681, %r7679}, [%r7219+768];

$L__BB0_383:
	setp.eq.s32 	%p200, %r23, 0;
	@%p200 bra 	$L__BB0_388;

	setp.eq.s32 	%p201, %r24, %r2137;
	@%p201 bra 	$L__BB0_386;

	sub.s32 	%r3412, %r1732, %r23;
	mul.lo.s32 	%r3414, %r52, %r24;
	mad.lo.s32 	%r3415, %r3412, 384, %r3414;
	mad.lo.s32 	%r3418, %r2135, %r2137, %r3415;
	mad.lo.s32 	%r3421, %r2133, %r2132, %r3418;
	shl.b32 	%r3422, %r3421, 2;
	mov.u32 	%r3423, _ZN6kernel5shmemE;
	add.s32 	%r3424, %r3423, %r3422;
	shl.b32 	%r3425, %r28, 4;
	add.s32 	%r3426, %r3424, %r3425;
	ld.shared.v4.u32 	{%r7606, %r7609, %r7613, %r7612}, [%r3426];

$L__BB0_386:
	shl.b32 	%r3431, %r24, 8;
	shl.b32 	%r3435, %r1733, 8;
	or.b32  	%r3436, %r3435, 128;
	add.s32 	%r3437, %r23, -1;
	mad.lo.s32 	%r3438, %r3436, %r3437, %r2140;
	add.s32 	%r3439, %r3438, %r3431;
	shl.b32 	%r3440, %r3439, 2;
	mov.u32 	%r3441, _ZN6kernel5shmemE;
	add.s32 	%r3442, %r3441, %r3440;
	setp.ne.s32 	%p202, %r24, %r2137;
	shl.b32 	%r3444, %r28, 4;
	add.s32 	%r916, %r3442, %r3444;
	ld.shared.v4.u32 	{%r7615, %r7617, %r7614, %r7616}, [%r916];
	ld.shared.v4.u32 	{%r7611, %r7608, %r7607, %r7610}, [%r916+512];
	@%p202 bra 	$L__BB0_388;

	ld.shared.v4.u32 	{%r7606, %r7609, %r7613, %r7612}, [%r916+1024];

$L__BB0_388:
	setp.eq.s32 	%p203, %r24, 0;
	@%p203 bra 	$L__BB0_391;

	mul.lo.s32 	%r3458, %r52, %r24;
	sub.s32 	%r3459, %r3458, %r52;
	mad.lo.s32 	%r3462, %r2213, 384, %r3459;
	mad.lo.s32 	%r3465, %r2135, %r2137, %r3462;
	mad.lo.s32 	%r3468, %r2133, %r2132, %r3465;
	shl.b32 	%r3469, %r3468, 2;
	mov.u32 	%r3470, _ZN6kernel5shmemE;
	add.s32 	%r3471, %r3470, %r3469;
	shl.b32 	%r3472, %r28, 4;
	add.s32 	%r941, %r3471, %r3472;
	ld.shared.v4.u32 	{%r7626, %r7625, %r7630, %r7628}, [%r941];
	ld.shared.v4.u32 	{%r7624, %r7621, %r7618, %r7619}, [%r941+512];
	ld.shared.v4.u32 	{%r7623, %r7620, %r7622, %r7629}, [%r941+1024];
	@%p200 bra 	$L__BB0_391;

	ld.shared.v4.u32 	{%r7632, %r7633, %r7627, %r7631}, [%r941+1536];

$L__BB0_391:
	setp.ne.s32 	%p205, %r23, 0;
	@%p205 bra 	$L__BB0_396;

	ld.param.u64 	%rd549, [%rd1+56];
	cvta.to.global.u64 	%rd548, %rd549;
	mad.lo.s32 	%r3490, %r654, %r1735, %r26;
	mul.lo.s32 	%r3491, %r1733, %r3490;
	mul.lo.s32 	%r3492, %r3491, 768;
	mad.lo.s32 	%r3493, %r24, 384, %r3492;
	add.s32 	%r3494, %r3493, -64;
	mul.wide.s32 	%rd271, %r3494, 4;
	add.s64 	%rd272, %rd548, %rd271;
	add.s64 	%rd274, %rd272, %rd273;
	ld.global.v4.u32 	{%r7641, %r7639, %r7648, %r7649}, [%rd274+256];
	ld.global.v4.u32 	{%r7647, %r7644, %r7636, %r7637}, [%rd274+1024];
	add.s64 	%rd27, %rd272, %rd275;
	@%p203 bra 	$L__BB0_394;

	ld.global.v2.u32 	{%r7642, %r7645}, [%rd27];

$L__BB0_394:
	setp.ne.s32 	%p207, %r24, %r2137;
	ld.global.v2.u32 	{%r7640, %r7638}, [%rd27+768];
	@%p207 bra 	$L__BB0_396;

	ld.global.v2.u32 	{%r7646, %r7643}, [%rd27+1536];

$L__BB0_396:
	setp.ne.s32 	%p208, %r24, 0;
	@%p208 bra 	$L__BB0_398;

	ld.param.u64 	%rd551, [%rd1+56];
	cvta.to.global.u64 	%rd550, %rd551;
	mad.lo.s32 	%r3511, %r655, %r1734, %r25;
	mad.lo.s32 	%r3515, %r3511, %r1789, %r412;
	mul.wide.s32 	%rd276, %r3515, 4;
	add.s64 	%rd277, %rd550, %rd276;
	add.s64 	%rd279, %rd277, %rd273;
	ld.global.v4.u32 	{%r7661, %r7660, %r7656, %r7654}, [%rd279+256];
	ld.global.v4.u32 	{%r7651, %r7650, %r7653, %r7659}, [%rd279+1024];
	add.s64 	%rd281, %rd277, %rd275;
	ld.global.v2.u32 	{%r7657, %r7655}, [%rd281+768];
	ld.global.v2.u32 	{%r7642, %r7645}, [%rd281+1536];

$L__BB0_398:
	add.s32 	%r3528, %r1737, -1;
	setp.lt.s32 	%p209, %r656, %r3528;
	setp.gt.s32 	%p210, %r656, 1;
	and.pred  	%p211, %p210, %p209;
	setp.gt.s32 	%p212, %r657, 1;
	and.pred  	%p213, %p211, %p212;
	add.s32 	%r3529, %r1738, -2;
	setp.lt.s32 	%p214, %r657, %r3529;
	and.pred  	%p11, %p214, %p213;
	not.pred 	%p215, %p11;
	@%p215 bra 	$L__BB0_409;

	ld.param.u64 	%rd553, [%rd1+64];
	cvta.to.global.u64 	%rd552, %rd553;
	mad.lo.s32 	%r1036, %r657, %r1737, %r656;
	shl.b32 	%r3530, %r1036, 6;
	mul.wide.s32 	%rd284, %r3530, 4;
	add.s64 	%rd29, %rd552, %rd284;
	and.pred  	%p218, %p205, %p208;
	@%p218 bra 	$L__BB0_401;

	add.s64 	%rd286, %rd29, %rd275;
	ld.global.v2.u32 	{%r7681, %r7679}, [%rd286+256];

$L__BB0_401:
	@%p205 bra 	$L__BB0_403;

	shl.b32 	%r3533, %r1737, 5;
	cvt.s64.s32 	%rd287, %r3533;
	cvt.s64.s32 	%rd288, %r28;
	add.s64 	%rd289, %rd287, %rd288;
	shl.b64 	%rd290, %rd289, 3;
	add.s64 	%rd291, %rd29, %rd290;
	ld.global.v2.u32 	{%r7686, %r7684}, [%rd291];

$L__BB0_403:
	@%p208 bra 	$L__BB0_405;

	shl.b32 	%r3536, %r1737, 5;
	neg.s32 	%r3537, %r3536;
	cvt.s64.s32 	%rd292, %r3537;
	cvt.s64.s32 	%rd293, %r28;
	add.s64 	%rd294, %rd292, %rd293;
	shl.b64 	%rd295, %rd294, 3;
	add.s64 	%rd296, %rd29, %rd295;
	ld.global.v2.u32 	{%r7693, %r7691}, [%rd296];

$L__BB0_405:
	mad.lo.s32 	%r7230, %r657, %r1737, %r656;
	ld.param.u64 	%rd555, [%rd1+64];
	cvta.to.global.u64 	%rd554, %rd555;
	shl.b32 	%r3540, %r1738, 6;
	shl.b32 	%r3541, %r7230, 7;
	mad.lo.s32 	%r3542, %r3540, %r1737, %r3541;
	mul.wide.s32 	%rd297, %r3542, 4;
	add.s64 	%rd30, %rd554, %rd297;
	@%p205 bra 	$L__BB0_407;

	shl.b32 	%r3543, %r1737, 5;
	cvt.s64.s32 	%rd298, %r3543;
	cvt.s64.s32 	%rd299, %r28;
	add.s64 	%rd300, %rd298, %rd299;
	shl.b64 	%rd301, %rd300, 4;
	add.s64 	%rd302, %rd30, %rd301;
	ld.global.v4.u32 	{%r7687, %r7685, %r7677, %r7676}, [%rd302];
	shl.b32 	%r3548, %r1737, 6;
	add.s32 	%r3549, %r3548, -32;
	cvt.s64.s32 	%rd303, %r3549;
	add.s64 	%rd304, %rd303, %rd299;
	shl.b64 	%rd305, %rd304, 4;
	add.s64 	%rd306, %rd30, %rd305;
	ld.global.v4.u32 	{%r7695, %r7694, %r7683, %r7682}, [%rd306];

$L__BB0_407:
	@%p208 bra 	$L__BB0_409;

	shl.b32 	%r3554, %r1737, 5;
	xor.b32  	%r3555, %r3554, -32;
	cvt.s64.s32 	%rd307, %r3555;
	cvt.s64.s32 	%rd308, %r28;
	add.s64 	%rd309, %rd307, %rd308;
	shl.b64 	%rd310, %rd309, 4;
	add.s64 	%rd311, %rd30, %rd310;
	ld.global.v4.u32 	{%r7697, %r7696, %r7692, %r7690}, [%rd311];
	add.s64 	%rd313, %rd30, %rd273;
	ld.global.v4.u32 	{%r7689, %r7688, %r7680, %r7678}, [%rd313];

$L__BB0_409:
	mov.u32 	%r3569, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3565,%r7441,%r415,%r2239,%r3569;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3565;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7441;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3572, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3573,%r7450,%r3572;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3576,%r7321,%r3573;
}
	// end inline asm
	@%p12 bra 	$L__BB0_411;
	bra.uni 	$L__BB0_410;

$L__BB0_411:
	// begin inline asm
	{neg.f16x2 %r7698,%r7579;
}
	// end inline asm
	bra.uni 	$L__BB0_412;

$L__BB0_410:
	// begin inline asm
	{mul.f16x2 %r7698,%r7322,%r3573;
}
	// end inline asm

$L__BB0_412:
	mov.u32 	%r3589, 31;
	mov.u32 	%r3612, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3587,%r7698,%r3589,%r2239,%r3612;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3592,%r3576,%r3587;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3595,%r7449,%r7459;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3598,%r3595,%r3592;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3601,%r7471,%r3598;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3604,%r7579,%r3601;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3608,%r7442,%r415,%r2239,%r3612;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3608;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7442;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3615, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3616,%r7451,%r3615;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3619,%r7321,%r3616;
}
	// end inline asm
	mov.u32 	%r7699, %r7578;
	@%p12 bra 	$L__BB0_414;

	// begin inline asm
	{mul.f16x2 %r7699,%r7322,%r3616;
}
	// end inline asm

$L__BB0_414:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3630,%r7699,%r3589,%r2239,%r3612;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3635,%r3619,%r3630;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3638,%r7449,%r7472;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3641,%r3635,%r3638;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3644,%r7470,%r3641;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3647,%r7578,%r3644;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3650,%r7441,%r7450;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3653,%r7325,%r3650;
}
	// end inline asm
	@%p12 bra 	$L__BB0_416;
	bra.uni 	$L__BB0_415;

$L__BB0_416:
	// begin inline asm
	{neg.f16x2 %r7700,%r7577;
}
	// end inline asm
	bra.uni 	$L__BB0_417;

$L__BB0_415:
	// begin inline asm
	{mul.f16x2 %r7700,%r7326,%r3650;
}
	// end inline asm

$L__BB0_417:
	mov.u32 	%r3666, 31;
	mov.u32 	%r3668, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3664,%r7700,%r3666,%r2239,%r3668;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3669,%r3653,%r3664;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3672,%r7440,%r7456;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3675,%r3672,%r3669;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3678,%r7466,%r3675;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3681,%r7577,%r3678;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3684,%r7442,%r7451;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3687,%r7325,%r3684;
}
	// end inline asm
	mov.u32 	%r7701, %r7576;
	@%p12 bra 	$L__BB0_419;

	// begin inline asm
	{mul.f16x2 %r7701,%r7326,%r3684;
}
	// end inline asm

$L__BB0_419:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3696,%r7701,%r3666,%r2239,%r3668;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3701,%r3687,%r3696;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3704,%r7440,%r7467;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3707,%r3701,%r3704;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3710,%r7465,%r3707;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3713,%r7576,%r3710;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3717,%r7425,%r415,%r2239,%r3668;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3717;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7425;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3724, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3725,%r7433,%r3724;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3728,%r7321,%r3725;
}
	// end inline asm
	@%p12 bra 	$L__BB0_421;
	bra.uni 	$L__BB0_420;

$L__BB0_421:
	// begin inline asm
	{neg.f16x2 %r7702,%r7575;
}
	// end inline asm
	bra.uni 	$L__BB0_422;

$L__BB0_420:
	// begin inline asm
	{mul.f16x2 %r7702,%r7322,%r3725;
}
	// end inline asm

$L__BB0_422:
	mov.u32 	%r3743, 31;
	mov.u32 	%r3745, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3741,%r7702,%r3743,%r2239,%r3745;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3746,%r3728,%r3741;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3749,%r7432,%r7449;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3752,%r3749,%r3746;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3755,%r7463,%r3752;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3758,%r7575,%r3755;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3761,%r7425,%r7433;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3764,%r7325,%r3761;
}
	// end inline asm
	@%p12 bra 	$L__BB0_424;
	bra.uni 	$L__BB0_423;

$L__BB0_424:
	// begin inline asm
	{neg.f16x2 %r7703,%r7574;
}
	// end inline asm
	bra.uni 	$L__BB0_425;

$L__BB0_423:
	// begin inline asm
	{mul.f16x2 %r7703,%r7326,%r3761;
}
	// end inline asm

$L__BB0_425:
	mov.u32 	%r3777, 31;
	mov.u32 	%r3800, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3775,%r7703,%r3777,%r2239,%r3800;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3780,%r3764,%r3775;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3783,%r7424,%r7440;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3786,%r3783,%r3780;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3789,%r7461,%r3786;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3792,%r7574,%r3789;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3796,%r7409,%r415,%r2239,%r3800;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3796;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7409;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3803, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3804,%r7414,%r3803;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3807,%r7321,%r3804;
}
	// end inline asm
	@%p12 bra 	$L__BB0_427;
	bra.uni 	$L__BB0_426;

$L__BB0_427:
	// begin inline asm
	{neg.f16x2 %r7704,%r7573;
}
	// end inline asm
	bra.uni 	$L__BB0_428;

$L__BB0_426:
	// begin inline asm
	{mul.f16x2 %r7704,%r7322,%r3804;
}
	// end inline asm

$L__BB0_428:
	mov.u32 	%r3822, 31;
	mov.u32 	%r3845, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3820,%r7704,%r3822,%r2239,%r3845;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3825,%r3807,%r3820;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3828,%r7413,%r7630;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3831,%r3828,%r3825;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3834,%r7697,%r3831;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3837,%r7573,%r3834;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3841,%r7410,%r415,%r2239,%r3845;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3841;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7410;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3848, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3849,%r7415,%r3848;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3852,%r7321,%r3849;
}
	// end inline asm
	mov.u32 	%r7705, %r7572;
	@%p12 bra 	$L__BB0_430;

	// begin inline asm
	{mul.f16x2 %r7705,%r7322,%r3849;
}
	// end inline asm

$L__BB0_430:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3863,%r7705,%r3822,%r2239,%r3845;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3868,%r3852,%r3863;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3871,%r7413,%r7459;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3874,%r3868,%r3871;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3877,%r7458,%r3874;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3880,%r7572,%r3877;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3883,%r7409,%r7414;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3886,%r7325,%r3883;
}
	// end inline asm
	@%p12 bra 	$L__BB0_432;
	bra.uni 	$L__BB0_431;

$L__BB0_432:
	// begin inline asm
	{neg.f16x2 %r7706,%r7571;
}
	// end inline asm
	bra.uni 	$L__BB0_433;

$L__BB0_431:
	// begin inline asm
	{mul.f16x2 %r7706,%r7326,%r3883;
}
	// end inline asm

$L__BB0_433:
	mov.u32 	%r3899, 31;
	mov.u32 	%r3901, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3897,%r7706,%r3899,%r2239,%r3901;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3902,%r3886,%r3897;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3905,%r7408,%r7628;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3908,%r3905,%r3902;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3911,%r7696,%r3908;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3914,%r7571,%r3911;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3917,%r7410,%r7415;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3920,%r7325,%r3917;
}
	// end inline asm
	mov.u32 	%r7707, %r7570;
	@%p12 bra 	$L__BB0_435;

	// begin inline asm
	{mul.f16x2 %r7707,%r7326,%r3917;
}
	// end inline asm

$L__BB0_435:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3929,%r7707,%r3899,%r2239,%r3901;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3934,%r3920,%r3929;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3937,%r7408,%r7456;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3940,%r3934,%r3937;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3943,%r7455,%r3940;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3946,%r7570,%r3943;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3950,%r7397,%r415,%r2239,%r3901;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3950;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7397;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3957, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3958,%r7404,%r3957;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3961,%r7321,%r3958;
}
	// end inline asm
	@%p12 bra 	$L__BB0_437;
	bra.uni 	$L__BB0_436;

$L__BB0_437:
	// begin inline asm
	{neg.f16x2 %r7708,%r7569;
}
	// end inline asm
	bra.uni 	$L__BB0_438;

$L__BB0_436:
	// begin inline asm
	{mul.f16x2 %r7708,%r7322,%r3958;
}
	// end inline asm

$L__BB0_438:
	mov.u32 	%r3976, 31;
	mov.u32 	%r3999, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3974,%r7708,%r3976,%r2239,%r3999;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3979,%r3961,%r3974;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3982,%r7403,%r7413;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3985,%r3982,%r3979;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3988,%r554,%r3985;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7474,%r7569,%r3988;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3995,%r7398,%r415,%r2239,%r3999;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3995;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7398;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4002, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4003,%r7405,%r4002;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4006,%r7321,%r4003;
}
	// end inline asm
	mov.u32 	%r7709, %r7568;
	@%p12 bra 	$L__BB0_440;

	// begin inline asm
	{mul.f16x2 %r7709,%r7322,%r4003;
}
	// end inline asm

$L__BB0_440:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4017,%r7709,%r3976,%r2239,%r3999;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4022,%r4006,%r4017;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4025,%r7403,%r7449;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4028,%r4022,%r4025;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4031,%r553,%r4028;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7473,%r7568,%r4031;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4037,%r7404,%r7450;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4040,%r7405,%r7415;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4043,%r4037,%r4040;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4046,%r7446,%r4043;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4049,%r7567,%r4046;
}
	// end inline asm
	@%p12 bra 	$L__BB0_442;

	mov.u32 	%r7567, %r4049;

$L__BB0_442:
	// begin inline asm
	{sub.f16x2 %r4054,%r7397,%r7404;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4057,%r7325,%r4054;
}
	// end inline asm
	@%p12 bra 	$L__BB0_444;
	bra.uni 	$L__BB0_443;

$L__BB0_444:
	// begin inline asm
	{neg.f16x2 %r7711,%r7566;
}
	// end inline asm
	bra.uni 	$L__BB0_445;

$L__BB0_443:
	// begin inline asm
	{mul.f16x2 %r7711,%r7326,%r4054;
}
	// end inline asm

$L__BB0_445:
	mov.u32 	%r4068, 31;
	mov.u32 	%r4070, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4066,%r7711,%r4068,%r2239,%r4070;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4071,%r4057,%r4066;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4074,%r7396,%r7408;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4077,%r4074,%r4071;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4080,%r545,%r4077;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7469,%r7566,%r4080;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4086,%r7398,%r7405;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4089,%r7325,%r4086;
}
	// end inline asm
	mov.u32 	%r7712, %r7565;
	@%p12 bra 	$L__BB0_447;

	// begin inline asm
	{mul.f16x2 %r7712,%r7326,%r4086;
}
	// end inline asm

$L__BB0_447:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4098,%r7712,%r4068,%r2239,%r4070;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4103,%r4089,%r4098;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4106,%r7396,%r7440;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4109,%r4103,%r4106;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4112,%r544,%r4109;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7468,%r7565,%r4112;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4118,%r7397,%r7441;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4121,%r7398,%r7410;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4124,%r4118,%r4121;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4127,%r7437,%r4124;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4130,%r7564,%r4127;
}
	// end inline asm
	@%p12 bra 	$L__BB0_449;

	mov.u32 	%r7564, %r4130;

$L__BB0_449:
	mov.u32 	%r4140, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4136,%r7386,%r415,%r2239,%r4140;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4136;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7386;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4143, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4144,%r7391,%r4143;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4147,%r7321,%r4144;
}
	// end inline asm
	@%p12 bra 	$L__BB0_451;
	bra.uni 	$L__BB0_450;

$L__BB0_451:
	// begin inline asm
	{neg.f16x2 %r7714,%r7563;
}
	// end inline asm
	bra.uni 	$L__BB0_452;

$L__BB0_450:
	// begin inline asm
	{mul.f16x2 %r7714,%r7322,%r4144;
}
	// end inline asm

$L__BB0_452:
	mov.u32 	%r4160, 31;
	mov.u32 	%r4183, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4158,%r7714,%r4160,%r2239,%r4183;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4163,%r4147,%r4158;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4166,%r7390,%r7403;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4169,%r4166,%r4163;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4172,%r537,%r4169;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7464,%r7563,%r4172;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4179,%r7387,%r415,%r2239,%r4183;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4179;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7387;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4186, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4187,%r7392,%r4186;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4190,%r7321,%r4187;
}
	// end inline asm
	mov.u32 	%r7715, %r7562;
	@%p12 bra 	$L__BB0_454;

	// begin inline asm
	{mul.f16x2 %r7715,%r7322,%r4187;
}
	// end inline asm

$L__BB0_454:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4201,%r7715,%r4160,%r2239,%r4183;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4206,%r4190,%r4201;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4209,%r7390,%r7432;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4212,%r4206,%r4209;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4215,%r7430,%r4212;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4218,%r7562,%r4215;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4221,%r7391,%r7433;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4224,%r7392,%r7405;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4227,%r4221,%r4224;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4230,%r7429,%r4227;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4233,%r7561,%r4230;
}
	// end inline asm
	@%p12 bra 	$L__BB0_456;

	mov.u32 	%r7561, %r4233;

$L__BB0_456:
	// begin inline asm
	{sub.f16x2 %r4238,%r7386,%r7391;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4241,%r7325,%r4238;
}
	// end inline asm
	@%p12 bra 	$L__BB0_458;
	bra.uni 	$L__BB0_457;

$L__BB0_458:
	// begin inline asm
	{neg.f16x2 %r7717,%r7560;
}
	// end inline asm
	bra.uni 	$L__BB0_459;

$L__BB0_457:
	// begin inline asm
	{mul.f16x2 %r7717,%r7326,%r4238;
}
	// end inline asm

$L__BB0_459:
	mov.u32 	%r4252, 31;
	mov.u32 	%r4254, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4250,%r7717,%r4252,%r2239,%r4254;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4255,%r4241,%r4250;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4258,%r7385,%r7396;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4261,%r4258,%r4255;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4264,%r529,%r4261;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7462,%r7560,%r4264;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4270,%r7387,%r7392;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4273,%r7325,%r4270;
}
	// end inline asm
	mov.u32 	%r7718, %r7559;
	@%p12 bra 	$L__BB0_461;

	// begin inline asm
	{mul.f16x2 %r7718,%r7326,%r4270;
}
	// end inline asm

$L__BB0_461:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4282,%r7718,%r4252,%r2239,%r4254;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4287,%r4273,%r4282;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4290,%r7385,%r7424;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4293,%r4287,%r4290;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4296,%r7422,%r4293;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4299,%r7559,%r4296;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4302,%r7386,%r7425;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4305,%r7387,%r7398;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4308,%r4302,%r4305;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4311,%r7421,%r4308;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4314,%r7558,%r4311;
}
	// end inline asm
	@%p12 bra 	$L__BB0_463;

	mov.u32 	%r7558, %r4314;

$L__BB0_463:
	mov.u32 	%r4324, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4320,%r7377,%r415,%r2239,%r4324;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4320;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7377;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4327, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4328,%r7381,%r4327;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4331,%r7321,%r4328;
}
	// end inline asm
	@%p12 bra 	$L__BB0_465;
	bra.uni 	$L__BB0_464;

$L__BB0_465:
	// begin inline asm
	{neg.f16x2 %r7720,%r7557;
}
	// end inline asm
	bra.uni 	$L__BB0_466;

$L__BB0_464:
	// begin inline asm
	{mul.f16x2 %r7720,%r7322,%r4328;
}
	// end inline asm

$L__BB0_466:
	mov.u32 	%r4344, 31;
	mov.u32 	%r4346, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4342,%r7720,%r4344,%r2239,%r4346;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4347,%r4331,%r4342;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4350,%r7613,%r7390;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4353,%r4350,%r4347;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4356,%r7695,%r4353;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4359,%r7557,%r4356;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4362,%r7377,%r7381;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4365,%r7325,%r4362;
}
	// end inline asm
	@%p12 bra 	$L__BB0_468;
	bra.uni 	$L__BB0_467;

$L__BB0_468:
	// begin inline asm
	{neg.f16x2 %r7721,%r7556;
}
	// end inline asm
	bra.uni 	$L__BB0_469;

$L__BB0_467:
	// begin inline asm
	{mul.f16x2 %r7721,%r7326,%r4362;
}
	// end inline asm

$L__BB0_469:
	mov.u32 	%r4378, 31;
	mov.u32 	%r4401, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4376,%r7721,%r4378,%r2239,%r4401;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4381,%r4365,%r4376;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4384,%r7612,%r7385;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4387,%r4384,%r4381;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4390,%r7694,%r4387;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4393,%r7556,%r4390;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4397,%r7363,%r415,%r2239,%r4401;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4397;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7363;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4404, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4405,%r7370,%r4404;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4408,%r7321,%r4405;
}
	// end inline asm
	mov.u32 	%r7722, %r7555;
	@%p12 bra 	$L__BB0_471;

	// begin inline asm
	{mul.f16x2 %r7722,%r7322,%r4405;
}
	// end inline asm

$L__BB0_471:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4419,%r7722,%r4378,%r2239,%r4401;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4424,%r4408,%r4419;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4427,%r7623,%r7413;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4430,%r4424,%r4427;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4433,%r7693,%r4430;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7460,%r7555,%r4433;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4439,%r7624,%r7414;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4442,%r7370,%r7626;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4445,%r4439,%r4442;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4448,%r7692,%r4445;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4451,%r7554,%r4448;
}
	// end inline asm
	@%p12 bra 	$L__BB0_473;

	mov.u32 	%r7554, %r4451;

$L__BB0_473:
	// begin inline asm
	{sub.f16x2 %r4456,%r7363,%r7370;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4459,%r7325,%r4456;
}
	// end inline asm
	mov.u32 	%r7724, %r7553;
	@%p12 bra 	$L__BB0_475;

	// begin inline asm
	{mul.f16x2 %r7724,%r7326,%r4456;
}
	// end inline asm

$L__BB0_475:
	mov.u32 	%r4468, 31;
	mov.u32 	%r4470, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4466,%r7724,%r4468,%r2239,%r4470;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4471,%r4459,%r4466;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4474,%r7620,%r7408;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4477,%r4471,%r4474;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4480,%r7691,%r4477;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7457,%r7553,%r4480;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4486,%r7621,%r7409;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4489,%r7363,%r7625;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4492,%r4486,%r4489;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4495,%r7690,%r4492;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4498,%r7552,%r4495;
}
	// end inline asm
	@%p12 bra 	$L__BB0_477;

	mov.u32 	%r7552, %r4498;

$L__BB0_477:
	// begin inline asm
	{shfl.sync.idx.b32 %r4504,%r7349,%r415,%r2239,%r4470;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4504;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7349;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4511, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4512,%r7356,%r4511;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4515,%r7321,%r4512;
}
	// end inline asm
	@%p12 bra 	$L__BB0_479;
	bra.uni 	$L__BB0_478;

$L__BB0_479:
	// begin inline asm
	{neg.f16x2 %r7726,%r7551;
}
	// end inline asm
	bra.uni 	$L__BB0_480;

$L__BB0_478:
	// begin inline asm
	{mul.f16x2 %r7726,%r7322,%r4512;
}
	// end inline asm

$L__BB0_480:
	mov.u32 	%r4528, 31;
	mov.u32 	%r4551, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4526,%r7726,%r4528,%r2239,%r4551;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4531,%r4515,%r4526;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4534,%r7355,%r7623;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4537,%r4534,%r4531;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4540,%r7689,%r4537;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7454,%r7551,%r4540;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4547,%r7350,%r415,%r2239,%r4551;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4547;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7350;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4554, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4555,%r7357,%r4554;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4558,%r7321,%r4555;
}
	// end inline asm
	mov.u32 	%r7727, %r7550;
	@%p12 bra 	$L__BB0_482;

	// begin inline asm
	{mul.f16x2 %r7727,%r7322,%r4555;
}
	// end inline asm

$L__BB0_482:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4569,%r7727,%r4528,%r2239,%r4551;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4574,%r4558,%r4569;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4577,%r7355,%r7403;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4580,%r4574,%r4577;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4583,%r7447,%r4580;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7453,%r7550,%r4583;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4589,%r7356,%r7404;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4592,%r7357,%r7370;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4595,%r4589,%r4592;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4598,%r499,%r4595;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4601,%r7549,%r4598;
}
	// end inline asm
	@%p12 bra 	$L__BB0_484;

	mov.u32 	%r7549, %r4601;

$L__BB0_484:
	// begin inline asm
	{sub.f16x2 %r4606,%r7349,%r7356;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4609,%r7325,%r4606;
}
	// end inline asm
	@%p12 bra 	$L__BB0_486;
	bra.uni 	$L__BB0_485;

$L__BB0_486:
	// begin inline asm
	{neg.f16x2 %r7729,%r7548;
}
	// end inline asm
	bra.uni 	$L__BB0_487;

$L__BB0_485:
	// begin inline asm
	{mul.f16x2 %r7729,%r7326,%r4606;
}
	// end inline asm

$L__BB0_487:
	mov.u32 	%r4620, 31;
	mov.u32 	%r4622, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4618,%r7729,%r4620,%r2239,%r4622;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4623,%r4609,%r4618;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4626,%r7348,%r7620;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4629,%r4626,%r4623;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4632,%r7688,%r4629;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7445,%r7548,%r4632;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4638,%r7350,%r7357;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4641,%r7325,%r4638;
}
	// end inline asm
	mov.u32 	%r7730, %r7547;
	@%p12 bra 	$L__BB0_489;

	// begin inline asm
	{mul.f16x2 %r7730,%r7326,%r4638;
}
	// end inline asm

$L__BB0_489:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4650,%r7730,%r4620,%r2239,%r4622;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4655,%r4641,%r4650;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4658,%r7348,%r7396;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4661,%r4655,%r4658;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4664,%r7438,%r4661;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7444,%r7547,%r4664;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4670,%r7349,%r7397;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4673,%r7350,%r7363;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4676,%r4670,%r4673;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4679,%r491,%r4676;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4682,%r7546,%r4679;
}
	// end inline asm
	@%p12 bra 	$L__BB0_491;

	mov.u32 	%r7546, %r4682;

$L__BB0_491:
	mov.u32 	%r4692, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4688,%r7334,%r415,%r2239,%r4692;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4688;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7334;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4695, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4696,%r7342,%r4695;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4699,%r7321,%r4696;
}
	// end inline asm
	@%p12 bra 	$L__BB0_493;
	bra.uni 	$L__BB0_492;

$L__BB0_493:
	// begin inline asm
	{neg.f16x2 %r7732,%r7545;
}
	// end inline asm
	bra.uni 	$L__BB0_494;

$L__BB0_492:
	// begin inline asm
	{mul.f16x2 %r7732,%r7322,%r4696;
}
	// end inline asm

$L__BB0_494:
	mov.u32 	%r4712, 31;
	mov.u32 	%r4735, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4710,%r7732,%r4712,%r2239,%r4735;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4715,%r4699,%r4710;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4718,%r7611,%r7355;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4721,%r4718,%r4715;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4724,%r7687,%r4721;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7436,%r7545,%r4724;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4731,%r7335,%r415,%r2239,%r4735;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4731;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7335;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4738, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4739,%r7343,%r4738;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4742,%r7321,%r4739;
}
	// end inline asm
	mov.u32 	%r7733, %r7544;
	@%p12 bra 	$L__BB0_496;

	// begin inline asm
	{mul.f16x2 %r7733,%r7322,%r4739;
}
	// end inline asm

$L__BB0_496:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4753,%r7733,%r4712,%r2239,%r4735;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4758,%r4742,%r4753;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4761,%r7611,%r7390;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4764,%r4758,%r4761;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4767,%r7686,%r4764;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7435,%r7544,%r4767;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4773,%r7342,%r7391;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4776,%r7343,%r7357;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4779,%r4773,%r4776;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4782,%r484,%r4779;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4785,%r7543,%r4782;
}
	// end inline asm
	@%p12 bra 	$L__BB0_498;

	mov.u32 	%r7543, %r4785;

$L__BB0_498:
	// begin inline asm
	{sub.f16x2 %r4790,%r7334,%r7342;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4793,%r7325,%r4790;
}
	// end inline asm
	@%p12 bra 	$L__BB0_500;
	bra.uni 	$L__BB0_499;

$L__BB0_500:
	// begin inline asm
	{neg.f16x2 %r7735,%r7542;
}
	// end inline asm
	bra.uni 	$L__BB0_501;

$L__BB0_499:
	// begin inline asm
	{mul.f16x2 %r7735,%r7326,%r4790;
}
	// end inline asm

$L__BB0_501:
	mov.u32 	%r4804, 31;
	mov.u32 	%r4806, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4802,%r7735,%r4804,%r2239,%r4806;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4807,%r4793,%r4802;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4810,%r7608,%r7348;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4813,%r4810,%r4807;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4816,%r7685,%r4813;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7428,%r7542,%r4816;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4822,%r7335,%r7343;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4825,%r7325,%r4822;
}
	// end inline asm
	mov.u32 	%r7736, %r7541;
	@%p12 bra 	$L__BB0_503;

	// begin inline asm
	{mul.f16x2 %r7736,%r7326,%r4822;
}
	// end inline asm

$L__BB0_503:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4834,%r7736,%r4804,%r2239,%r4806;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4839,%r4825,%r4834;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4842,%r7608,%r7385;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4845,%r4839,%r4842;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4848,%r7684,%r4845;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7427,%r7541,%r4848;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4854,%r7334,%r7386;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4857,%r7335,%r7350;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4860,%r4854,%r4857;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4863,%r477,%r4860;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4866,%r7540,%r4863;
}
	// end inline asm
	@%p12 bra 	$L__BB0_505;

	mov.u32 	%r7540, %r4866;

$L__BB0_505:
	// begin inline asm
	{sub.f16x2 %r4871,%r7607,%r7381;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4874,%r7606,%r7343;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4877,%r4871,%r4874;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4880,%r7683,%r4877;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4883,%r7539,%r4880;
}
	// end inline asm
	@%p12 bra 	$L__BB0_507;

	mov.u32 	%r7539, %r4883;

$L__BB0_507:
	// begin inline asm
	{sub.f16x2 %r4886,%r7610,%r7377;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4889,%r7609,%r7335;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4892,%r4886,%r4889;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4895,%r7682,%r4892;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4898,%r7538,%r4895;
}
	// end inline asm
	@%p12 bra 	$L__BB0_509;

	mov.u32 	%r7538, %r4898;

$L__BB0_509:
	mov.u32 	%r4906, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4902,%r7412,%r415,%r2239,%r4906;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4902;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7412;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4909, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4910,%r7366,%r4909;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4913,%r7321,%r4910;
}
	// end inline asm
	mov.u32 	%r7740, %r7537;
	@%p12 bra 	$L__BB0_511;

	// begin inline asm
	{mul.f16x2 %r7740,%r7322,%r4910;
}
	// end inline asm

$L__BB0_511:
	mov.u32 	%r4924, 31;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4922,%r7740,%r4924,%r2239,%r4906;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4927,%r4913,%r4922;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4930,%r7627,%r7355;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4933,%r4927,%r4930;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4936,%r7681,%r4933;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7407,%r7537,%r4936;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4942,%r7622,%r7356;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4945,%r7366,%r7618;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4948,%r4942,%r4945;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4951,%r7680,%r4948;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4954,%r7536,%r4951;
}
	// end inline asm
	@%p12 bra 	$L__BB0_513;

	mov.u32 	%r7536, %r4954;

$L__BB0_513:
	// begin inline asm
	{sub.f16x2 %r4959,%r7412,%r7366;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4962,%r7325,%r4959;
}
	// end inline asm
	mov.u32 	%r7742, %r7535;
	@%p12 bra 	$L__BB0_515;

	// begin inline asm
	{mul.f16x2 %r7742,%r7326,%r4959;
}
	// end inline asm

$L__BB0_515:
	mov.u32 	%r4971, 31;
	mov.u32 	%r4973, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4969,%r7742,%r4971,%r2239,%r4973;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4974,%r4962,%r4969;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4977,%r7631,%r7348;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4980,%r4974,%r4977;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4983,%r7679,%r4980;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7400,%r7535,%r4983;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4989,%r7629,%r7349;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4992,%r7412,%r7619;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4995,%r4989,%r4992;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4998,%r7678,%r4995;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5001,%r7534,%r4998;
}
	// end inline asm
	@%p12 bra 	$L__BB0_517;

	mov.u32 	%r7534, %r5001;

$L__BB0_517:
	// begin inline asm
	{sub.f16x2 %r5006,%r7615,%r7342;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5009,%r7614,%r7366;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5012,%r5006,%r5009;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5015,%r7677,%r5012;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5018,%r7533,%r5015;
}
	// end inline asm
	@%p12 bra 	$L__BB0_519;

	mov.u32 	%r7533, %r5018;

$L__BB0_519:
	// begin inline asm
	{sub.f16x2 %r5021,%r7617,%r7334;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5024,%r7616,%r7412;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5027,%r5021,%r5024;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5030,%r7676,%r5027;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5033,%r7532,%r5030;
}
	// end inline asm
	@%p12 bra 	$L__BB0_521;

	mov.u32 	%r7532, %r5033;

$L__BB0_521:
	bar.sync 	0;
	ld.param.u64 	%rd314, [%rd1+136];
	cvta.to.global.u64 	%rd32, %rd314;
	setp.lt.s32 	%p271, %r658, %r1743;
	or.pred  	%p273, %p271, %p215;
	mad.lo.s32 	%r5036, %r1745, %r1744, %r1743;
	setp.ge.s32 	%p274, %r658, %r5036;
	or.pred  	%p275, %p273, %p274;
	@%p275 bra 	$L__BB0_571;

	sub.s32 	%r1303, %r658, %r1743;
	rem.s32 	%r5037, %r1303, %r1744;
	setp.ne.s32 	%p276, %r5037, 0;
	@%p276 bra 	$L__BB0_571;

	div.s32 	%r5038, %r1303, %r1744;
	mul.lo.s32 	%r5039, %r5038, %r1737;
	mul.lo.s32 	%r1304, %r5039, 3;
	add.s32 	%r1305, %r656, -2;
	add.s32 	%r5040, %r1304, %r1305;
	mul.lo.s32 	%r1306, %r5040, %r1738;
	@%p12 bra 	$L__BB0_525;

	add.s32 	%r5045, %r1306, %r657;
	mul.lo.s32 	%r5046, %r5045, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3604;
  cvt.f32.f16 %f395, low;}

	// end inline asm
	add.s32 	%r5047, %r379, %r5046;
	mul.wide.s32 	%rd315, %r5047, 4;
	add.s64 	%rd316, %rd32, %rd315;
	st.global.f32 	[%rd316], %f395;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3604;
  cvt.f32.f16 %f396, high;}

	// end inline asm
	add.s32 	%r5048, %r380, %r5046;
	mul.wide.s32 	%rd317, %r5048, 4;
	add.s64 	%rd318, %rd32, %rd317;
	st.global.f32 	[%rd318], %f396;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3681;
  cvt.f32.f16 %f397, low;}

	// end inline asm
	add.s32 	%r5049, %r393, %r5046;
	mul.wide.s32 	%rd319, %r5049, 4;
	add.s64 	%rd320, %rd32, %rd319;
	st.global.f32 	[%rd320], %f397;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3681;
  cvt.f32.f16 %f398, high;}

	// end inline asm
	add.s32 	%r5050, %r394, %r5046;
	mul.wide.s32 	%rd321, %r5050, 4;
	add.s64 	%rd322, %rd32, %rd321;
	st.global.f32 	[%rd322], %f398;

$L__BB0_525:
	add.s32 	%r1307, %r1304, %r1737;
	@%p12 bra 	$L__BB0_527;

	add.s32 	%r5055, %r1307, %r1305;
	mad.lo.s32 	%r5056, %r5055, %r1738, %r657;
	mul.lo.s32 	%r5057, %r5056, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3647;
  cvt.f32.f16 %f399, low;}

	// end inline asm
	add.s32 	%r5058, %r379, %r5057;
	mul.wide.s32 	%rd323, %r5058, 4;
	add.s64 	%rd324, %rd32, %rd323;
	st.global.f32 	[%rd324], %f399;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3647;
  cvt.f32.f16 %f400, high;}

	// end inline asm
	add.s32 	%r5059, %r380, %r5057;
	mul.wide.s32 	%rd325, %r5059, 4;
	add.s64 	%rd326, %rd32, %rd325;
	st.global.f32 	[%rd326], %f400;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3713;
  cvt.f32.f16 %f401, low;}

	// end inline asm
	add.s32 	%r5060, %r393, %r5057;
	mul.wide.s32 	%rd327, %r5060, 4;
	add.s64 	%rd328, %rd32, %rd327;
	st.global.f32 	[%rd328], %f401;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3713;
  cvt.f32.f16 %f402, high;}

	// end inline asm
	add.s32 	%r5061, %r394, %r5057;
	mul.wide.s32 	%rd329, %r5061, 4;
	add.s64 	%rd330, %rd32, %rd329;
	st.global.f32 	[%rd330], %f402;

$L__BB0_527:
	add.s32 	%r1308, %r657, 1;
	@%p12 bra 	$L__BB0_529;

	add.s32 	%r5066, %r1306, %r1308;
	mul.lo.s32 	%r5067, %r5066, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3758;
  cvt.f32.f16 %f403, low;}

	// end inline asm
	add.s32 	%r5068, %r379, %r5067;
	mul.wide.s32 	%rd331, %r5068, 4;
	add.s64 	%rd332, %rd32, %rd331;
	st.global.f32 	[%rd332], %f403;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3758;
  cvt.f32.f16 %f404, high;}

	// end inline asm
	add.s32 	%r5069, %r380, %r5067;
	mul.wide.s32 	%rd333, %r5069, 4;
	add.s64 	%rd334, %rd32, %rd333;
	st.global.f32 	[%rd334], %f404;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3792;
  cvt.f32.f16 %f405, low;}

	// end inline asm
	add.s32 	%r5070, %r393, %r5067;
	mul.wide.s32 	%rd335, %r5070, 4;
	add.s64 	%rd336, %rd32, %rd335;
	st.global.f32 	[%rd336], %f405;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3792;
  cvt.f32.f16 %f406, high;}

	// end inline asm
	add.s32 	%r5071, %r394, %r5067;
	mul.wide.s32 	%rd337, %r5071, 4;
	add.s64 	%rd338, %rd32, %rd337;
	st.global.f32 	[%rd338], %f406;

$L__BB0_529:
	add.s32 	%r1309, %r656, -1;
	add.s32 	%r5072, %r1304, %r1309;
	mul.lo.s32 	%r1310, %r5072, %r1738;
	add.s32 	%r1311, %r657, -1;
	@%p12 bra 	$L__BB0_531;

	add.s32 	%r5077, %r1310, %r1311;
	mul.lo.s32 	%r5078, %r5077, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3837;
  cvt.f32.f16 %f407, low;}

	// end inline asm
	add.s32 	%r5079, %r379, %r5078;
	mul.wide.s32 	%rd339, %r5079, 4;
	add.s64 	%rd340, %rd32, %rd339;
	st.global.f32 	[%rd340], %f407;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3837;
  cvt.f32.f16 %f408, high;}

	// end inline asm
	add.s32 	%r5080, %r380, %r5078;
	mul.wide.s32 	%rd341, %r5080, 4;
	add.s64 	%rd342, %rd32, %rd341;
	st.global.f32 	[%rd342], %f408;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3914;
  cvt.f32.f16 %f409, low;}

	// end inline asm
	add.s32 	%r5081, %r393, %r5078;
	mul.wide.s32 	%rd343, %r5081, 4;
	add.s64 	%rd344, %rd32, %rd343;
	st.global.f32 	[%rd344], %f409;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3914;
  cvt.f32.f16 %f410, high;}

	// end inline asm
	add.s32 	%r5082, %r394, %r5078;
	mul.wide.s32 	%rd345, %r5082, 4;
	add.s64 	%rd346, %rd32, %rd345;
	st.global.f32 	[%rd346], %f410;

$L__BB0_531:
	add.s32 	%r5083, %r1307, %r1309;
	mul.lo.s32 	%r1312, %r5083, %r1738;
	@%p12 bra 	$L__BB0_533;

	add.s32 	%r5088, %r1312, %r1311;
	mul.lo.s32 	%r5089, %r5088, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3880;
  cvt.f32.f16 %f411, low;}

	// end inline asm
	add.s32 	%r5090, %r379, %r5089;
	mul.wide.s32 	%rd347, %r5090, 4;
	add.s64 	%rd348, %rd32, %rd347;
	st.global.f32 	[%rd348], %f411;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3880;
  cvt.f32.f16 %f412, high;}

	// end inline asm
	add.s32 	%r5091, %r380, %r5089;
	mul.wide.s32 	%rd349, %r5091, 4;
	add.s64 	%rd350, %rd32, %rd349;
	st.global.f32 	[%rd350], %f412;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3946;
  cvt.f32.f16 %f413, low;}

	// end inline asm
	add.s32 	%r5092, %r393, %r5089;
	mul.wide.s32 	%rd351, %r5092, 4;
	add.s64 	%rd352, %rd32, %rd351;
	st.global.f32 	[%rd352], %f413;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3946;
  cvt.f32.f16 %f414, high;}

	// end inline asm
	add.s32 	%r5093, %r394, %r5089;
	mul.wide.s32 	%rd353, %r5093, 4;
	add.s64 	%rd354, %rd32, %rd353;
	st.global.f32 	[%rd354], %f414;

$L__BB0_533:
	@%p12 bra 	$L__BB0_535;

	add.s32 	%r5098, %r1310, %r657;
	mul.lo.s32 	%r5099, %r5098, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7474;
  cvt.f32.f16 %f415, low;}

	// end inline asm
	add.s32 	%r5100, %r379, %r5099;
	mul.wide.s32 	%rd355, %r5100, 4;
	add.s64 	%rd356, %rd32, %rd355;
	st.global.f32 	[%rd356], %f415;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7474;
  cvt.f32.f16 %f416, high;}

	// end inline asm
	add.s32 	%r5101, %r380, %r5099;
	mul.wide.s32 	%rd357, %r5101, 4;
	add.s64 	%rd358, %rd32, %rd357;
	st.global.f32 	[%rd358], %f416;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7469;
  cvt.f32.f16 %f417, low;}

	// end inline asm
	add.s32 	%r5102, %r393, %r5099;
	mul.wide.s32 	%rd359, %r5102, 4;
	add.s64 	%rd360, %rd32, %rd359;
	st.global.f32 	[%rd360], %f417;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7469;
  cvt.f32.f16 %f418, high;}

	// end inline asm
	add.s32 	%r5103, %r394, %r5099;
	mul.wide.s32 	%rd361, %r5103, 4;
	add.s64 	%rd362, %rd32, %rd361;
	st.global.f32 	[%rd362], %f418;

$L__BB0_535:
	@%p12 bra 	$L__BB0_537;

	add.s32 	%r5108, %r1312, %r657;
	mul.lo.s32 	%r5109, %r5108, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7473;
  cvt.f32.f16 %f419, low;}

	// end inline asm
	add.s32 	%r5110, %r379, %r5109;
	mul.wide.s32 	%rd363, %r5110, 4;
	add.s64 	%rd364, %rd32, %rd363;
	st.global.f32 	[%rd364], %f419;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7473;
  cvt.f32.f16 %f420, high;}

	// end inline asm
	add.s32 	%r5111, %r380, %r5109;
	mul.wide.s32 	%rd365, %r5111, 4;
	add.s64 	%rd366, %rd32, %rd365;
	st.global.f32 	[%rd366], %f420;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7468;
  cvt.f32.f16 %f421, low;}

	// end inline asm
	add.s32 	%r5112, %r393, %r5109;
	mul.wide.s32 	%rd367, %r5112, 4;
	add.s64 	%rd368, %rd32, %rd367;
	st.global.f32 	[%rd368], %f421;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7468;
  cvt.f32.f16 %f422, high;}

	// end inline asm
	add.s32 	%r5113, %r394, %r5109;
	mul.wide.s32 	%rd369, %r5113, 4;
	add.s64 	%rd370, %rd32, %rd369;
	st.global.f32 	[%rd370], %f422;

$L__BB0_537:
	add.s32 	%r1313, %r1307, %r1737;
	add.s32 	%r5114, %r1313, %r1309;
	mul.lo.s32 	%r1314, %r5114, %r1738;
	@%p12 bra 	$L__BB0_539;

	add.s32 	%r5119, %r1314, %r657;
	mul.lo.s32 	%r5120, %r5119, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7567;
  cvt.f32.f16 %f423, low;}

	// end inline asm
	add.s32 	%r5121, %r379, %r5120;
	mul.wide.s32 	%rd371, %r5121, 4;
	add.s64 	%rd372, %rd32, %rd371;
	st.global.f32 	[%rd372], %f423;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7567;
  cvt.f32.f16 %f424, high;}

	// end inline asm
	add.s32 	%r5122, %r380, %r5120;
	mul.wide.s32 	%rd373, %r5122, 4;
	add.s64 	%rd374, %rd32, %rd373;
	st.global.f32 	[%rd374], %f424;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7564;
  cvt.f32.f16 %f425, low;}

	// end inline asm
	add.s32 	%r5123, %r393, %r5120;
	mul.wide.s32 	%rd375, %r5123, 4;
	add.s64 	%rd376, %rd32, %rd375;
	st.global.f32 	[%rd376], %f425;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7564;
  cvt.f32.f16 %f426, high;}

	// end inline asm
	add.s32 	%r5124, %r394, %r5120;
	mul.wide.s32 	%rd377, %r5124, 4;
	add.s64 	%rd378, %rd32, %rd377;
	st.global.f32 	[%rd378], %f426;

$L__BB0_539:
	@%p12 bra 	$L__BB0_541;

	add.s32 	%r5129, %r1310, %r1308;
	mul.lo.s32 	%r5130, %r5129, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7464;
  cvt.f32.f16 %f427, low;}

	// end inline asm
	add.s32 	%r5131, %r379, %r5130;
	mul.wide.s32 	%rd379, %r5131, 4;
	add.s64 	%rd380, %rd32, %rd379;
	st.global.f32 	[%rd380], %f427;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7464;
  cvt.f32.f16 %f428, high;}

	// end inline asm
	add.s32 	%r5132, %r380, %r5130;
	mul.wide.s32 	%rd381, %r5132, 4;
	add.s64 	%rd382, %rd32, %rd381;
	st.global.f32 	[%rd382], %f428;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7462;
  cvt.f32.f16 %f429, low;}

	// end inline asm
	add.s32 	%r5133, %r393, %r5130;
	mul.wide.s32 	%rd383, %r5133, 4;
	add.s64 	%rd384, %rd32, %rd383;
	st.global.f32 	[%rd384], %f429;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7462;
  cvt.f32.f16 %f430, high;}

	// end inline asm
	add.s32 	%r5134, %r394, %r5130;
	mul.wide.s32 	%rd385, %r5134, 4;
	add.s64 	%rd386, %rd32, %rd385;
	st.global.f32 	[%rd386], %f430;

$L__BB0_541:
	@%p12 bra 	$L__BB0_543;

	add.s32 	%r5139, %r1312, %r1308;
	mul.lo.s32 	%r5140, %r5139, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4218;
  cvt.f32.f16 %f431, low;}

	// end inline asm
	add.s32 	%r5141, %r379, %r5140;
	mul.wide.s32 	%rd387, %r5141, 4;
	add.s64 	%rd388, %rd32, %rd387;
	st.global.f32 	[%rd388], %f431;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4218;
  cvt.f32.f16 %f432, high;}

	// end inline asm
	add.s32 	%r5142, %r380, %r5140;
	mul.wide.s32 	%rd389, %r5142, 4;
	add.s64 	%rd390, %rd32, %rd389;
	st.global.f32 	[%rd390], %f432;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4299;
  cvt.f32.f16 %f433, low;}

	// end inline asm
	add.s32 	%r5143, %r393, %r5140;
	mul.wide.s32 	%rd391, %r5143, 4;
	add.s64 	%rd392, %rd32, %rd391;
	st.global.f32 	[%rd392], %f433;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4299;
  cvt.f32.f16 %f434, high;}

	// end inline asm
	add.s32 	%r5144, %r394, %r5140;
	mul.wide.s32 	%rd393, %r5144, 4;
	add.s64 	%rd394, %rd32, %rd393;
	st.global.f32 	[%rd394], %f434;

$L__BB0_543:
	@%p12 bra 	$L__BB0_545;

	add.s32 	%r5149, %r1314, %r1308;
	mul.lo.s32 	%r5150, %r5149, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7561;
  cvt.f32.f16 %f435, low;}

	// end inline asm
	add.s32 	%r5151, %r379, %r5150;
	mul.wide.s32 	%rd395, %r5151, 4;
	add.s64 	%rd396, %rd32, %rd395;
	st.global.f32 	[%rd396], %f435;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7561;
  cvt.f32.f16 %f436, high;}

	// end inline asm
	add.s32 	%r5152, %r380, %r5150;
	mul.wide.s32 	%rd397, %r5152, 4;
	add.s64 	%rd398, %rd32, %rd397;
	st.global.f32 	[%rd398], %f436;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7558;
  cvt.f32.f16 %f437, low;}

	// end inline asm
	add.s32 	%r5153, %r393, %r5150;
	mul.wide.s32 	%rd399, %r5153, 4;
	add.s64 	%rd400, %rd32, %rd399;
	st.global.f32 	[%rd400], %f437;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7558;
  cvt.f32.f16 %f438, high;}

	// end inline asm
	add.s32 	%r5154, %r394, %r5150;
	mul.wide.s32 	%rd401, %r5154, 4;
	add.s64 	%rd402, %rd32, %rd401;
	st.global.f32 	[%rd402], %f438;

$L__BB0_545:
	add.s32 	%r1315, %r657, 2;
	@%p12 bra 	$L__BB0_547;

	add.s32 	%r5159, %r1310, %r1315;
	mul.lo.s32 	%r5160, %r5159, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4359;
  cvt.f32.f16 %f439, low;}

	// end inline asm
	add.s32 	%r5161, %r379, %r5160;
	mul.wide.s32 	%rd403, %r5161, 4;
	add.s64 	%rd404, %rd32, %rd403;
	st.global.f32 	[%rd404], %f439;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4359;
  cvt.f32.f16 %f440, high;}

	// end inline asm
	add.s32 	%r5162, %r380, %r5160;
	mul.wide.s32 	%rd405, %r5162, 4;
	add.s64 	%rd406, %rd32, %rd405;
	st.global.f32 	[%rd406], %f440;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4393;
  cvt.f32.f16 %f441, low;}

	// end inline asm
	add.s32 	%r5163, %r393, %r5160;
	mul.wide.s32 	%rd407, %r5163, 4;
	add.s64 	%rd408, %rd32, %rd407;
	st.global.f32 	[%rd408], %f441;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4393;
  cvt.f32.f16 %f442, high;}

	// end inline asm
	add.s32 	%r5164, %r394, %r5160;
	mul.wide.s32 	%rd409, %r5164, 4;
	add.s64 	%rd410, %rd32, %rd409;
	st.global.f32 	[%rd410], %f442;

$L__BB0_547:
	add.s32 	%r5165, %r1307, %r656;
	mul.lo.s32 	%r1316, %r5165, %r1738;
	@%p12 bra 	$L__BB0_549;

	add.s32 	%r5170, %r1316, %r1311;
	mul.lo.s32 	%r5171, %r5170, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7460;
  cvt.f32.f16 %f443, low;}

	// end inline asm
	add.s32 	%r5172, %r379, %r5171;
	mul.wide.s32 	%rd411, %r5172, 4;
	add.s64 	%rd412, %rd32, %rd411;
	st.global.f32 	[%rd412], %f443;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7460;
  cvt.f32.f16 %f444, high;}

	// end inline asm
	add.s32 	%r5173, %r380, %r5171;
	mul.wide.s32 	%rd413, %r5173, 4;
	add.s64 	%rd414, %rd32, %rd413;
	st.global.f32 	[%rd414], %f444;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7457;
  cvt.f32.f16 %f445, low;}

	// end inline asm
	add.s32 	%r5174, %r393, %r5171;
	mul.wide.s32 	%rd415, %r5174, 4;
	add.s64 	%rd416, %rd32, %rd415;
	st.global.f32 	[%rd416], %f445;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7457;
  cvt.f32.f16 %f446, high;}

	// end inline asm
	add.s32 	%r5175, %r394, %r5171;
	mul.wide.s32 	%rd417, %r5175, 4;
	add.s64 	%rd418, %rd32, %rd417;
	st.global.f32 	[%rd418], %f446;

$L__BB0_549:
	add.s32 	%r5176, %r1313, %r656;
	mul.lo.s32 	%r1317, %r5176, %r1738;
	@%p12 bra 	$L__BB0_551;

	add.s32 	%r5181, %r1317, %r1311;
	mul.lo.s32 	%r5182, %r5181, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7554;
  cvt.f32.f16 %f447, low;}

	// end inline asm
	add.s32 	%r5183, %r379, %r5182;
	mul.wide.s32 	%rd419, %r5183, 4;
	add.s64 	%rd420, %rd32, %rd419;
	st.global.f32 	[%rd420], %f447;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7554;
  cvt.f32.f16 %f448, high;}

	// end inline asm
	add.s32 	%r5184, %r380, %r5182;
	mul.wide.s32 	%rd421, %r5184, 4;
	add.s64 	%rd422, %rd32, %rd421;
	st.global.f32 	[%rd422], %f448;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7552;
  cvt.f32.f16 %f449, low;}

	// end inline asm
	add.s32 	%r5185, %r393, %r5182;
	mul.wide.s32 	%rd423, %r5185, 4;
	add.s64 	%rd424, %rd32, %rd423;
	st.global.f32 	[%rd424], %f449;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7552;
  cvt.f32.f16 %f450, high;}

	// end inline asm
	add.s32 	%r5186, %r394, %r5182;
	mul.wide.s32 	%rd425, %r5186, 4;
	add.s64 	%rd426, %rd32, %rd425;
	st.global.f32 	[%rd426], %f450;

$L__BB0_551:
	add.s32 	%r5187, %r1304, %r656;
	mul.lo.s32 	%r1318, %r5187, %r1738;
	@%p12 bra 	$L__BB0_553;

	add.s32 	%r5192, %r1318, %r657;
	mul.lo.s32 	%r5193, %r5192, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7454;
  cvt.f32.f16 %f451, low;}

	// end inline asm
	add.s32 	%r5194, %r379, %r5193;
	mul.wide.s32 	%rd427, %r5194, 4;
	add.s64 	%rd428, %rd32, %rd427;
	st.global.f32 	[%rd428], %f451;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7454;
  cvt.f32.f16 %f452, high;}

	// end inline asm
	add.s32 	%r5195, %r380, %r5193;
	mul.wide.s32 	%rd429, %r5195, 4;
	add.s64 	%rd430, %rd32, %rd429;
	st.global.f32 	[%rd430], %f452;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7445;
  cvt.f32.f16 %f453, low;}

	// end inline asm
	add.s32 	%r5196, %r393, %r5193;
	mul.wide.s32 	%rd431, %r5196, 4;
	add.s64 	%rd432, %rd32, %rd431;
	st.global.f32 	[%rd432], %f453;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7445;
  cvt.f32.f16 %f454, high;}

	// end inline asm
	add.s32 	%r5197, %r394, %r5193;
	mul.wide.s32 	%rd433, %r5197, 4;
	add.s64 	%rd434, %rd32, %rd433;
	st.global.f32 	[%rd434], %f454;

$L__BB0_553:
	@%p12 bra 	$L__BB0_555;

	add.s32 	%r5202, %r1316, %r657;
	mul.lo.s32 	%r5203, %r5202, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7453;
  cvt.f32.f16 %f455, low;}

	// end inline asm
	add.s32 	%r5204, %r379, %r5203;
	mul.wide.s32 	%rd435, %r5204, 4;
	add.s64 	%rd436, %rd32, %rd435;
	st.global.f32 	[%rd436], %f455;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7453;
  cvt.f32.f16 %f456, high;}

	// end inline asm
	add.s32 	%r5205, %r380, %r5203;
	mul.wide.s32 	%rd437, %r5205, 4;
	add.s64 	%rd438, %rd32, %rd437;
	st.global.f32 	[%rd438], %f456;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7444;
  cvt.f32.f16 %f457, low;}

	// end inline asm
	add.s32 	%r5206, %r393, %r5203;
	mul.wide.s32 	%rd439, %r5206, 4;
	add.s64 	%rd440, %rd32, %rd439;
	st.global.f32 	[%rd440], %f457;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7444;
  cvt.f32.f16 %f458, high;}

	// end inline asm
	add.s32 	%r5207, %r394, %r5203;
	mul.wide.s32 	%rd441, %r5207, 4;
	add.s64 	%rd442, %rd32, %rd441;
	st.global.f32 	[%rd442], %f458;

$L__BB0_555:
	@%p12 bra 	$L__BB0_557;

	add.s32 	%r5212, %r1317, %r657;
	mul.lo.s32 	%r5213, %r5212, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7549;
  cvt.f32.f16 %f459, low;}

	// end inline asm
	add.s32 	%r5214, %r379, %r5213;
	mul.wide.s32 	%rd443, %r5214, 4;
	add.s64 	%rd444, %rd32, %rd443;
	st.global.f32 	[%rd444], %f459;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7549;
  cvt.f32.f16 %f460, high;}

	// end inline asm
	add.s32 	%r5215, %r380, %r5213;
	mul.wide.s32 	%rd445, %r5215, 4;
	add.s64 	%rd446, %rd32, %rd445;
	st.global.f32 	[%rd446], %f460;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7546;
  cvt.f32.f16 %f461, low;}

	// end inline asm
	add.s32 	%r5216, %r393, %r5213;
	mul.wide.s32 	%rd447, %r5216, 4;
	add.s64 	%rd448, %rd32, %rd447;
	st.global.f32 	[%rd448], %f461;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7546;
  cvt.f32.f16 %f462, high;}

	// end inline asm
	add.s32 	%r5217, %r394, %r5213;
	mul.wide.s32 	%rd449, %r5217, 4;
	add.s64 	%rd450, %rd32, %rd449;
	st.global.f32 	[%rd450], %f462;

$L__BB0_557:
	@%p12 bra 	$L__BB0_559;

	add.s32 	%r5222, %r1318, %r1308;
	mul.lo.s32 	%r5223, %r5222, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7436;
  cvt.f32.f16 %f463, low;}

	// end inline asm
	add.s32 	%r5224, %r379, %r5223;
	mul.wide.s32 	%rd451, %r5224, 4;
	add.s64 	%rd452, %rd32, %rd451;
	st.global.f32 	[%rd452], %f463;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7436;
  cvt.f32.f16 %f464, high;}

	// end inline asm
	add.s32 	%r5225, %r380, %r5223;
	mul.wide.s32 	%rd453, %r5225, 4;
	add.s64 	%rd454, %rd32, %rd453;
	st.global.f32 	[%rd454], %f464;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7428;
  cvt.f32.f16 %f465, low;}

	// end inline asm
	add.s32 	%r5226, %r393, %r5223;
	mul.wide.s32 	%rd455, %r5226, 4;
	add.s64 	%rd456, %rd32, %rd455;
	st.global.f32 	[%rd456], %f465;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7428;
  cvt.f32.f16 %f466, high;}

	// end inline asm
	add.s32 	%r5227, %r394, %r5223;
	mul.wide.s32 	%rd457, %r5227, 4;
	add.s64 	%rd458, %rd32, %rd457;
	st.global.f32 	[%rd458], %f466;

$L__BB0_559:
	@%p12 bra 	$L__BB0_561;

	add.s32 	%r5232, %r1316, %r1308;
	mul.lo.s32 	%r5233, %r5232, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7435;
  cvt.f32.f16 %f467, low;}

	// end inline asm
	add.s32 	%r5234, %r379, %r5233;
	mul.wide.s32 	%rd459, %r5234, 4;
	add.s64 	%rd460, %rd32, %rd459;
	st.global.f32 	[%rd460], %f467;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7435;
  cvt.f32.f16 %f468, high;}

	// end inline asm
	add.s32 	%r5235, %r380, %r5233;
	mul.wide.s32 	%rd461, %r5235, 4;
	add.s64 	%rd462, %rd32, %rd461;
	st.global.f32 	[%rd462], %f468;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7427;
  cvt.f32.f16 %f469, low;}

	// end inline asm
	add.s32 	%r5236, %r393, %r5233;
	mul.wide.s32 	%rd463, %r5236, 4;
	add.s64 	%rd464, %rd32, %rd463;
	st.global.f32 	[%rd464], %f469;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7427;
  cvt.f32.f16 %f470, high;}

	// end inline asm
	add.s32 	%r5237, %r394, %r5233;
	mul.wide.s32 	%rd465, %r5237, 4;
	add.s64 	%rd466, %rd32, %rd465;
	st.global.f32 	[%rd466], %f470;

$L__BB0_561:
	@%p12 bra 	$L__BB0_563;

	add.s32 	%r5242, %r1317, %r1308;
	mul.lo.s32 	%r5243, %r5242, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7543;
  cvt.f32.f16 %f471, low;}

	// end inline asm
	add.s32 	%r5244, %r379, %r5243;
	mul.wide.s32 	%rd467, %r5244, 4;
	add.s64 	%rd468, %rd32, %rd467;
	st.global.f32 	[%rd468], %f471;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7543;
  cvt.f32.f16 %f472, high;}

	// end inline asm
	add.s32 	%r5245, %r380, %r5243;
	mul.wide.s32 	%rd469, %r5245, 4;
	add.s64 	%rd470, %rd32, %rd469;
	st.global.f32 	[%rd470], %f472;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7540;
  cvt.f32.f16 %f473, low;}

	// end inline asm
	add.s32 	%r5246, %r393, %r5243;
	mul.wide.s32 	%rd471, %r5246, 4;
	add.s64 	%rd472, %rd32, %rd471;
	st.global.f32 	[%rd472], %f473;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7540;
  cvt.f32.f16 %f474, high;}

	// end inline asm
	add.s32 	%r5247, %r394, %r5243;
	mul.wide.s32 	%rd473, %r5247, 4;
	add.s64 	%rd474, %rd32, %rd473;
	st.global.f32 	[%rd474], %f474;

$L__BB0_563:
	add.s32 	%r1319, %r1317, %r1315;
	@%p12 bra 	$L__BB0_565;

	mul.lo.s32 	%r5252, %r1319, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7539;
  cvt.f32.f16 %f475, low;}

	// end inline asm
	add.s32 	%r5253, %r379, %r5252;
	mul.wide.s32 	%rd475, %r5253, 4;
	add.s64 	%rd476, %rd32, %rd475;
	st.global.f32 	[%rd476], %f475;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7539;
  cvt.f32.f16 %f476, high;}

	// end inline asm
	add.s32 	%r5254, %r380, %r5252;
	mul.wide.s32 	%rd477, %r5254, 4;
	add.s64 	%rd478, %rd32, %rd477;
	st.global.f32 	[%rd478], %f476;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7538;
  cvt.f32.f16 %f477, low;}

	// end inline asm
	add.s32 	%r5255, %r393, %r5252;
	mul.wide.s32 	%rd479, %r5255, 4;
	add.s64 	%rd480, %rd32, %rd479;
	st.global.f32 	[%rd480], %f477;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7538;
  cvt.f32.f16 %f478, high;}

	// end inline asm
	add.s32 	%r5256, %r394, %r5252;
	mul.wide.s32 	%rd481, %r5256, 4;
	add.s64 	%rd482, %rd32, %rd481;
	st.global.f32 	[%rd482], %f478;

$L__BB0_565:
	add.s32 	%r1320, %r656, 1;
	@%p12 bra 	$L__BB0_567;

	add.s32 	%r5261, %r1307, %r1320;
	mad.lo.s32 	%r5262, %r5261, %r1738, %r657;
	mul.lo.s32 	%r5263, %r5262, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7407;
  cvt.f32.f16 %f479, low;}

	// end inline asm
	add.s32 	%r5264, %r379, %r5263;
	mul.wide.s32 	%rd483, %r5264, 4;
	add.s64 	%rd484, %rd32, %rd483;
	st.global.f32 	[%rd484], %f479;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7407;
  cvt.f32.f16 %f480, high;}

	// end inline asm
	add.s32 	%r5265, %r380, %r5263;
	mul.wide.s32 	%rd485, %r5265, 4;
	add.s64 	%rd486, %rd32, %rd485;
	st.global.f32 	[%rd486], %f480;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7400;
  cvt.f32.f16 %f481, low;}

	// end inline asm
	add.s32 	%r5266, %r393, %r5263;
	mul.wide.s32 	%rd487, %r5266, 4;
	add.s64 	%rd488, %rd32, %rd487;
	st.global.f32 	[%rd488], %f481;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7400;
  cvt.f32.f16 %f482, high;}

	// end inline asm
	add.s32 	%r5267, %r394, %r5263;
	mul.wide.s32 	%rd489, %r5267, 4;
	add.s64 	%rd490, %rd32, %rd489;
	st.global.f32 	[%rd490], %f482;

$L__BB0_567:
	add.s32 	%r5268, %r1313, %r1320;
	mul.lo.s32 	%r1321, %r5268, %r1738;
	@%p12 bra 	$L__BB0_569;

	add.s32 	%r5273, %r1321, %r657;
	mul.lo.s32 	%r5274, %r5273, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7536;
  cvt.f32.f16 %f483, low;}

	// end inline asm
	add.s32 	%r5275, %r379, %r5274;
	mul.wide.s32 	%rd491, %r5275, 4;
	add.s64 	%rd492, %rd32, %rd491;
	st.global.f32 	[%rd492], %f483;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7536;
  cvt.f32.f16 %f484, high;}

	// end inline asm
	add.s32 	%r5276, %r380, %r5274;
	mul.wide.s32 	%rd493, %r5276, 4;
	add.s64 	%rd494, %rd32, %rd493;
	st.global.f32 	[%rd494], %f484;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7534;
  cvt.f32.f16 %f485, low;}

	// end inline asm
	add.s32 	%r5277, %r393, %r5274;
	mul.wide.s32 	%rd495, %r5277, 4;
	add.s64 	%rd496, %rd32, %rd495;
	st.global.f32 	[%rd496], %f485;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7534;
  cvt.f32.f16 %f486, high;}

	// end inline asm
	add.s32 	%r5278, %r394, %r5274;
	mul.wide.s32 	%rd497, %r5278, 4;
	add.s64 	%rd498, %rd32, %rd497;
	st.global.f32 	[%rd498], %f486;

$L__BB0_569:
	add.s32 	%r1322, %r1321, %r1308;
	@%p12 bra 	$L__BB0_571;

	mul.lo.s32 	%r5283, %r1322, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7533;
  cvt.f32.f16 %f487, low;}

	// end inline asm
	add.s32 	%r5284, %r379, %r5283;
	mul.wide.s32 	%rd499, %r5284, 4;
	add.s64 	%rd500, %rd32, %rd499;
	st.global.f32 	[%rd500], %f487;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7533;
  cvt.f32.f16 %f488, high;}

	// end inline asm
	add.s32 	%r5285, %r380, %r5283;
	mul.wide.s32 	%rd501, %r5285, 4;
	add.s64 	%rd502, %rd32, %rd501;
	st.global.f32 	[%rd502], %f488;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7532;
  cvt.f32.f16 %f489, low;}

	// end inline asm
	add.s32 	%r5286, %r393, %r5283;
	mul.wide.s32 	%rd503, %r5286, 4;
	add.s64 	%rd504, %rd32, %rd503;
	st.global.f32 	[%rd504], %f489;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7532;
  cvt.f32.f16 %f490, high;}

	// end inline asm
	add.s32 	%r5287, %r394, %r5283;
	mul.wide.s32 	%rd505, %r5287, 4;
	add.s64 	%rd506, %rd32, %rd505;
	st.global.f32 	[%rd506], %f490;

$L__BB0_571:
	setp.eq.s32 	%p301, %r23, %r2132;
	@%p301 bra 	$L__BB0_573;

	mad.lo.s32 	%r5288, %r1733, %r23, %r24;
	mov.u32 	%r5289, _ZN6kernel5shmemE;
	mad.lo.s32 	%r5290, %r5288, 1280, %r5289;
	add.s32 	%r5291, %r5290, -256;
	shl.b32 	%r5292, %r28, 4;
	add.s32 	%r5293, %r5291, %r5292;
	st.shared.v4.u32 	[%r5293+256], {%r3837, %r3914, %r7554, %r7552};
	st.shared.v4.u32 	[%r5293+1024], {%r3604, %r3681, %r7567, %r7564};
	shl.b32 	%r5294, %r28, 3;
	add.s32 	%r5295, %r5291, %r5294;
	st.shared.v2.u32 	[%r5295+768], {%r3880, %r3946};

$L__BB0_573:
	setp.eq.s32 	%p302, %r24, %r2137;
	@%p302 bra 	$L__BB0_577;

	mad.lo.s32 	%r5299, %r1732, 384, -64;
	mul.lo.s32 	%r5300, %r5299, %r24;
	mad.lo.s32 	%r5302, %r2133, %r2132, %r5300;
	mad.lo.s32 	%r5303, %r2213, 384, %r5302;
	shl.b32 	%r5304, %r5303, 2;
	mov.u32 	%r5305, _ZN6kernel5shmemE;
	add.s32 	%r5306, %r5305, %r5304;
	add.s32 	%r5307, %r5306, -256;
	shl.b32 	%r5308, %r28, 4;
	add.s32 	%r5309, %r5307, %r5308;
	st.shared.v4.u32 	[%r5309+256], {%r3758, %r3792, %r7561, %r7558};
	st.shared.v4.u32 	[%r5309+1024], {%r4359, %r4393, %r7539, %r7538};
	shl.b32 	%r5310, %r28, 3;
	add.s32 	%r1326, %r5307, %r5310;
	@%p301 bra 	$L__BB0_576;

	st.shared.v2.u32 	[%r1326], {%r3647, %r3713};

$L__BB0_576:
	st.shared.v2.u32 	[%r1326+768], {%r4218, %r4299};

$L__BB0_577:
	setp.ne.s32 	%p304, %r23, %r2132;
	ld.param.u64 	%rd507, [%rd1+56];
	cvta.to.global.u64 	%rd33, %rd507;
	@%p304 bra 	$L__BB0_579;

	mad.lo.s32 	%r5312, %r654, %r1735, %r26;
	mul.lo.s32 	%r5313, %r5312, %r1733;
	mul.lo.s32 	%r5314, %r5313, 768;
	mad.lo.s32 	%r5315, %r24, 384, %r5314;
	add.s32 	%r5316, %r5315, -64;
	mul.wide.s32 	%rd508, %r5316, 4;
	add.s64 	%rd509, %rd33, %rd508;
	add.s64 	%rd511, %rd509, %rd273;
	st.global.v4.u32 	[%rd511+256], {%r3837, %r3914, %r7554, %r7552};
	st.global.v4.u32 	[%rd511+1024], {%r3604, %r3681, %r7567, %r7564};
	add.s64 	%rd513, %rd509, %rd275;
	st.global.v2.u32 	[%rd513+768], {%r3880, %r3946};
	st.global.v2.u32 	[%rd513+1536], {%r3647, %r3713};

$L__BB0_579:
	setp.ne.s32 	%p305, %r24, %r2137;
	@%p305 bra 	$L__BB0_584;

	ld.param.u64 	%rd557, [%rd1+56];
	cvta.to.global.u64 	%rd556, %rd557;
	mad.lo.s32 	%r5319, %r655, %r1734, %r25;
	mad.lo.s32 	%r5323, %r5319, %r1789, %r412;
	mul.wide.s32 	%rd514, %r5323, 4;
	add.s64 	%rd515, %rd556, %rd514;
	add.s64 	%rd517, %rd515, %rd273;
	st.global.v4.u32 	[%rd517+256], {%r3758, %r3792, %r7561, %r7558};
	st.global.v4.u32 	[%rd517+1024], {%r4359, %r4393, %r7539, %r7538};
	add.s64 	%rd34, %rd515, %rd275;
	@%p301 bra 	$L__BB0_582;

	st.global.v2.u32 	[%rd34], {%r3647, %r3713};

$L__BB0_582:
	st.global.v2.u32 	[%rd34+768], {%r4218, %r4299};
	@%p205 bra 	$L__BB0_584;

	st.global.v2.u32 	[%rd34+1536], {%r7646, %r7643};

$L__BB0_584:
	setp.ge.s32 	%p308, %r23, %r2132;
	@%p308 bra 	$L__BB0_586;

	mul.lo.s32 	%r5324, %r1733, 320;
	mul.lo.s32 	%r5325, %r24, 320;
	mad.lo.s32 	%r5326, %r5324, %r23, %r5325;
	add.s32 	%r5330, %r1788, -64;
	mad.lo.s32 	%r5334, %r5330, %r2137, %r2134;
	add.s32 	%r5335, %r5326, %r5334;
	shl.b32 	%r5336, %r5335, 2;
	mov.u32 	%r5337, _ZN6kernel5shmemE;
	add.s32 	%r5338, %r5337, %r5336;
	shl.b32 	%r5339, %r28, 4;
	add.s32 	%r5340, %r5338, %r5339;
	st.shared.v4.u32 	[%r5340], {%r7697, %r7696, %r7692, %r7690};
	shl.b32 	%r5341, %r28, 3;
	add.s32 	%r5342, %r5338, %r5341;
	st.shared.v2.u32 	[%r5342+512], {%r7458, %r7455};
	st.shared.v4.u32 	[%r5340+768], {%r7471, %r7466, %r7446, %r7437};

$L__BB0_586:
	setp.ge.s32 	%p309, %r24, %r2137;
	@%p309 bra 	$L__BB0_590;

	mad.lo.s32 	%r5348, %r2213, 384, %r2140;
	mad.lo.s32 	%r5351, %r2135, %r24, %r5348;
	add.s32 	%r5357, %r5351, %r2138;
	shl.b32 	%r5358, %r5357, 2;
	mov.u32 	%r5359, _ZN6kernel5shmemE;
	add.s32 	%r5360, %r5359, %r5358;
	shl.b32 	%r5361, %r28, 3;
	add.s32 	%r5362, %r5360, %r5361;
	@%p308 bra 	$L__BB0_589;

	add.s32 	%r7220, %r5362, -256;
	st.shared.v2.u32 	[%r7220], {%r7470, %r7465};

$L__BB0_589:
	shl.b32 	%r5381, %r28, 4;
	add.s32 	%r5382, %r5360, %r5381;
	st.shared.v4.u32 	[%r5382], {%r7463, %r7461, %r7429, %r7421};
	add.s32 	%r7221, %r5362, -256;
	st.shared.v2.u32 	[%r7221+768], {%r7430, %r7422};
	st.shared.v4.u32 	[%r5382+768], {%r7695, %r7694, %r7683, %r7682};

$L__BB0_590:
	bar.sync 	0;
	@%p200 bra 	$L__BB0_592;

	mul.lo.s32 	%r5383, %r1733, 320;
	add.s32 	%r5384, %r23, -1;
	mul.lo.s32 	%r5385, %r24, 320;
	mad.lo.s32 	%r5386, %r5383, %r5384, %r5385;
	shl.b32 	%r5387, %r5386, 2;
	mov.u32 	%r5388, _ZN6kernel5shmemE;
	add.s32 	%r5389, %r5388, %r5387;
	add.s32 	%r5390, %r5389, -256;
	shl.b32 	%r5391, %r28, 4;
	add.s32 	%r5392, %r5390, %r5391;
	ld.shared.v4.u32 	{%r7641, %r7639, %r7648, %r7649}, [%r5392+256];
	ld.shared.v4.u32 	{%r7647, %r7644, %r7636, %r7637}, [%r5392+1024];
	shl.b32 	%r5401, %r28, 3;
	add.s32 	%r5402, %r5390, %r5401;
	ld.shared.v2.u32 	{%r7640, %r7638}, [%r5402+768];

$L__BB0_592:
	@%p203 bra 	$L__BB0_595;

	mad.lo.s32 	%r5407, %r1732, 384, -64;
	add.s32 	%r5408, %r24, -1;
	mul.lo.s32 	%r5409, %r5407, %r5408;
	mad.lo.s32 	%r5412, %r2133, %r2132, %r5409;
	mad.lo.s32 	%r5413, %r2213, 384, %r5412;
	shl.b32 	%r5414, %r5413, 2;
	mov.u32 	%r5415, _ZN6kernel5shmemE;
	add.s32 	%r5416, %r5415, %r5414;
	add.s32 	%r5417, %r5416, -256;
	shl.b32 	%r5418, %r28, 4;
	add.s32 	%r5419, %r5417, %r5418;
	ld.shared.v4.u32 	{%r7661, %r7660, %r7656, %r7654}, [%r5419+256];
	ld.shared.v4.u32 	{%r7651, %r7650, %r7653, %r7659}, [%r5419+1024];
	shl.b32 	%r5428, %r28, 3;
	add.s32 	%r5429, %r5417, %r5428;
	ld.shared.v2.u32 	{%r7657, %r7655}, [%r5429+768];
	@%p200 bra 	$L__BB0_595;

	add.s32 	%r7222, %r5429, 768;
	ld.shared.v2.u32 	{%r7642, %r7645}, [%r7222+768];

$L__BB0_595:
	ld.param.u64 	%rd519, [%rd1+56];
	cvta.to.global.u64 	%rd35, %rd519;
	mov.u32 	%r7773, %r7607;
	mov.u32 	%r7774, %r7608;
	mov.u32 	%r7776, %r7610;
	mov.u32 	%r7777, %r7611;
	mov.u32 	%r7797, %r7627;
	mov.u32 	%r7801, %r7631;
	mov.u32 	%r7782, %r7614;
	mov.u32 	%r7783, %r7615;
	mov.u32 	%r7784, %r7616;
	mov.u32 	%r7785, %r7617;
	mov.u32 	%r7802, %r7632;
	mov.u32 	%r7803, %r7633;
	@%p205 bra 	$L__BB0_599;

	mad.lo.s32 	%r5435, %r654, %r1735, %r26;
	mad.lo.s32 	%r5436, %r5435, 768, 384;
	mul.lo.s32 	%r5437, %r5436, %r1733;
	mad.lo.s32 	%r5438, %r24, 384, %r5437;
	add.s32 	%r5439, %r5438, -128;
	mul.wide.s32 	%rd520, %r5439, 4;
	add.s64 	%rd521, %rd35, %rd520;
	add.s64 	%rd523, %rd521, %rd273;
	add.s64 	%rd36, %rd523, 512;
	mov.u32 	%r7797, %r7627;
	mov.u32 	%r7801, %r7631;
	mov.u32 	%r7802, %r7632;
	mov.u32 	%r7803, %r7633;
	@%p203 bra 	$L__BB0_598;

	ld.global.v4.u32 	{%r7802, %r7803, %r7797, %r7801}, [%rd36+-512];

$L__BB0_598:
	ld.global.v4.u32 	{%r7783, %r7785, %r7782, %r7784}, [%rd36];
	ld.global.v4.u32 	{%r7777, %r7774, %r7773, %r7776}, [%rd36+512];
	ld.global.v4.u32 	{%r7606, %r7609, %r7613, %r7612}, [%rd36+1024];

$L__BB0_599:
	mov.u32 	%r7788, %r7618;
	mov.u32 	%r7789, %r7619;
	mov.u32 	%r7790, %r7620;
	mov.u32 	%r7791, %r7621;
	mov.u32 	%r7792, %r7622;
	mov.u32 	%r7793, %r7623;
	mov.u32 	%r7794, %r7624;
	mov.u32 	%r7799, %r7629;
	@%p208 bra 	$L__BB0_601;

	mad.lo.s32 	%r5457, %r655, %r1734, %r25;
	mad.lo.s32 	%r5461, %r5457, %r1789, %r413;
	mul.wide.s32 	%rd524, %r5461, 4;
	add.s64 	%rd525, %rd35, %rd524;
	add.s64 	%rd527, %rd525, %rd273;
	ld.global.v4.u32 	{%r7626, %r7625, %r7630, %r7628}, [%rd527];
	ld.global.v4.u32 	{%r7794, %r7791, %r7788, %r7789}, [%rd527+512];
	ld.global.v4.u32 	{%r7793, %r7790, %r7792, %r7799}, [%rd527+1024];
	ld.global.v4.u32 	{%r7802, %r7803, %r7797, %r7801}, [%rd527+1536];

$L__BB0_601:
	neg.s32 	%r7228, %r1737;
	not.b32 	%r7227, %r26;
	add.s32 	%r7226, %r1735, %r7227;
	mul.lo.s32 	%r7225, %r7226, %r1736;
	not.b32 	%r7224, %r25;
	add.s32 	%r7223, %r1734, %r7224;
	mad.lo.s32 	%r5485, %r7223, %r1736, %r7225;
	add.s32 	%r5486, %r5485, %r1737;
	add.s32 	%r5495, %r5486, %r2542;
	add.s32 	%r1446, %r7493, 1;
	add.s32 	%r5496, %r1446, %r5495;
	div.s32 	%r5497, %r5496, %r1737;
	mad.lo.s32 	%r1447, %r5497, %r7228, %r5496;
	mad.lo.s32 	%r5504, %r5497, %r30, %r2553;
	ld.param.u64 	%rd528, [%rd1+72];
	cvta.to.global.u64 	%rd529, %rd528;
	rem.s32 	%r5505, %r5504, %r1738;
	shr.u32 	%r5506, %r5505, 31;
	add.s32 	%r5507, %r5505, %r5506;
	shr.s32 	%r5508, %r5507, 1;
	mad.lo.s32 	%r5509, %r5508, %r1737, %r1447;
	shl.b32 	%r5510, %r5509, 5;
	add.s32 	%r5511, %r5510, %r28;
	cvt.s64.s32 	%rd37, %r5511;
	mul.wide.s32 	%rd530, %r5511, 4;
	add.s64 	%rd531, %rd529, %rd530;
	ld.global.u32 	%r7495, [%rd531];
	ld.param.u64 	%rd532, [%rd1+80];
	cvta.to.global.u64 	%rd38, %rd532;
	@%p71 bra 	$L__BB0_603;
	bra.uni 	$L__BB0_602;

$L__BB0_603:
	shl.b64 	%rd535, %rd37, 2;
	add.s64 	%rd536, %rd38, %rd535;
	ld.global.u32 	%r7494, [%rd536];
	bra.uni 	$L__BB0_604;

$L__BB0_602:
	shl.b32 	%r5512, %r1447, 5;
	add.s32 	%r5513, %r5512, %r28;
	mul.wide.s32 	%rd533, %r5513, 16;
	add.s64 	%rd534, %rd38, %rd533;
	ld.global.v4.u32 	{%r5514, %r5515, %r5516, %r5517}, [%rd534];
	mov.u32 	%r7475, %r7479;
	mov.u32 	%r7476, %r7480;
	mov.u32 	%r7477, %r7481;
	mov.u32 	%r7478, %r7482;
	mov.u32 	%r7479, %r7483;
	mov.u32 	%r7480, %r7484;
	mov.u32 	%r7481, %r7485;
	mov.u32 	%r7482, %r7486;
	mov.u32 	%r7483, %r5517;
	mov.u32 	%r7484, %r5516;
	mov.u32 	%r7485, %r5515;
	mov.u32 	%r7486, %r5514;

$L__BB0_604:
	mov.f32 	%f538, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5518, {low,high};}

	// end inline asm
	selp.b32 	%r5520, %r7324, %r5518, %p12;
	// begin inline asm
	{mul.f16x2 %r7472,%r5520,%r7449;
}
	// end inline asm
	selp.b32 	%r5523, %r7328, %r5518, %p12;
	// begin inline asm
	{mul.f16x2 %r7467,%r5523,%r7440;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5525, {low,high};}

	// end inline asm
	selp.b32 	%r5527, %r7324, %r5525, %p12;
	// begin inline asm
	{mul.f16x2 %r7459,%r5527,%r7413;
}
	// end inline asm
	selp.b32 	%r5530, %r7328, %r5525, %p12;
	// begin inline asm
	{mul.f16x2 %r7456,%r5530,%r7408;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5532, {low,high};}

	// end inline asm
	selp.b32 	%r5534, %r7324, %r5532, %p12;
	// begin inline asm
	{mul.f16x2 %r5533,%r5534,%r7405;
}
	// end inline asm
	selp.b32 	%r5537, %r7328, %r5532, %p12;
	// begin inline asm
	{mul.f16x2 %r5536,%r5537,%r7398;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5539, {low,high};}

	// end inline asm
	selp.b32 	%r5541, %r7324, %r5539, %p12;
	// begin inline asm
	{mul.f16x2 %r5540,%r5541,%r7404;
}
	// end inline asm
	selp.b32 	%r5544, %r7328, %r5539, %p12;
	// begin inline asm
	{mul.f16x2 %r5543,%r5544,%r7397;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5546, {low,high};}

	// end inline asm
	selp.b32 	%r5548, %r7324, %r5546, %p12;
	// begin inline asm
	{mul.f16x2 %r7449,%r5548,%r7403;
}
	// end inline asm
	selp.b32 	%r5551, %r7328, %r5546, %p12;
	// begin inline asm
	{mul.f16x2 %r7440,%r5551,%r7396;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5553, {low,high};}

	// end inline asm
	selp.b32 	%r5555, %r7324, %r5553, %p12;
	// begin inline asm
	{mul.f16x2 %r5554,%r5555,%r7391;
}
	// end inline asm
	selp.b32 	%r5558, %r7328, %r5553, %p12;
	// begin inline asm
	{mul.f16x2 %r5557,%r5558,%r7386;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5560, {low,high};}

	// end inline asm
	selp.b32 	%r5562, %r7324, %r5560, %p12;
	// begin inline asm
	{mul.f16x2 %r7432,%r5562,%r7390;
}
	// end inline asm
	selp.b32 	%r5565, %r7328, %r5560, %p12;
	// begin inline asm
	{mul.f16x2 %r7424,%r5565,%r7385;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5567, {low,high};}

	// end inline asm
	selp.b32 	%r5569, %r7324, %r5567, %p12;
	// begin inline asm
	{mul.f16x2 %r5568,%r5569,%r7370;
}
	// end inline asm
	selp.b32 	%r5572, %r7328, %r5567, %p12;
	// begin inline asm
	{mul.f16x2 %r5571,%r5572,%r7363;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5574, {low,high};}

	// end inline asm
	selp.b32 	%r5576, %r7324, %r5574, %p12;
	// begin inline asm
	{mul.f16x2 %r5575,%r5576,%r7624;
}
	// end inline asm
	selp.b32 	%r5579, %r7328, %r5574, %p12;
	// begin inline asm
	{mul.f16x2 %r5578,%r5579,%r7621;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5581, {low,high};}

	// end inline asm
	selp.b32 	%r5583, %r7324, %r5581, %p12;
	// begin inline asm
	{mul.f16x2 %r7413,%r5583,%r7623;
}
	// end inline asm
	selp.b32 	%r5586, %r7328, %r5581, %p12;
	// begin inline asm
	{mul.f16x2 %r7408,%r5586,%r7620;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5588, {low,high};}

	// end inline asm
	selp.b32 	%r5590, %r7324, %r5588, %p12;
	// begin inline asm
	{mul.f16x2 %r5589,%r5590,%r7357;
}
	// end inline asm
	selp.b32 	%r5593, %r7328, %r5588, %p12;
	// begin inline asm
	{mul.f16x2 %r5592,%r5593,%r7350;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5595, {low,high};}

	// end inline asm
	selp.b32 	%r5597, %r7324, %r5595, %p12;
	// begin inline asm
	{mul.f16x2 %r5596,%r5597,%r7356;
}
	// end inline asm
	selp.b32 	%r5600, %r7328, %r5595, %p12;
	// begin inline asm
	{mul.f16x2 %r5599,%r5600,%r7349;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5602, {low,high};}

	// end inline asm
	selp.b32 	%r5604, %r7324, %r5602, %p12;
	// begin inline asm
	{mul.f16x2 %r7403,%r5604,%r7355;
}
	// end inline asm
	selp.b32 	%r5607, %r7328, %r5602, %p12;
	// begin inline asm
	{mul.f16x2 %r7396,%r5607,%r7348;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5609, {low,high};}

	// end inline asm
	selp.b32 	%r5611, %r7324, %r5609, %p12;
	// begin inline asm
	{mul.f16x2 %r5610,%r5611,%r7343;
}
	// end inline asm
	selp.b32 	%r5614, %r7328, %r5609, %p12;
	// begin inline asm
	{mul.f16x2 %r5613,%r5614,%r7335;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5616, {low,high};}

	// end inline asm
	selp.b32 	%r5618, %r7324, %r5616, %p12;
	// begin inline asm
	{mul.f16x2 %r5617,%r5618,%r7342;
}
	// end inline asm
	selp.b32 	%r5621, %r7328, %r5616, %p12;
	// begin inline asm
	{mul.f16x2 %r5620,%r5621,%r7334;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5623, {low,high};}

	// end inline asm
	selp.b32 	%r5625, %r7324, %r5623, %p12;
	// begin inline asm
	{mul.f16x2 %r7390,%r5625,%r7611;
}
	// end inline asm
	selp.b32 	%r5628, %r7328, %r5623, %p12;
	// begin inline asm
	{mul.f16x2 %r7385,%r5628,%r7608;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5630, {low,high};}

	// end inline asm
	selp.b32 	%r5632, %r7324, %r5630, %p12;
	// begin inline asm
	{mul.f16x2 %r5631,%r5632,%r7607;
}
	// end inline asm
	selp.b32 	%r5635, %r7328, %r5630, %p12;
	// begin inline asm
	{mul.f16x2 %r5634,%r5635,%r7610;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5637, {low,high};}

	// end inline asm
	selp.b32 	%r5639, %r7324, %r5637, %p12;
	// begin inline asm
	{mul.f16x2 %r5638,%r5639,%r7618;
}
	// end inline asm
	selp.b32 	%r5642, %r7328, %r5637, %p12;
	// begin inline asm
	{mul.f16x2 %r5641,%r5642,%r7619;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5644, {low,high};}

	// end inline asm
	selp.b32 	%r5646, %r7324, %r5644, %p12;
	// begin inline asm
	{mul.f16x2 %r5645,%r5646,%r7366;
}
	// end inline asm
	selp.b32 	%r5649, %r7328, %r5644, %p12;
	// begin inline asm
	{mul.f16x2 %r5648,%r5649,%r7412;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5651, {low,high};}

	// end inline asm
	selp.b32 	%r5653, %r7324, %r5651, %p12;
	// begin inline asm
	{mul.f16x2 %r5652,%r5653,%r7622;
}
	// end inline asm
	selp.b32 	%r5656, %r7328, %r5651, %p12;
	// begin inline asm
	{mul.f16x2 %r5655,%r5656,%r7629;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5658, {low,high};}

	// end inline asm
	selp.b32 	%r5660, %r7324, %r5658, %p12;
	// begin inline asm
	{mul.f16x2 %r7355,%r5660,%r7627;
}
	// end inline asm
	selp.b32 	%r5663, %r7328, %r5658, %p12;
	// begin inline asm
	{mul.f16x2 %r7348,%r5663,%r7631;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5665, {low,high};}

	// end inline asm
	selp.b32 	%r5667, %r7324, %r5665, %p12;
	// begin inline asm
	{mul.f16x2 %r5666,%r5667,%r7614;
}
	// end inline asm
	selp.b32 	%r5670, %r7328, %r5665, %p12;
	// begin inline asm
	{mul.f16x2 %r5669,%r5670,%r7616;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5672, {low,high};}

	// end inline asm
	selp.b32 	%r5674, %r7324, %r5672, %p12;
	// begin inline asm
	{mul.f16x2 %r5673,%r5674,%r7615;
}
	// end inline asm
	selp.b32 	%r5677, %r7328, %r5672, %p12;
	// begin inline asm
	{mul.f16x2 %r5676,%r5677,%r7617;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5679, {low,high};}

	// end inline asm
	selp.b32 	%r5681, %r7324, %r5679, %p12;
	// begin inline asm
	{mul.f16x2 %r5680,%r5681,%r7632;
}
	// end inline asm
	selp.b32 	%r5684, %r7328, %r5679, %p12;
	// begin inline asm
	{mul.f16x2 %r5683,%r5684,%r7633;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5686,%r7473,%r3647;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5689,%r3758,%r3604;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5692,%r5686,%r5689;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5695,%r7232,%r5692;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5698,%r7472,%r5695;
}
	// end inline asm
	@%p12 bra 	$L__BB0_606;

	mov.u32 	%r7472, %r5698;

$L__BB0_606:
	// begin inline asm
	{sub.f16x2 %r5701,%r7468,%r3713;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5704,%r3792,%r3681;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5707,%r5701,%r5704;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5710,%r7232,%r5707;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5713,%r7467,%r5710;
}
	// end inline asm
	@%p12 bra 	$L__BB0_608;

	mov.u32 	%r7467, %r5713;

$L__BB0_608:
	// begin inline asm
	{sub.f16x2 %r5716,%r7460,%r3880;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5719,%r7474,%r3837;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5722,%r5716,%r5719;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5725,%r7232,%r5722;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5728,%r7459,%r5725;
}
	// end inline asm
	@%p12 bra 	$L__BB0_610;

	mov.u32 	%r7459, %r5728;

$L__BB0_610:
	// begin inline asm
	{sub.f16x2 %r5731,%r7457,%r3946;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5734,%r7469,%r3914;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5737,%r5731,%r5734;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5740,%r7232,%r5737;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5743,%r7456,%r5740;
}
	// end inline asm
	@%p12 bra 	$L__BB0_612;

	mov.u32 	%r7456, %r5743;

$L__BB0_612:
	// begin inline asm
	{sub.f16x2 %r5746,%r7468,%r7473;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5749,%r7323,%r5746;
}
	// end inline asm
	@%p12 bra 	$L__BB0_614;
	bra.uni 	$L__BB0_613;

$L__BB0_614:
	// begin inline asm
	{neg.f16x2 %r7821,%r5533;
}
	// end inline asm
	bra.uni 	$L__BB0_615;

$L__BB0_613:
	// begin inline asm
	{mul.f16x2 %r7821,%r7324,%r5746;
}
	// end inline asm

$L__BB0_615:
	mov.u32 	%r5760, 31;
	mov.u32 	%r5762, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5758,%r7821,%r5760,%r2239,%r5762;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5763,%r5749,%r5758;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5766,%r7561,%r7567;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5769,%r5766,%r5763;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5772,%r7232,%r5769;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7451,%r5533,%r5772;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5778,%r7469,%r7474;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5781,%r7323,%r5778;
}
	// end inline asm
	mov.u32 	%r7822, %r5540;
	@%p12 bra 	$L__BB0_617;

	// begin inline asm
	{mul.f16x2 %r7822,%r7324,%r5778;
}
	// end inline asm

$L__BB0_617:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5790,%r7822,%r5760,%r2239,%r5762;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5795,%r5781,%r5790;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5798,%r7549,%r7567;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5801,%r5795,%r5798;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5804,%r7232,%r5801;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7450,%r5540,%r5804;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5810,%r7453,%r7473;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5813,%r7464,%r7474;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5816,%r5810,%r5813;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5819,%r7232,%r5816;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5822,%r7449,%r5819;
}
	// end inline asm
	@%p12 bra 	$L__BB0_619;

	mov.u32 	%r7449, %r5822;

$L__BB0_619:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7473;
 mov.b16 %rs65, high;}
	// end inline asm
	mov.u32 	%r5833, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r5829,%r7473,%r416,%r2239,%r5833;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5829;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5835, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5836,%r5835,%r7468;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5839,%r7327,%r5836;
}
	// end inline asm
	@%p12 bra 	$L__BB0_621;
	bra.uni 	$L__BB0_620;

$L__BB0_621:
	// begin inline asm
	{neg.f16x2 %r7824,%r5536;
}
	// end inline asm
	bra.uni 	$L__BB0_622;

$L__BB0_620:
	// begin inline asm
	{mul.f16x2 %r7824,%r7328,%r5836;
}
	// end inline asm

$L__BB0_622:
	mov.u32 	%r5852, 31;
	mov.u32 	%r5876, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5850,%r7824,%r5852,%r2239,%r5876;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5855,%r5839,%r5850;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5858,%r7558,%r7564;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5861,%r5858,%r5855;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5864,%r7232,%r5861;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7442,%r5536,%r5864;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7474;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5872,%r7474,%r416,%r2239,%r5876;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5872;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5878, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5879,%r5878,%r7469;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5882,%r7327,%r5879;
}
	// end inline asm
	mov.u32 	%r7825, %r5543;
	@%p12 bra 	$L__BB0_624;

	// begin inline asm
	{mul.f16x2 %r7825,%r7328,%r5879;
}
	// end inline asm

$L__BB0_624:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5893,%r7825,%r5852,%r2239,%r5876;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5898,%r5882,%r5893;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5901,%r7546,%r7564;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5904,%r5898,%r5901;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5907,%r7232,%r5904;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7441,%r5543,%r5907;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5913,%r7444,%r7468;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5916,%r7462,%r7469;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5919,%r5913,%r5916;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5922,%r7232,%r5919;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5925,%r7440,%r5922;
}
	// end inline asm
	@%p12 bra 	$L__BB0_626;

	mov.u32 	%r7440, %r5925;

$L__BB0_626:
	// begin inline asm
	{sub.f16x2 %r5930,%r7462,%r7464;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5933,%r7323,%r5930;
}
	// end inline asm
	mov.u32 	%r7827, %r5554;
	@%p12 bra 	$L__BB0_628;

	// begin inline asm
	{mul.f16x2 %r7827,%r7324,%r5930;
}
	// end inline asm

$L__BB0_628:
	mov.u32 	%r5942, 31;
	mov.u32 	%r5944, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5940,%r7827,%r5942,%r2239,%r5944;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5945,%r5933,%r5940;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5948,%r7543,%r7561;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5951,%r5945,%r5948;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5954,%r7232,%r5951;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7433,%r5554,%r5954;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5960,%r7435,%r4218;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5963,%r4359,%r7464;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5966,%r5960,%r5963;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5969,%r7232,%r5966;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5972,%r7432,%r5969;
}
	// end inline asm
	@%p12 bra 	$L__BB0_630;

	mov.u32 	%r7432, %r5972;

$L__BB0_630:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7464;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5979,%r7464,%r416,%r2239,%r5944;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5979;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5985, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5986,%r5985,%r7462;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5989,%r7327,%r5986;
}
	// end inline asm
	mov.u32 	%r7829, %r5557;
	@%p12 bra 	$L__BB0_632;

	// begin inline asm
	{mul.f16x2 %r7829,%r7328,%r5986;
}
	// end inline asm

$L__BB0_632:
	mov.u32 	%r6000, 31;
	mov.u32 	%r6002, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5998,%r7829,%r6000,%r2239,%r6002;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6003,%r5989,%r5998;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6006,%r7540,%r7558;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6009,%r6003,%r6006;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6012,%r7232,%r6009;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7425,%r5557,%r6012;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6018,%r7427,%r4299;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6021,%r4393,%r7462;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6024,%r6018,%r6021;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6027,%r7232,%r6024;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6030,%r7424,%r6027;
}
	// end inline asm
	@%p12 bra 	$L__BB0_634;

	mov.u32 	%r7424, %r6030;

$L__BB0_634:
	// begin inline asm
	{sub.f16x2 %r6035,%r7457,%r7460;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6038,%r7323,%r6035;
}
	// end inline asm
	@%p12 bra 	$L__BB0_636;
	bra.uni 	$L__BB0_635;

$L__BB0_636:
	// begin inline asm
	{neg.f16x2 %r7831,%r5568;
}
	// end inline asm
	bra.uni 	$L__BB0_637;

$L__BB0_635:
	// begin inline asm
	{mul.f16x2 %r7831,%r7324,%r6035;
}
	// end inline asm

$L__BB0_637:
	mov.u32 	%r6049, 31;
	mov.u32 	%r6051, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6047,%r7831,%r6049,%r2239,%r6051;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6052,%r6038,%r6047;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6055,%r7549,%r7554;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6058,%r6055,%r6052;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6061,%r7232,%r6058;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7415,%r5568,%r6061;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6067,%r7660,%r7661;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6070,%r7323,%r6067;
}
	// end inline asm
	mov.u32 	%r7832, %r5575;
	@%p12 bra 	$L__BB0_639;

	// begin inline asm
	{mul.f16x2 %r7832,%r7324,%r6067;
}
	// end inline asm

$L__BB0_639:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6079,%r7832,%r6049,%r2239,%r6051;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6084,%r6070,%r6079;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6087,%r7656,%r7554;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6090,%r6084,%r6087;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6093,%r7232,%r6090;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7414,%r5575,%r6093;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6099,%r7657,%r7460;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6102,%r7454,%r7661;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6105,%r6099,%r6102;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6108,%r7232,%r6105;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6111,%r7413,%r6108;
}
	// end inline asm
	@%p12 bra 	$L__BB0_641;

	mov.u32 	%r7413, %r6111;

$L__BB0_641:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7460;
 mov.b16 %rs77, high;}
	// end inline asm
	mov.u32 	%r6122, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6118,%r7460,%r416,%r2239,%r6122;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6118;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6124, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6125,%r6124,%r7457;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6128,%r7327,%r6125;
}
	// end inline asm
	@%p12 bra 	$L__BB0_643;
	bra.uni 	$L__BB0_642;

$L__BB0_643:
	// begin inline asm
	{neg.f16x2 %r7834,%r5571;
}
	// end inline asm
	bra.uni 	$L__BB0_644;

$L__BB0_642:
	// begin inline asm
	{mul.f16x2 %r7834,%r7328,%r6125;
}
	// end inline asm

$L__BB0_644:
	mov.u32 	%r6141, 31;
	mov.u32 	%r6165, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6139,%r7834,%r6141,%r2239,%r6165;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6144,%r6128,%r6139;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6147,%r7546,%r7552;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6150,%r6147,%r6144;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6153,%r7232,%r6150;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7410,%r5571,%r6153;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7661;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6161,%r7661,%r416,%r2239,%r6165;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6161;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6167, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6168,%r6167,%r7660;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6171,%r7327,%r6168;
}
	// end inline asm
	mov.u32 	%r7835, %r5578;
	@%p12 bra 	$L__BB0_646;

	// begin inline asm
	{mul.f16x2 %r7835,%r7328,%r6168;
}
	// end inline asm

$L__BB0_646:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6182,%r7835,%r6141,%r2239,%r6165;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6187,%r6171,%r6182;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6190,%r7654,%r7552;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6193,%r6187,%r6190;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6196,%r7232,%r6193;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7409,%r5578,%r6196;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6202,%r7655,%r7457;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6205,%r7445,%r7660;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6208,%r6202,%r6205;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6211,%r7232,%r6208;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6214,%r7408,%r6211;
}
	// end inline asm
	@%p12 bra 	$L__BB0_648;

	mov.u32 	%r7408, %r6214;

$L__BB0_648:
	// begin inline asm
	{sub.f16x2 %r6219,%r7444,%r7453;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6222,%r7323,%r6219;
}
	// end inline asm
	@%p12 bra 	$L__BB0_650;
	bra.uni 	$L__BB0_649;

$L__BB0_650:
	// begin inline asm
	{neg.f16x2 %r7837,%r5589;
}
	// end inline asm
	bra.uni 	$L__BB0_651;

$L__BB0_649:
	// begin inline asm
	{mul.f16x2 %r7837,%r7324,%r6219;
}
	// end inline asm

$L__BB0_651:
	mov.u32 	%r6233, 31;
	mov.u32 	%r6235, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6231,%r7837,%r6233,%r2239,%r6235;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6236,%r6222,%r6231;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6239,%r7543,%r7549;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6242,%r6239,%r6236;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6245,%r7232,%r6242;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7405,%r5589,%r6245;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6251,%r7445,%r7454;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6254,%r7323,%r6251;
}
	// end inline asm
	mov.u32 	%r7838, %r5596;
	@%p12 bra 	$L__BB0_653;

	// begin inline asm
	{mul.f16x2 %r7838,%r7324,%r6251;
}
	// end inline asm

$L__BB0_653:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6263,%r7838,%r6233,%r2239,%r6235;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6268,%r6254,%r6263;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6271,%r7536,%r7549;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6274,%r6268,%r6271;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6277,%r7232,%r6274;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7404,%r5596,%r6277;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6283,%r7407,%r7453;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6286,%r7436,%r7454;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6289,%r6283,%r6286;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6292,%r7232,%r6289;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6295,%r7403,%r6292;
}
	// end inline asm
	@%p12 bra 	$L__BB0_655;

	mov.u32 	%r7403, %r6295;

$L__BB0_655:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7453;
 mov.b16 %rs85, high;}
	// end inline asm
	mov.u32 	%r6306, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6302,%r7453,%r416,%r2239,%r6306;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6302;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6308, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6309,%r6308,%r7444;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6312,%r7327,%r6309;
}
	// end inline asm
	@%p12 bra 	$L__BB0_657;
	bra.uni 	$L__BB0_656;

$L__BB0_657:
	// begin inline asm
	{neg.f16x2 %r7840,%r5592;
}
	// end inline asm
	bra.uni 	$L__BB0_658;

$L__BB0_656:
	// begin inline asm
	{mul.f16x2 %r7840,%r7328,%r6309;
}
	// end inline asm

$L__BB0_658:
	mov.u32 	%r6325, 31;
	mov.u32 	%r6349, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6323,%r7840,%r6325,%r2239,%r6349;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6328,%r6312,%r6323;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6331,%r7540,%r7546;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6334,%r6331,%r6328;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6337,%r7232,%r6334;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7398,%r5592,%r6337;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7454;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6345,%r7454,%r416,%r2239,%r6349;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6345;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6351, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6352,%r6351,%r7445;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6355,%r7327,%r6352;
}
	// end inline asm
	mov.u32 	%r7841, %r5599;
	@%p12 bra 	$L__BB0_660;

	// begin inline asm
	{mul.f16x2 %r7841,%r7328,%r6352;
}
	// end inline asm

$L__BB0_660:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6366,%r7841,%r6325,%r2239,%r6349;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6371,%r6355,%r6366;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6374,%r7534,%r7546;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6377,%r6371,%r6374;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6380,%r7232,%r6377;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7397,%r5599,%r6380;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6386,%r7400,%r7444;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6389,%r7428,%r7445;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6392,%r6386,%r6389;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6395,%r7232,%r6392;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6398,%r7396,%r6395;
}
	// end inline asm
	@%p12 bra 	$L__BB0_662;

	mov.u32 	%r7396, %r6398;

$L__BB0_662:
	// begin inline asm
	{sub.f16x2 %r6403,%r7427,%r7435;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6406,%r7323,%r6403;
}
	// end inline asm
	@%p12 bra 	$L__BB0_664;
	bra.uni 	$L__BB0_663;

$L__BB0_664:
	// begin inline asm
	{neg.f16x2 %r7843,%r5610;
}
	// end inline asm
	bra.uni 	$L__BB0_665;

$L__BB0_663:
	// begin inline asm
	{mul.f16x2 %r7843,%r7324,%r6403;
}
	// end inline asm

$L__BB0_665:
	mov.u32 	%r6417, 31;
	mov.u32 	%r6419, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6415,%r7843,%r6417,%r2239,%r6419;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6420,%r6406,%r6415;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6423,%r7539,%r7543;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6426,%r6423,%r6420;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6429,%r7232,%r6426;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7392,%r5610,%r6429;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6435,%r7428,%r7436;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6438,%r7323,%r6435;
}
	// end inline asm
	mov.u32 	%r7844, %r5617;
	@%p12 bra 	$L__BB0_667;

	// begin inline asm
	{mul.f16x2 %r7844,%r7324,%r6435;
}
	// end inline asm

$L__BB0_667:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6447,%r7844,%r6417,%r2239,%r6419;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6452,%r6438,%r6447;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6455,%r7533,%r7543;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6458,%r6452,%r6455;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6461,%r7232,%r6458;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7391,%r5617,%r6461;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6467,%r7640,%r7435;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6470,%r7647,%r7436;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6473,%r6467,%r6470;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6476,%r7232,%r6473;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6479,%r7390,%r6476;
}
	// end inline asm
	@%p12 bra 	$L__BB0_669;

	mov.u32 	%r7390, %r6479;

$L__BB0_669:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7435;
 mov.b16 %rs93, high;}
	// end inline asm
	mov.u32 	%r6490, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6486,%r7435,%r416,%r2239,%r6490;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6486;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6492, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6493,%r6492,%r7427;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6496,%r7327,%r6493;
}
	// end inline asm
	@%p12 bra 	$L__BB0_671;
	bra.uni 	$L__BB0_670;

$L__BB0_671:
	// begin inline asm
	{neg.f16x2 %r7846,%r5613;
}
	// end inline asm
	bra.uni 	$L__BB0_672;

$L__BB0_670:
	// begin inline asm
	{mul.f16x2 %r7846,%r7328,%r6493;
}
	// end inline asm

$L__BB0_672:
	mov.u32 	%r6509, 31;
	mov.u32 	%r6533, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6507,%r7846,%r6509,%r2239,%r6533;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6512,%r6496,%r6507;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6515,%r7538,%r7540;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6518,%r6515,%r6512;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6521,%r7232,%r6518;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7387,%r5613,%r6521;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7436;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6529,%r7436,%r416,%r2239,%r6533;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6529;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6535, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6536,%r6535,%r7428;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6539,%r7327,%r6536;
}
	// end inline asm
	mov.u32 	%r7847, %r5620;
	@%p12 bra 	$L__BB0_674;

	// begin inline asm
	{mul.f16x2 %r7847,%r7328,%r6536;
}
	// end inline asm

$L__BB0_674:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6550,%r7847,%r6509,%r2239,%r6533;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6555,%r6539,%r6550;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6558,%r7532,%r7540;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6561,%r6555,%r6558;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6564,%r7232,%r6561;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7386,%r5620,%r6564;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6570,%r7638,%r7427;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6573,%r7644,%r7428;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6576,%r6570,%r6573;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6579,%r7232,%r6576;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6582,%r7385,%r6579;
}
	// end inline asm
	@%p12 bra 	$L__BB0_676;

	mov.u32 	%r7385, %r6582;

$L__BB0_676:
	// begin inline asm
	{sub.f16x2 %r6587,%r7644,%r7647;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6590,%r7323,%r6587;
}
	// end inline asm
	mov.u32 	%r7849, %r5631;
	@%p12 bra 	$L__BB0_678;

	// begin inline asm
	{mul.f16x2 %r7849,%r7324,%r6587;
}
	// end inline asm

$L__BB0_678:
	mov.u32 	%r6599, 31;
	mov.u32 	%r6623, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6597,%r7849,%r6599,%r2239,%r6623;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6602,%r6590,%r6597;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6605,%r7636,%r7539;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6608,%r6602,%r6605;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6611,%r7232,%r6608;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7381,%r5631,%r6611;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7647;
 mov.b16 %rs101, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6619,%r7647,%r416,%r2239,%r6623;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6619;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6625, {%rs101,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6626,%r6625,%r7644;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6629,%r7327,%r6626;
}
	// end inline asm
	mov.u32 	%r7850, %r5634;
	@%p12 bra 	$L__BB0_680;

	// begin inline asm
	{mul.f16x2 %r7850,%r7328,%r6626;
}
	// end inline asm

$L__BB0_680:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6640,%r7850,%r6599,%r2239,%r6623;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6645,%r6629,%r6640;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6648,%r7637,%r7538;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6651,%r6645,%r6648;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6654,%r7232,%r6651;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7377,%r5634,%r6654;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6660,%r7655,%r7657;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6663,%r7323,%r6660;
}
	// end inline asm
	@%p12 bra 	$L__BB0_682;
	bra.uni 	$L__BB0_681;

$L__BB0_682:
	// begin inline asm
	{neg.f16x2 %r7851,%r5638;
}
	// end inline asm
	bra.uni 	$L__BB0_683;

$L__BB0_681:
	// begin inline asm
	{mul.f16x2 %r7851,%r7324,%r6660;
}
	// end inline asm

$L__BB0_683:
	mov.u32 	%r6676, 31;
	mov.u32 	%r6700, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6674,%r7851,%r6676,%r2239,%r6700;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6679,%r6663,%r6674;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6682,%r7536,%r7656;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6685,%r6682,%r6679;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6688,%r7232,%r6685;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7370,%r5638,%r6688;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7657;
 mov.b16 %rs105, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6696,%r7657,%r416,%r2239,%r6700;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6696;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6702, {%rs105,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6703,%r6702,%r7655;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6706,%r7327,%r6703;
}
	// end inline asm
	@%p12 bra 	$L__BB0_685;
	bra.uni 	$L__BB0_684;

$L__BB0_685:
	// begin inline asm
	{neg.f16x2 %r7852,%r5641;
}
	// end inline asm
	bra.uni 	$L__BB0_686;

$L__BB0_684:
	// begin inline asm
	{mul.f16x2 %r7852,%r7328,%r6703;
}
	// end inline asm

$L__BB0_686:
	mov.u32 	%r6721, 31;
	mov.u32 	%r6723, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6719,%r7852,%r6721,%r2239,%r6723;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6724,%r6706,%r6719;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6727,%r7534,%r7654;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6730,%r6727,%r6724;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6733,%r7232,%r6730;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7363,%r5641,%r6733;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6739,%r7400,%r7407;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6742,%r7323,%r6739;
}
	// end inline asm
	@%p12 bra 	$L__BB0_688;
	bra.uni 	$L__BB0_687;

$L__BB0_688:
	// begin inline asm
	{neg.f16x2 %r7853,%r5645;
}
	// end inline asm
	bra.uni 	$L__BB0_689;

$L__BB0_687:
	// begin inline asm
	{mul.f16x2 %r7853,%r7324,%r6739;
}
	// end inline asm

$L__BB0_689:
	mov.u32 	%r6755, 31;
	mov.u32 	%r6757, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6753,%r7853,%r6755,%r2239,%r6757;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6758,%r6742,%r6753;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6761,%r7533,%r7536;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6764,%r6761,%r6758;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6767,%r7232,%r6764;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7357,%r5645,%r6767;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6773,%r7650,%r7651;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6776,%r7323,%r6773;
}
	// end inline asm
	mov.u32 	%r7854, %r5652;
	@%p12 bra 	$L__BB0_691;

	// begin inline asm
	{mul.f16x2 %r7854,%r7324,%r6773;
}
	// end inline asm

$L__BB0_691:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6785,%r7854,%r6755,%r2239,%r6757;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6790,%r6776,%r6785;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6793,%r7653,%r7536;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6796,%r6790,%r6793;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6799,%r7232,%r6796;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7356,%r5652,%r6799;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6805,%r7642,%r7407;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6808,%r7641,%r7651;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6811,%r6805,%r6808;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6814,%r7232,%r6811;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6817,%r7355,%r6814;
}
	// end inline asm
	@%p12 bra 	$L__BB0_693;

	mov.u32 	%r7355, %r6817;

$L__BB0_693:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7407;
 mov.b16 %rs109, high;}
	// end inline asm
	mov.u32 	%r6828, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6824,%r7407,%r416,%r2239,%r6828;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6824;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6830, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6831,%r6830,%r7400;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6834,%r7327,%r6831;
}
	// end inline asm
	@%p12 bra 	$L__BB0_695;
	bra.uni 	$L__BB0_694;

$L__BB0_695:
	// begin inline asm
	{neg.f16x2 %r7856,%r5648;
}
	// end inline asm
	bra.uni 	$L__BB0_696;

$L__BB0_694:
	// begin inline asm
	{mul.f16x2 %r7856,%r7328,%r6831;
}
	// end inline asm

$L__BB0_696:
	mov.u32 	%r6847, 31;
	mov.u32 	%r6871, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6845,%r7856,%r6847,%r2239,%r6871;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6850,%r6834,%r6845;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6853,%r7532,%r7534;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6856,%r6853,%r6850;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6859,%r7232,%r6856;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7350,%r5648,%r6859;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7651;
 mov.b16 %rs113, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6867,%r7651,%r416,%r2239,%r6871;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6867;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6873, {%rs113,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6874,%r6873,%r7650;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6877,%r7327,%r6874;
}
	// end inline asm
	mov.u32 	%r7857, %r5655;
	@%p12 bra 	$L__BB0_698;

	// begin inline asm
	{mul.f16x2 %r7857,%r7328,%r6874;
}
	// end inline asm

$L__BB0_698:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6888,%r7857,%r6847,%r2239,%r6871;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6893,%r6877,%r6888;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6896,%r7659,%r7534;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6899,%r6893,%r6896;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6902,%r7232,%r6899;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7349,%r5655,%r6902;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6908,%r7645,%r7400;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6911,%r7639,%r7650;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6914,%r6908,%r6911;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6917,%r7232,%r6914;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6920,%r7348,%r6917;
}
	// end inline asm
	@%p12 bra 	$L__BB0_700;

	mov.u32 	%r7348, %r6920;

$L__BB0_700:
	// begin inline asm
	{sub.f16x2 %r6925,%r7638,%r7640;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6928,%r7323,%r6925;
}
	// end inline asm
	@%p12 bra 	$L__BB0_702;
	bra.uni 	$L__BB0_701;

$L__BB0_702:
	// begin inline asm
	{neg.f16x2 %r7859,%r5666;
}
	// end inline asm
	bra.uni 	$L__BB0_703;

$L__BB0_701:
	// begin inline asm
	{mul.f16x2 %r7859,%r7324,%r6925;
}
	// end inline asm

$L__BB0_703:
	mov.u32 	%r6939, 31;
	mov.u32 	%r6941, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6937,%r7859,%r6939,%r2239,%r6941;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6942,%r6928,%r6937;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6945,%r7636,%r7533;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6948,%r6945,%r6942;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6951,%r7232,%r6948;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7343,%r5666,%r6951;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6957,%r7639,%r7641;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6960,%r7323,%r6957;
}
	// end inline asm
	mov.u32 	%r7860, %r5673;
	@%p12 bra 	$L__BB0_705;

	// begin inline asm
	{mul.f16x2 %r7860,%r7324,%r6957;
}
	// end inline asm

$L__BB0_705:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6969,%r7860,%r6939,%r2239,%r6941;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6974,%r6960,%r6969;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6977,%r7648,%r7533;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6980,%r6974,%r6977;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6983,%r7232,%r6980;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7342,%r5673,%r6983;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7640;
 mov.b16 %rs117, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6991,%r7640,%r416,%r2239,%r6941;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6991;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6997, {%rs117,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6998,%r6997,%r7638;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7001,%r7327,%r6998;
}
	// end inline asm
	@%p12 bra 	$L__BB0_707;
	bra.uni 	$L__BB0_706;

$L__BB0_707:
	// begin inline asm
	{neg.f16x2 %r7861,%r5669;
}
	// end inline asm
	bra.uni 	$L__BB0_708;

$L__BB0_706:
	// begin inline asm
	{mul.f16x2 %r7861,%r7328,%r6998;
}
	// end inline asm

$L__BB0_708:
	mov.u32 	%r7016, 31;
	mov.u32 	%r7040, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7014,%r7861,%r7016,%r2239,%r7040;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7019,%r7001,%r7014;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7022,%r7637,%r7532;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7025,%r7022,%r7019;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7028,%r7232,%r7025;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7335,%r5669,%r7028;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7641;
 mov.b16 %rs121, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7036,%r7641,%r416,%r2239,%r7040;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7036;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7042, {%rs121,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7043,%r7042,%r7639;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7046,%r7327,%r7043;
}
	// end inline asm
	mov.u32 	%r7862, %r5676;
	@%p12 bra 	$L__BB0_710;

	// begin inline asm
	{mul.f16x2 %r7862,%r7328,%r7043;
}
	// end inline asm

$L__BB0_710:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7057,%r7862,%r7016,%r2239,%r7040;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7062,%r7046,%r7057;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7065,%r7649,%r7532;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7068,%r7062,%r7065;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7071,%r7232,%r7068;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7334,%r5676,%r7071;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7077,%r7645,%r7642;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7080,%r7323,%r7077;
}
	// end inline asm
	@%p12 bra 	$L__BB0_712;
	bra.uni 	$L__BB0_711;

$L__BB0_712:
	// begin inline asm
	{neg.f16x2 %r7863,%r5680;
}
	// end inline asm
	bra.uni 	$L__BB0_713;

$L__BB0_711:
	// begin inline asm
	{mul.f16x2 %r7863,%r7324,%r7077;
}
	// end inline asm

$L__BB0_713:
	mov.u32 	%r7093, 31;
	mov.u32 	%r7117, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7091,%r7863,%r7093,%r2239,%r7117;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7096,%r7080,%r7091;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7099,%r7648,%r7653;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7102,%r7099,%r7096;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7105,%r7232,%r7102;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7366,%r5680,%r7105;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7642;
 mov.b16 %rs125, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7113,%r7642,%r416,%r2239,%r7117;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7113;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7119, {%rs125,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7120,%r7119,%r7645;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7123,%r7327,%r7120;
}
	// end inline asm
	@%p12 bra 	$L__BB0_715;
	bra.uni 	$L__BB0_714;

$L__BB0_715:
	// begin inline asm
	{neg.f16x2 %r7864,%r5683;
}
	// end inline asm
	bra.uni 	$L__BB0_716;

$L__BB0_714:
	// begin inline asm
	{mul.f16x2 %r7864,%r7328,%r7120;
}
	// end inline asm

$L__BB0_716:
	mov.u32 	%r7138, 31;
	mov.u32 	%r7140, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7136,%r7864,%r7138,%r2239,%r7140;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7141,%r7123,%r7136;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7144,%r7649,%r7659;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7147,%r7144,%r7141;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7150,%r7232,%r7147;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7412,%r5683,%r7150;
}
	// end inline asm
	bar.sync 	0;
	@%p301 bra 	$L__BB0_719;

	setp.ne.s32 	%p380, %r24, %r2137;
	shl.b32 	%r7159, %r24, 8;
	shl.b32 	%r7163, %r1733, 8;
	or.b32  	%r7164, %r7163, 128;
	mad.lo.s32 	%r7165, %r7164, %r23, %r2140;
	add.s32 	%r7166, %r7165, %r7159;
	shl.b32 	%r7167, %r7166, 2;
	mov.u32 	%r7168, _ZN6kernel5shmemE;
	add.s32 	%r7169, %r7168, %r7167;
	shl.b32 	%r7170, %r28, 4;
	add.s32 	%r1729, %r7169, %r7170;
	st.shared.v4.u32 	[%r1729], {%r7414, %r7409, %r7415, %r7410};
	st.shared.v4.u32 	[%r1729+512], {%r7459, %r7456, %r7450, %r7441};
	@%p380 bra 	$L__BB0_719;

	st.shared.v4.u32 	[%r1729+1024], {%r7451, %r7442, %r7472, %r7467};

$L__BB0_719:
	setp.eq.s32 	%p378, %r24, %r2137;
	@%p378 bra 	$L__BB0_721;

	mad.lo.s32 	%r7175, %r52, %r24, %r2217;
	mad.lo.s32 	%r7178, %r2135, %r2137, %r7175;
	mad.lo.s32 	%r7181, %r2133, %r2132, %r7178;
	shl.b32 	%r7182, %r7181, 2;
	mov.u32 	%r7183, _ZN6kernel5shmemE;
	add.s32 	%r7184, %r7183, %r7182;
	shl.b32 	%r7185, %r28, 4;
	add.s32 	%r7186, %r7184, %r7185;
	st.shared.v4.u32 	[%r7186], {%r7451, %r7442, %r7472, %r7467};
	st.shared.v4.u32 	[%r7186+512], {%r7433, %r7425, %r7392, %r7387};
	st.shared.v4.u32 	[%r7186+1024], {%r7432, %r7424, %r7381, %r7377};

$L__BB0_721:
	setp.ne.s32 	%p379, %r23, %r2132;
	ld.param.u64 	%rd537, [%rd1+56];
	cvta.to.global.u64 	%rd39, %rd537;
	@%p379 bra 	$L__BB0_723;

	mad.lo.s32 	%r7188, %r654, %r1735, %r26;
	mul.lo.s32 	%r7189, %r7188, %r1733;
	mul.lo.s32 	%r7190, %r7189, 768;
	add.s32 	%r7191, %r1733, %r24;
	mad.lo.s32 	%r7192, %r7191, 384, %r7190;
	add.s32 	%r7193, %r7192, -128;
	mul.wide.s32 	%rd538, %r7193, 4;
	add.s64 	%rd539, %rd39, %rd538;
	add.s64 	%rd541, %rd539, %rd273;
	st.global.v4.u32 	[%rd541+512], {%r7414, %r7409, %r7415, %r7410};
	st.global.v4.u32 	[%rd541+1024], {%r7459, %r7456, %r7450, %r7441};
	st.global.v4.u32 	[%rd541+1536], {%r7451, %r7442, %r7472, %r7467};

$L__BB0_723:
	setp.ne.s32 	%p381, %r24, %r2137;
	@%p381 bra 	$L__BB0_726;

	mad.lo.s32 	%r7195, %r655, %r1734, %r25;
	mad.lo.s32 	%r7199, %r7195, %r1789, %r413;
	mul.wide.s32 	%rd542, %r7199, 4;
	add.s64 	%rd543, %rd39, %rd542;
	add.s64 	%rd40, %rd543, %rd273;
	st.global.v4.u32 	[%rd40], {%r7451, %r7442, %r7472, %r7467};
	st.global.v4.u32 	[%rd40+512], {%r7433, %r7425, %r7392, %r7387};
	st.global.v4.u32 	[%rd40+1024], {%r7432, %r7424, %r7381, %r7377};
	@%p205 bra 	$L__BB0_726;

	st.global.v4.u32 	[%rd40+1536], {%r7606, %r7609, %r7613, %r7612};

$L__BB0_726:
	rem.s32 	%r7200, %r7493, %r1736;
	setp.eq.s32 	%p372, %r7200, 0;
	@%p372 bra 	$L__BB0_728;

	bar.sync 	0;
	bra.uni 	$L__BB0_735;

$L__BB0_728:
	@%p147 bra 	$L__BB0_730;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_730:
	bar.sync 	0;
	@%p148 bra 	$L__BB0_734;

	membar.gl;
	add.s64 	%rd545, %rd24, 4;
	setp.eq.s32 	%p375, %r408, %r409;
	mov.u32 	%r7213, -2147483647;
	sub.s32 	%r7214, %r7213, %r407;
	selp.b32 	%r7215, %r7214, 1, %p375;
	atom.add.u32 	%r1730, [%rd545], %r7215;

$L__BB0_732:
	ld.volatile.u32 	%r7216, [%rd24+4];
	xor.b32  	%r7217, %r7216, %r1730;
	setp.gt.s32 	%p376, %r7217, -1;
	@%p376 bra 	$L__BB0_732;

	membar.gl;

$L__BB0_734:
	bar.sync 	0;

$L__BB0_735:
	add.s32 	%r7493, %r7493, 1;
	setp.lt.s32 	%p377, %r7493, %r31;
	mov.u32 	%r7607, %r7773;
	mov.u32 	%r7608, %r7774;
	mov.u32 	%r7610, %r7776;
	mov.u32 	%r7611, %r7777;
	mov.u32 	%r7618, %r7788;
	mov.u32 	%r7619, %r7789;
	mov.u32 	%r7620, %r7790;
	mov.u32 	%r7621, %r7791;
	mov.u32 	%r7622, %r7792;
	mov.u32 	%r7623, %r7793;
	mov.u32 	%r7624, %r7794;
	mov.u32 	%r7627, %r7797;
	mov.u32 	%r7629, %r7799;
	mov.u32 	%r7631, %r7801;
	mov.u32 	%r7421, %r477;
	mov.u32 	%r7422, %r7684;
	mov.u32 	%r7429, %r484;
	mov.u32 	%r7430, %r7686;
	mov.u32 	%r7437, %r491;
	mov.u32 	%r7446, %r499;
	mov.u32 	%r7455, %r7691;
	mov.u32 	%r7458, %r7693;
	mov.u32 	%r7461, %r529;
	mov.u32 	%r7463, %r537;
	mov.u32 	%r7465, %r544;
	mov.u32 	%r7466, %r545;
	mov.u32 	%r7470, %r553;
	mov.u32 	%r7471, %r554;
	mov.u32 	%r7614, %r7782;
	mov.u32 	%r7615, %r7783;
	mov.u32 	%r7616, %r7784;
	mov.u32 	%r7617, %r7785;
	mov.u32 	%r7632, %r7802;
	mov.u32 	%r7633, %r7803;
	@%p377 bra 	$L__BB0_302;

$L__BB0_736:
	ret;

}


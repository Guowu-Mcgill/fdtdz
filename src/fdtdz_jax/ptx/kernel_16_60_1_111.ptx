//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_60
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[144]
)
{
	.reg .pred 	%p<382>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<541>;
	.reg .b32 	%r<7869>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<561>;


	mov.b64 	%rd41, _ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd41;
	ld.param.v2.u32 	{%r1732, %r1733}, [_ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1734, %r1735}, [_ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1736, %r1737}, [_ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1738, %r1739}, [_ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1740, %r1741}, [_ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1742, %r1743}, [_ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1744, %r1745}, [_ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	mov.u32 	%r23, %tid.y;
	mov.u32 	%r24, %tid.z;
	mov.u32 	%r25, %ctaid.y;
	mov.u32 	%r26, %ctaid.z;
	mov.u32 	%r1746, 32;
	sub.s32 	%r27, %r1746, %r1739;
	mov.u32 	%r28, %tid.x;
	setp.le.s32 	%p12, %r27, %r28;
	add.s32 	%r1747, %r1745, -1;
	mad.lo.s32 	%r1748, %r1747, %r1744, %r1743;
	add.s32 	%r1749, %r1738, %r1737;
	add.s32 	%r1750, %r1749, %r1748;
	add.s32 	%r1751, %r1750, 1;
	mul.lo.s32 	%r1752, %r1732, %r1734;
	shl.b32 	%r29, %r1752, 1;
	shl.b32 	%r1753, %r1752, 2;
	div.s32 	%r1754, %r1751, %r1753;
	add.s32 	%r1755, %r1754, 1;
	mul.lo.s32 	%r1756, %r1755, %r1738;
	mul.lo.s32 	%r1757, %r1733, %r1735;
	shl.b32 	%r30, %r1757, 1;
	div.s32 	%r1758, %r1756, %r30;
	add.s32 	%r1759, %r1758, 1;
	mul.lo.s32 	%r31, %r1759, %r1737;
	@%p12 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f38, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f38;
  cvt.rn.f16.f32 high, %f38;
  mov.b32 %r7236, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f36, [%rd1+88];
	neg.f32 	%f35, %f36;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f35;
  mov.b32 %r7236, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd42, [%rd1+136];
	cvta.to.global.u64 	%rd2, %rd42;
	mad.lo.s32 	%r1762, %r1734, %r26, %r25;
	mad.lo.s32 	%r1763, %r1762, %r1733, %r24;
	mad.lo.s32 	%r1764, %r1763, %r1732, %r23;
	shl.b32 	%r35, %r1764, 5;
	add.s32 	%r7241, %r35, %r28;
	mul.lo.s32 	%r1765, %r1757, %r1752;
	shl.b32 	%r39, %r1765, 5;
	shl.b32 	%r1766, %r1739, 2;
	mov.u32 	%r1767, 128;
	sub.s32 	%r40, %r1767, %r1766;
	mul.lo.s32 	%r1768, %r1738, %r1737;
	mul.lo.s32 	%r1769, %r1768, %r1745;
	mul.lo.s32 	%r1770, %r1769, %r40;
	mul.lo.s32 	%r41, %r1770, 3;
	setp.ge.s32 	%p13, %r7241, %r41;
	@%p13 bra 	$L__BB0_10;

	not.b32 	%r1771, %r28;
	add.s32 	%r1772, %r41, %r1771;
	sub.s32 	%r1773, %r1772, %r35;
	mul.lo.s32 	%r1774, %r1757, %r1732;
	mul.lo.s32 	%r1775, %r1774, %r1734;
	shl.b32 	%r1776, %r1775, 5;
	div.u32 	%r42, %r1773, %r1776;
	add.s32 	%r1777, %r42, 1;
	and.b32  	%r7238, %r1777, 3;
	setp.eq.s32 	%p14, %r7238, 0;
	mov.u32 	%r7239, %r7241;
	@%p14 bra 	$L__BB0_7;

	mov.u32 	%r7239, %r7241;

$L__BB0_6:
	.pragma "nounroll";
	mul.wide.s32 	%rd43, %r7239, 4;
	add.s64 	%rd44, %rd2, %rd43;
	mov.u32 	%r1778, 0;
	st.global.u32 	[%rd44], %r1778;
	add.s32 	%r7239, %r7239, %r39;
	add.s32 	%r7238, %r7238, -1;
	setp.ne.s32 	%p15, %r7238, 0;
	@%p15 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p16, %r42, 3;
	@%p16 bra 	$L__BB0_10;

	mul.wide.s32 	%rd47, %r39, 4;

$L__BB0_9:
	mul.wide.s32 	%rd45, %r7239, 4;
	add.s64 	%rd46, %rd2, %rd45;
	mov.u32 	%r1779, 0;
	st.global.u32 	[%rd46], %r1779;
	add.s64 	%rd48, %rd46, %rd47;
	st.global.u32 	[%rd48], %r1779;
	add.s32 	%r1780, %r7239, %r39;
	add.s32 	%r1781, %r1780, %r39;
	add.s64 	%rd49, %rd48, %rd47;
	st.global.u32 	[%rd49], %r1779;
	add.s32 	%r1782, %r1781, %r39;
	add.s64 	%rd50, %rd49, %rd47;
	st.global.u32 	[%rd50], %r1779;
	add.s32 	%r7239, %r1782, %r39;
	setp.lt.s32 	%p17, %r7239, %r41;
	@%p17 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd51, [%rd1+56];
	cvta.to.global.u64 	%rd3, %rd51;
	sub.s32 	%r1783, %r1738, %r29;
	div.s32 	%r1784, %r1783, %r30;
	mul.lo.s32 	%r1785, %r1784, %r1737;
	sub.s32 	%r51, %r1785, %r29;
	sub.s32 	%r1786, %r1737, %r30;
	mul.lo.s32 	%r1787, %r1786, %r1734;
	mul.lo.s32 	%r52, %r1732, 384;
	add.s32 	%r1788, %r52, %r52;
	add.s32 	%r1789, %r1788, 128;
	mul.lo.s32 	%r1791, %r1757, %r51;
	mul.lo.s32 	%r53, %r1791, 768;
	mad.lo.s32 	%r54, %r1787, %r1789, %r53;
	bra.uni 	$L__BB0_11;

$L__BB0_737:
	mov.f32 	%f540, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f540;
  cvt.rn.f16.f32 high, %f540;
  mov.b32 %r7222, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd546, %r7241, 4;
	add.s64 	%rd547, %rd3, %rd546;
	st.global.u32 	[%rd547], %r7222;
	add.s32 	%r7241, %r7241, %r39;

$L__BB0_11:
	setp.lt.s32 	%p18, %r7241, %r54;
	@%p18 bra 	$L__BB0_737;

	ld.param.u64 	%rd52, [%rd1+96];
	cvta.to.global.u64 	%rd5, %rd52;
	ld.param.u64 	%rd53, [%rd1+64];
	cvta.to.global.u64 	%rd6, %rd53;
	mad.lo.s32 	%r7283, %r1732, %r25, %r23;
	mul.lo.s32 	%r58, %r1733, %r26;
	add.s32 	%r59, %r58, %r24;
	setp.ge.s32 	%p19, %r7283, %r1737;
	@%p19 bra 	$L__BB0_36;

	setp.gt.s32 	%p20, %r27, %r28;
	mov.u32 	%r1792, 31;
	sub.s32 	%r1793, %r1792, %r28;
	selp.b32 	%r1794, %r28, %r1793, %p20;
	shl.b32 	%r1795, %r1794, 2;
	mov.u32 	%r1796, 2;
	sub.s32 	%r60, %r1795, %r1740;
	sub.s32 	%r1797, %r1796, %r1740;
	add.s32 	%r61, %r1797, %r1795;
	shl.b32 	%r62, %r1768, 6;
	add.s32 	%r63, %r1737, -1;
	add.s32 	%r64, %r60, 1;
	add.s32 	%r65, %r61, 1;
	shl.b32 	%r66, %r28, 1;
	or.b32  	%r67, %r66, 1;
	shr.u32 	%r1799, %r67, 31;
	add.s32 	%r1800, %r67, %r1799;
	shr.s32 	%r69, %r1800, 1;
	and.b32  	%r1801, %r1800, -2;
	sub.s32 	%r1802, %r67, %r1801;
	add.s32 	%r68, %r1802, %r62;
	rem.s32 	%r1837, %r64, %r40;
	add.s32 	%r1838, %r1837, %r40;
	rem.s32 	%r92, %r1838, %r40;
	rem.s32 	%r1839, %r65, %r40;
	add.s32 	%r1840, %r1839, %r40;
	rem.s32 	%r93, %r1840, %r40;
	mov.u32 	%r7242, %r7283;

$L__BB0_14:
	setp.ge.s32 	%p21, %r59, %r1738;
	@%p21 bra 	$L__BB0_35;

	add.s32 	%r71, %r63, %r7242;
	rem.s32 	%r1803, %r60, %r40;
	add.s32 	%r1804, %r1803, %r40;
	rem.s32 	%r72, %r1804, %r40;
	rem.s32 	%r1805, %r61, %r40;
	add.s32 	%r1806, %r1805, %r40;
	rem.s32 	%r73, %r1806, %r40;
	mul.lo.s32 	%r74, %r7242, %r1738;
	add.s32 	%r1807, %r1737, %r7242;
	mul.lo.s32 	%r75, %r1807, %r1738;
	add.s32 	%r1808, %r1807, %r1737;
	mul.lo.s32 	%r76, %r1808, %r1738;
	mov.u32 	%r7243, %r59;

$L__BB0_16:
	mul.lo.s32 	%r78, %r7243, %r1737;
	add.s32 	%r79, %r78, %r7242;
	shl.b32 	%r80, %r79, 6;
	@%p20 bra 	$L__BB0_18;
	bra.uni 	$L__BB0_17;

$L__BB0_18:
	add.s32 	%r1811, %r74, %r7243;
	mul.lo.s32 	%r1812, %r1811, %r40;
	add.s32 	%r1813, %r1812, %r72;
	mul.wide.s32 	%rd54, %r1813, 4;
	add.s64 	%rd55, %rd5, %rd54;
	ld.global.f32 	%f41, [%rd55];
	add.s32 	%r1814, %r1812, %r73;
	mul.wide.s32 	%rd56, %r1814, 4;
	add.s64 	%rd57, %rd5, %rd56;
	ld.global.f32 	%f42, [%rd57];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f41;
  cvt.rn.f16.f32 high, %f42;
  mov.b32 %r7244, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_19;

$L__BB0_17:
	mov.f32 	%f40, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f40;
  cvt.rn.f16.f32 high, %f40;
  mov.b32 %r7244, {low,high};}

	// end inline asm

$L__BB0_19:
	shl.b32 	%r84, %r79, 5;
	add.s32 	%r1815, %r84, %r28;
	shl.b32 	%r1816, %r1815, 2;
	add.s32 	%r1817, %r62, %r1816;
	mul.wide.s32 	%rd58, %r1817, 4;
	add.s64 	%rd59, %rd6, %rd58;
	st.global.u32 	[%rd59], %r7244;
	@%p20 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_20;

$L__BB0_21:
	add.s32 	%r1820, %r75, %r7243;
	mul.lo.s32 	%r1821, %r1820, %r40;
	add.s32 	%r1822, %r1821, %r72;
	mul.wide.s32 	%rd60, %r1822, 4;
	add.s64 	%rd61, %rd5, %rd60;
	ld.global.f32 	%f45, [%rd61];
	add.s32 	%r1823, %r1821, %r73;
	mul.wide.s32 	%rd62, %r1823, 4;
	add.s64 	%rd63, %rd5, %rd62;
	ld.global.f32 	%f46, [%rd63];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f45;
  cvt.rn.f16.f32 high, %f46;
  mov.b32 %r7245, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_22;

$L__BB0_20:
	mov.f32 	%f44, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f44;
  cvt.rn.f16.f32 high, %f44;
  mov.b32 %r7245, {low,high};}

	// end inline asm

$L__BB0_22:
	add.s32 	%r1824, %r66, %r80;
	mul.wide.s32 	%rd64, %r1824, 4;
	add.s64 	%rd65, %rd6, %rd64;
	st.global.u32 	[%rd65], %r7245;
	@%p20 bra 	$L__BB0_24;
	bra.uni 	$L__BB0_23;

$L__BB0_24:
	add.s32 	%r1827, %r76, %r7243;
	mul.lo.s32 	%r1828, %r1827, %r40;
	add.s32 	%r1829, %r1828, %r72;
	mul.wide.s32 	%rd66, %r1829, 4;
	add.s64 	%rd67, %rd5, %rd66;
	ld.global.f32 	%f49, [%rd67];
	add.s32 	%r1830, %r1828, %r73;
	mul.wide.s32 	%rd68, %r1830, 4;
	add.s64 	%rd69, %rd5, %rd68;
	ld.global.f32 	%f50, [%rd69];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f49;
  cvt.rn.f16.f32 high, %f50;
  mov.b32 %r7246, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_25;

$L__BB0_23:
	mov.f32 	%f48, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f48;
  cvt.rn.f16.f32 high, %f48;
  mov.b32 %r7246, {low,high};}

	// end inline asm

$L__BB0_25:
	rem.s32 	%r1831, %r71, %r1737;
	add.s32 	%r1832, %r1831, %r78;
	shl.b32 	%r91, %r1832, 5;
	add.s32 	%r1833, %r91, %r28;
	shl.b32 	%r1834, %r1833, 2;
	add.s32 	%r1835, %r62, %r1834;
	add.s32 	%r1836, %r1835, 2;
	mul.wide.s32 	%rd70, %r1836, 4;
	add.s64 	%rd71, %rd6, %rd70;
	st.global.u32 	[%rd71], %r7246;
	@%p20 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1843, %r74, %r7243;
	mul.lo.s32 	%r1844, %r1843, %r40;
	add.s32 	%r1845, %r1844, %r92;
	mul.wide.s32 	%rd72, %r1845, 4;
	add.s64 	%rd73, %rd5, %rd72;
	ld.global.f32 	%f53, [%rd73];
	add.s32 	%r1846, %r1844, %r93;
	mul.wide.s32 	%rd74, %r1846, 4;
	add.s64 	%rd75, %rd5, %rd74;
	ld.global.f32 	%f54, [%rd75];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f53;
  cvt.rn.f16.f32 high, %f54;
  mov.b32 %r7247, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	mov.f32 	%f52, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f52;
  cvt.rn.f16.f32 high, %f52;
  mov.b32 %r7247, {low,high};}

	// end inline asm

$L__BB0_28:
	add.s32 	%r1847, %r84, %r69;
	shl.b32 	%r1848, %r1847, 2;
	add.s32 	%r1849, %r68, %r1848;
	mul.wide.s32 	%rd76, %r1849, 4;
	add.s64 	%rd77, %rd6, %rd76;
	st.global.u32 	[%rd77], %r7247;
	@%p20 bra 	$L__BB0_30;
	bra.uni 	$L__BB0_29;

$L__BB0_30:
	add.s32 	%r1852, %r75, %r7243;
	mul.lo.s32 	%r1853, %r1852, %r40;
	add.s32 	%r1854, %r1853, %r92;
	mul.wide.s32 	%rd78, %r1854, 4;
	add.s64 	%rd79, %rd5, %rd78;
	ld.global.f32 	%f57, [%rd79];
	add.s32 	%r1855, %r1853, %r93;
	mul.wide.s32 	%rd80, %r1855, 4;
	add.s64 	%rd81, %rd5, %rd80;
	ld.global.f32 	%f58, [%rd81];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f57;
  cvt.rn.f16.f32 high, %f58;
  mov.b32 %r7248, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_31;

$L__BB0_29:
	mov.f32 	%f56, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f56;
  cvt.rn.f16.f32 high, %f56;
  mov.b32 %r7248, {low,high};}

	// end inline asm

$L__BB0_31:
	add.s32 	%r1856, %r67, %r80;
	mul.wide.s32 	%rd82, %r1856, 4;
	add.s64 	%rd83, %rd6, %rd82;
	st.global.u32 	[%rd83], %r7248;
	@%p20 bra 	$L__BB0_33;
	bra.uni 	$L__BB0_32;

$L__BB0_33:
	add.s32 	%r1859, %r76, %r7243;
	mul.lo.s32 	%r1860, %r1859, %r40;
	add.s32 	%r1861, %r1860, %r92;
	mul.wide.s32 	%rd84, %r1861, 4;
	add.s64 	%rd85, %rd5, %rd84;
	ld.global.f32 	%f61, [%rd85];
	add.s32 	%r1862, %r1860, %r93;
	mul.wide.s32 	%rd86, %r1862, 4;
	add.s64 	%rd87, %rd5, %rd86;
	ld.global.f32 	%f62, [%rd87];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f61;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r7249, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_34;

$L__BB0_32:
	mov.f32 	%f60, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r7249, {low,high};}

	// end inline asm

$L__BB0_34:
	add.s32 	%r1863, %r91, %r69;
	shl.b32 	%r1864, %r1863, 2;
	add.s32 	%r1865, %r68, %r1864;
	add.s32 	%r1866, %r1865, 2;
	mul.wide.s32 	%rd88, %r1866, 4;
	add.s64 	%rd89, %rd6, %rd88;
	st.global.u32 	[%rd89], %r7249;
	add.s32 	%r7243, %r7243, %r1757;
	setp.lt.s32 	%p28, %r7243, %r1738;
	@%p28 bra 	$L__BB0_16;

$L__BB0_35:
	add.s32 	%r7242, %r7242, %r1752;
	setp.lt.s32 	%p29, %r7242, %r1737;
	@%p29 bra 	$L__BB0_14;

$L__BB0_36:
	ld.param.u64 	%rd90, [%rd1+104];
	cvta.to.global.u64 	%rd7, %rd90;
	ld.param.u64 	%rd91, [%rd1+72];
	cvta.to.global.u64 	%rd8, %rd91;
	@%p19 bra 	$L__BB0_120;

	shl.b32 	%r105, %r59, 1;
	mov.u64 	%rd92, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	mov.u32 	%r7250, %r7283;

$L__BB0_38:
	setp.ge.s32 	%p31, %r105, %r1738;
	@%p31 bra 	$L__BB0_119;

	mov.u32 	%r7251, %r105;

$L__BB0_40:
	setp.ne.s32 	%p32, %r28, 0;
	@%p32 bra 	$L__BB0_118;

	shr.u32 	%r1868, %r7251, 31;
	add.s32 	%r1869, %r7251, %r1868;
	shr.s32 	%r1870, %r1869, 1;
	mad.lo.s32 	%r1871, %r1870, %r1737, %r7250;
	shl.b32 	%r109, %r1871, 5;
	add.s32 	%r110, %r7251, -2;
	mul.lo.s32 	%r111, %r110, %r1737;
	add.s32 	%r1872, %r1738, %r110;
	mul.lo.s32 	%r112, %r1872, %r1737;
	add.s32 	%r1873, %r1872, %r1738;
	mul.lo.s32 	%r113, %r1873, %r1737;
	add.s32 	%r114, %r111, %r1737;
	add.s32 	%r115, %r7251, -1;
	add.s32 	%r1874, %r1738, %r115;
	mul.lo.s32 	%r116, %r1874, %r1737;
	add.s32 	%r1875, %r1874, %r1738;
	mul.lo.s32 	%r117, %r1875, %r1737;
	add.s32 	%r1876, %r1738, %r7251;
	mul.lo.s32 	%r118, %r1876, %r1737;
	add.s32 	%r1877, %r1876, %r1738;
	mul.lo.s32 	%r119, %r1877, %r1737;
	mul.lo.s32 	%r120, %r7251, %r1737;
	add.s32 	%r121, %r120, %r1737;
	add.s32 	%r122, %r7251, 1;
	add.s32 	%r1878, %r1738, %r122;
	mul.lo.s32 	%r123, %r1878, %r1737;
	add.s32 	%r1879, %r1878, %r1738;
	mul.lo.s32 	%r124, %r1879, %r1737;
	add.s32 	%r125, %r121, %r1737;
	add.s32 	%r126, %r7251, 2;
	add.s32 	%r1880, %r1738, %r126;
	mul.lo.s32 	%r127, %r1880, %r1737;
	add.s32 	%r1881, %r1880, %r1738;
	mul.lo.s32 	%r128, %r1881, %r1737;
	mov.u32 	%r7254, 0;
	mov.u64 	%rd558, %rd92;

$L__BB0_42:
	ld.global.nc.u32 	%r1882, [%rd558];
	cvt.rn.f64.s32 	%fd1, %r1882;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r130, %r1882, %r7250;
	setp.lt.s32 	%p33, %r130, %r1737;
	or.b32  	%r1883, %r110, %r130;
	setp.gt.s32 	%p34, %r1883, -1;
	and.pred  	%p35, %p33, %p34;
	setp.lt.s32 	%p36, %r110, %r1738;
	and.pred  	%p1, %p36, %p35;
	cvt.rn.f32.f64 	%f63, %fd3;
	add.f32 	%f64, %f63, 0f3E800000;
	abs.f32 	%f1, %f64;
	add.f32 	%f65, %f1, 0f40200000;
	setp.geu.f32 	%p37, %f65, 0f40000000;
	@%p37 bra 	$L__BB0_47;

	@%p1 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_44;

$L__BB0_45:
	add.s32 	%r1886, %r111, %r130;
	mul.wide.s32 	%rd93, %r1886, 4;
	add.s64 	%rd94, %rd7, %rd93;
	ld.global.f32 	%f68, [%rd94];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f68;
  mov.b32 %r7253, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_46;

$L__BB0_44:
	mov.f32 	%f67, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f67;
  cvt.rn.f16.f32 high, %f67;
  mov.b32 %r7253, {low,high};}

	// end inline asm

$L__BB0_46:
	add.s32 	%r1887, %r7254, %r109;
	mul.wide.s32 	%rd95, %r1887, 4;
	add.s64 	%rd96, %rd8, %rd95;
	st.global.u32 	[%rd96], %r7253;
	add.s32 	%r7254, %r7254, 1;

$L__BB0_47:
	cvt.rn.f32.f64 	%f69, %fd1;
	add.f32 	%f70, %f69, 0f3E800000;
	abs.f32 	%f2, %f70;
	add.f32 	%f3, %f2, 0f40000000;
	setp.geu.f32 	%p38, %f3, 0f40000000;
	@%p38 bra 	$L__BB0_52;

	@%p1 bra 	$L__BB0_50;
	bra.uni 	$L__BB0_49;

$L__BB0_50:
	add.s32 	%r1890, %r112, %r130;
	mul.wide.s32 	%rd97, %r1890, 4;
	add.s64 	%rd98, %rd7, %rd97;
	ld.global.f32 	%f73, [%rd98];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f73;
  mov.b32 %r7255, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_51;

$L__BB0_49:
	mov.f32 	%f72, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f72;
  cvt.rn.f16.f32 high, %f72;
  mov.b32 %r7255, {low,high};}

	// end inline asm

$L__BB0_51:
	add.s32 	%r1891, %r7254, %r109;
	mul.wide.s32 	%rd99, %r1891, 4;
	add.s64 	%rd100, %rd8, %rd99;
	st.global.u32 	[%rd100], %r7255;
	add.s32 	%r7254, %r7254, 1;

$L__BB0_52:
	add.f32 	%f74, %f2, 0f40200000;
	setp.geu.f32 	%p39, %f74, 0f40000000;
	@%p39 bra 	$L__BB0_57;

	@%p1 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1894, %r113, %r130;
	mul.wide.s32 	%rd101, %r1894, 4;
	add.s64 	%rd102, %rd7, %rd101;
	ld.global.f32 	%f77, [%rd102];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f77;
  mov.b32 %r7257, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	mov.f32 	%f76, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f76;
  cvt.rn.f16.f32 high, %f76;
  mov.b32 %r7257, {low,high};}

	// end inline asm

$L__BB0_56:
	add.s32 	%r1895, %r7254, %r109;
	mul.wide.s32 	%rd103, %r1895, 4;
	add.s64 	%rd104, %rd8, %rd103;
	st.global.u32 	[%rd104], %r7257;
	add.s32 	%r7254, %r7254, 1;

$L__BB0_57:
	or.b32  	%r1896, %r115, %r130;
	setp.gt.s32 	%p40, %r1896, -1;
	and.pred  	%p42, %p33, %p40;
	setp.le.s32 	%p43, %r7251, %r1738;
	and.pred  	%p2, %p43, %p42;
	add.f32 	%f4, %f1, 0f3FC00000;
	setp.geu.f32 	%p44, %f4, 0f40000000;
	@%p44 bra 	$L__BB0_62;

	@%p2 bra 	$L__BB0_60;
	bra.uni 	$L__BB0_59;

$L__BB0_60:
	add.s32 	%r1899, %r114, %r130;
	mul.wide.s32 	%rd105, %r1899, 4;
	add.s64 	%rd106, %rd7, %rd105;
	ld.global.f32 	%f80, [%rd106];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f80;
  mov.b32 %r7259, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_61;

$L__BB0_59:
	mov.f32 	%f79, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f79;
  cvt.rn.f16.f32 high, %f79;
  mov.b32 %r7259, {low,high};}

	// end inline asm

$L__BB0_61:
	add.s32 	%r1900, %r7254, %r109;
	mul.wide.s32 	%rd107, %r1900, 4;
	add.s64 	%rd108, %rd8, %rd107;
	st.global.u32 	[%rd108], %r7259;
	add.s32 	%r7254, %r7254, 1;

$L__BB0_62:
	add.f32 	%f5, %f2, 0f3F800000;
	setp.geu.f32 	%p45, %f5, 0f40000000;
	@%p45 bra 	$L__BB0_67;

	@%p2 bra 	$L__BB0_65;
	bra.uni 	$L__BB0_64;

$L__BB0_65:
	add.s32 	%r1903, %r116, %r130;
	mul.wide.s32 	%rd109, %r1903, 4;
	add.s64 	%rd110, %rd7, %rd109;
	ld.global.f32 	%f83, [%rd110];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f83;
  mov.b32 %r7261, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_66;

$L__BB0_64:
	mov.f32 	%f82, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f82;
  cvt.rn.f16.f32 high, %f82;
  mov.b32 %r7261, {low,high};}

	// end inline asm

$L__BB0_66:
	add.s32 	%r1904, %r7254, %r109;
	mul.wide.s32 	%rd111, %r1904, 4;
	add.s64 	%rd112, %rd8, %rd111;
	st.global.u32 	[%rd112], %r7261;
	add.s32 	%r7254, %r7254, 1;

$L__BB0_67:
	add.f32 	%f6, %f2, 0f3FC00000;
	setp.geu.f32 	%p46, %f6, 0f40000000;
	@%p46 bra 	$L__BB0_72;

	@%p2 bra 	$L__BB0_70;
	bra.uni 	$L__BB0_69;

$L__BB0_70:
	add.s32 	%r1907, %r117, %r130;
	mul.wide.s32 	%rd113, %r1907, 4;
	add.s64 	%rd114, %rd7, %rd113;
	ld.global.f32 	%f86, [%rd114];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f86;
  mov.b32 %r7263, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_71;

$L__BB0_69:
	mov.f32 	%f85, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f85;
  cvt.rn.f16.f32 high, %f85;
  mov.b32 %r7263, {low,high};}

	// end inline asm

$L__BB0_71:
	add.s32 	%r1908, %r7254, %r109;
	mul.wide.s32 	%rd115, %r1908, 4;
	add.s64 	%rd116, %rd8, %rd115;
	st.global.u32 	[%rd116], %r7263;
	add.s32 	%r7254, %r7254, 1;

$L__BB0_72:
	or.b32  	%r1909, %r7251, %r130;
	setp.gt.s32 	%p47, %r1909, -1;
	and.pred  	%p49, %p33, %p47;
	setp.lt.s32 	%p50, %r7251, %r1738;
	and.pred  	%p3, %p50, %p49;
	add.f32 	%f7, %f1, 0f3F000000;
	setp.geu.f32 	%p51, %f7, 0f40000000;
	@%p51 bra 	$L__BB0_77;

	@%p3 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1912, %r120, %r130;
	mul.wide.s32 	%rd117, %r1912, 4;
	add.s64 	%rd118, %rd7, %rd117;
	ld.global.f32 	%f89, [%rd118];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f89;
  mov.b32 %r7265, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f88, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f88;
  cvt.rn.f16.f32 high, %f88;
  mov.b32 %r7265, {low,high};}

	// end inline asm

$L__BB0_76:
	add.s32 	%r1913, %r7254, %r109;
	mul.wide.s32 	%rd119, %r1913, 4;
	add.s64 	%rd120, %rd8, %rd119;
	st.global.u32 	[%rd120], %r7265;
	add.s32 	%r7254, %r7254, 1;

$L__BB0_77:
	add.f32 	%f90, %f2, 0f00000000;
	setp.geu.f32 	%p52, %f90, 0f40000000;
	@%p52 bra 	$L__BB0_82;

	@%p3 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1916, %r118, %r130;
	mul.wide.s32 	%rd121, %r1916, 4;
	add.s64 	%rd122, %rd7, %rd121;
	ld.global.f32 	%f93, [%rd122];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f93;
  mov.b32 %r7267, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f92, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f92;
  cvt.rn.f16.f32 high, %f92;
  mov.b32 %r7267, {low,high};}

	// end inline asm

$L__BB0_81:
	add.s32 	%r1917, %r7254, %r109;
	mul.wide.s32 	%rd123, %r1917, 4;
	add.s64 	%rd124, %rd8, %rd123;
	st.global.u32 	[%rd124], %r7267;
	add.s32 	%r7254, %r7254, 1;

$L__BB0_82:
	add.f32 	%f8, %f2, 0f3F000000;
	setp.geu.f32 	%p53, %f8, 0f40000000;
	@%p53 bra 	$L__BB0_87;

	@%p3 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r1920, %r119, %r130;
	mul.wide.s32 	%rd125, %r1920, 4;
	add.s64 	%rd126, %rd7, %rd125;
	ld.global.f32 	%f96, [%rd126];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f96;
  mov.b32 %r7269, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f95, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f95;
  cvt.rn.f16.f32 high, %f95;
  mov.b32 %r7269, {low,high};}

	// end inline asm

$L__BB0_86:
	add.s32 	%r1921, %r7254, %r109;
	mul.wide.s32 	%rd127, %r1921, 4;
	add.s64 	%rd128, %rd8, %rd127;
	st.global.u32 	[%rd128], %r7269;
	add.s32 	%r7254, %r7254, 1;

$L__BB0_87:
	or.b32  	%r1922, %r122, %r130;
	setp.gt.s32 	%p54, %r1922, -1;
	and.pred  	%p56, %p33, %p54;
	setp.lt.s32 	%p57, %r122, %r1738;
	and.pred  	%p4, %p57, %p56;
	@%p51 bra 	$L__BB0_92;

	@%p4 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r1925, %r121, %r130;
	mul.wide.s32 	%rd129, %r1925, 4;
	add.s64 	%rd130, %rd7, %rd129;
	ld.global.f32 	%f99, [%rd130];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f99;
  mov.b32 %r7271, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f98, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f98;
  cvt.rn.f16.f32 high, %f98;
  mov.b32 %r7271, {low,high};}

	// end inline asm

$L__BB0_91:
	add.s32 	%r1926, %r7254, %r109;
	mul.wide.s32 	%rd131, %r1926, 4;
	add.s64 	%rd132, %rd8, %rd131;
	st.global.u32 	[%rd132], %r7271;
	add.s32 	%r7254, %r7254, 1;

$L__BB0_92:
	@%p45 bra 	$L__BB0_97;

	@%p4 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r1929, %r123, %r130;
	mul.wide.s32 	%rd133, %r1929, 4;
	add.s64 	%rd134, %rd7, %rd133;
	ld.global.f32 	%f102, [%rd134];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f102;
  mov.b32 %r7273, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f101, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f101;
  cvt.rn.f16.f32 high, %f101;
  mov.b32 %r7273, {low,high};}

	// end inline asm

$L__BB0_96:
	add.s32 	%r1930, %r7254, %r109;
	mul.wide.s32 	%rd135, %r1930, 4;
	add.s64 	%rd136, %rd8, %rd135;
	st.global.u32 	[%rd136], %r7273;
	add.s32 	%r7254, %r7254, 1;

$L__BB0_97:
	@%p53 bra 	$L__BB0_102;

	@%p4 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r1933, %r124, %r130;
	mul.wide.s32 	%rd137, %r1933, 4;
	add.s64 	%rd138, %rd7, %rd137;
	ld.global.f32 	%f105, [%rd138];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f105;
  mov.b32 %r7275, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f104, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f104;
  cvt.rn.f16.f32 high, %f104;
  mov.b32 %r7275, {low,high};}

	// end inline asm

$L__BB0_101:
	add.s32 	%r1934, %r7254, %r109;
	mul.wide.s32 	%rd139, %r1934, 4;
	add.s64 	%rd140, %rd8, %rd139;
	st.global.u32 	[%rd140], %r7275;
	add.s32 	%r7254, %r7254, 1;

$L__BB0_102:
	or.b32  	%r1935, %r126, %r130;
	setp.gt.s32 	%p61, %r1935, -1;
	and.pred  	%p63, %p33, %p61;
	setp.lt.s32 	%p64, %r126, %r1738;
	and.pred  	%p5, %p64, %p63;
	@%p44 bra 	$L__BB0_107;

	@%p5 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r1938, %r125, %r130;
	mul.wide.s32 	%rd141, %r1938, 4;
	add.s64 	%rd142, %rd7, %rd141;
	ld.global.f32 	%f108, [%rd142];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f108;
  mov.b32 %r7277, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f107, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f107;
  cvt.rn.f16.f32 high, %f107;
  mov.b32 %r7277, {low,high};}

	// end inline asm

$L__BB0_106:
	add.s32 	%r1939, %r7254, %r109;
	mul.wide.s32 	%rd143, %r1939, 4;
	add.s64 	%rd144, %rd8, %rd143;
	st.global.u32 	[%rd144], %r7277;
	add.s32 	%r7254, %r7254, 1;

$L__BB0_107:
	@%p38 bra 	$L__BB0_112;

	@%p5 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r1942, %r127, %r130;
	mul.wide.s32 	%rd145, %r1942, 4;
	add.s64 	%rd146, %rd7, %rd145;
	ld.global.f32 	%f111, [%rd146];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f111;
  mov.b32 %r7279, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f110, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f110;
  cvt.rn.f16.f32 high, %f110;
  mov.b32 %r7279, {low,high};}

	// end inline asm

$L__BB0_111:
	add.s32 	%r1943, %r7254, %r109;
	mul.wide.s32 	%rd147, %r1943, 4;
	add.s64 	%rd148, %rd8, %rd147;
	st.global.u32 	[%rd148], %r7279;
	add.s32 	%r7254, %r7254, 1;

$L__BB0_112:
	@%p46 bra 	$L__BB0_117;

	@%p5 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r1946, %r128, %r130;
	mul.wide.s32 	%rd149, %r1946, 4;
	add.s64 	%rd150, %rd7, %rd149;
	ld.global.f32 	%f114, [%rd150];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f114;
  mov.b32 %r7281, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f113, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f113;
  cvt.rn.f16.f32 high, %f113;
  mov.b32 %r7281, {low,high};}

	// end inline asm

$L__BB0_116:
	add.s32 	%r1947, %r7254, %r109;
	mul.wide.s32 	%rd151, %r1947, 4;
	add.s64 	%rd152, %rd8, %rd151;
	st.global.u32 	[%rd152], %r7281;
	add.s32 	%r7254, %r7254, 1;

$L__BB0_117:
	add.s64 	%rd558, %rd558, 4;
	mov.u64 	%rd153, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd154, %rd153, 24;
	setp.ne.s64 	%p68, %rd558, %rd154;
	@%p68 bra 	$L__BB0_42;

$L__BB0_118:
	add.s32 	%r7251, %r7251, %r30;
	setp.lt.s32 	%p69, %r7251, %r1738;
	@%p69 bra 	$L__BB0_40;

$L__BB0_119:
	add.s32 	%r7250, %r7250, %r1752;
	setp.lt.s32 	%p70, %r7250, %r1737;
	@%p70 bra 	$L__BB0_38;

$L__BB0_120:
	setp.eq.s32 	%p71, %r1741, 1;
	ld.param.u64 	%rd155, [%rd1+112];
	cvta.to.global.u64 	%rd11, %rd155;
	ld.param.u64 	%rd156, [%rd1+80];
	cvta.to.global.u64 	%rd12, %rd156;
	@%p71 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_121;

$L__BB0_138:
	@%p19 bra 	$L__BB0_267;

	shl.b32 	%r233, %r59, 1;
	shr.u32 	%r1993, %r1742, 31;
	add.s32 	%r1994, %r1742, %r1993;
	bfe.u32 	%r234, %r1994, 1, 1;
	mov.u64 	%rd176, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;

$L__BB0_140:
	setp.ge.s32 	%p81, %r233, %r1738;
	@%p81 bra 	$L__BB0_266;

	mov.u32 	%r7289, %r233;

$L__BB0_142:
	setp.ne.s32 	%p82, %r28, 0;
	@%p82 bra 	$L__BB0_265;

	shr.u32 	%r1996, %r7289, 31;
	add.s32 	%r1997, %r7289, %r1996;
	shr.s32 	%r1998, %r1997, 1;
	mad.lo.s32 	%r1999, %r1998, %r1737, %r7283;
	shl.b32 	%r238, %r1999, 5;
	add.s32 	%r239, %r7289, -2;
	mul.lo.s32 	%r240, %r239, %r1737;
	add.s32 	%r2000, %r1738, %r239;
	mul.lo.s32 	%r241, %r2000, %r1737;
	add.s32 	%r242, %r240, %r1737;
	add.s32 	%r243, %r7289, -1;
	add.s32 	%r2001, %r1738, %r243;
	mul.lo.s32 	%r244, %r2001, %r1737;
	add.s32 	%r2002, %r1738, %r7289;
	mul.lo.s32 	%r245, %r2002, %r1737;
	mul.lo.s32 	%r246, %r7289, %r1737;
	add.s32 	%r247, %r246, %r1737;
	add.s32 	%r248, %r7289, 1;
	add.s32 	%r2003, %r1738, %r248;
	mul.lo.s32 	%r249, %r2003, %r1737;
	add.s32 	%r250, %r247, %r1737;
	add.s32 	%r251, %r7289, 2;
	add.s32 	%r2004, %r1738, %r251;
	mul.lo.s32 	%r252, %r2004, %r1737;
	mov.u32 	%r7293, 0;
	mov.u64 	%rd559, 24;
	mov.u64 	%rd560, %rd176;

$L__BB0_144:
	ld.global.nc.u32 	%r2005, [%rd560];
	cvt.rn.f64.s32 	%fd2, %r2005;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r254, %r2005, %r7283;
	setp.lt.s32 	%p83, %r254, %r1737;
	or.b32  	%r2006, %r239, %r254;
	setp.gt.s32 	%p84, %r2006, -1;
	and.pred  	%p85, %p83, %p84;
	setp.lt.s32 	%p86, %r239, %r1738;
	and.pred  	%p6, %p86, %p85;
	cvt.rn.f32.f64 	%f131, %fd4;
	add.f32 	%f132, %f131, 0f3E800000;
	abs.f32 	%f9, %f132;
	add.f32 	%f133, %f9, 0f40200000;
	setp.geu.f32 	%p87, %f133, 0f40000000;
	@%p87 bra 	$L__BB0_156;

	@%p6 bra 	$L__BB0_147;
	bra.uni 	$L__BB0_146;

$L__BB0_147:
	setp.eq.s32 	%p88, %r234, 0;
	add.s32 	%r2008, %r240, %r254;
	shl.b32 	%r2009, %r2008, 1;
	mul.wide.s32 	%rd177, %r2009, 4;
	add.s64 	%rd178, %rd11, %rd177;
	ld.global.f32 	%f10, [%rd178];
	@%p88 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_148;

$L__BB0_149:
	mov.f32 	%f139, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f10;
  cvt.rn.f16.f32 high, %f139;
  mov.b32 %r7291, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_146:
	mov.f32 	%f135, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f135;
  cvt.rn.f16.f32 high, %f135;
  mov.b32 %r7291, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_148:
	mov.f32 	%f136, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f136;
  cvt.rn.f16.f32 high, %f10;
  mov.b32 %r7291, {low,high};}

	// end inline asm

$L__BB0_150:
	add.s32 	%r259, %r7293, %r238;
	mul.wide.s32 	%rd179, %r259, 4;
	add.s64 	%rd180, %rd12, %rd179;
	st.global.u32 	[%rd180], %r7291;
	@%p6 bra 	$L__BB0_152;
	bra.uni 	$L__BB0_151;

$L__BB0_152:
	setp.eq.s32 	%p89, %r234, 0;
	add.s32 	%r2013, %r241, %r254;
	shl.b32 	%r2014, %r2013, 1;
	mul.wide.s32 	%rd181, %r2014, 4;
	add.s64 	%rd182, %rd11, %rd181;
	ld.global.f32 	%f11, [%rd182];
	@%p89 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_153;

$L__BB0_154:
	mov.f32 	%f145, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f11;
  cvt.rn.f16.f32 high, %f145;
  mov.b32 %r7292, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_151:
	mov.f32 	%f141, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f141;
  cvt.rn.f16.f32 high, %f141;
  mov.b32 %r7292, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_153:
	mov.f32 	%f142, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f142;
  cvt.rn.f16.f32 high, %f11;
  mov.b32 %r7292, {low,high};}

	// end inline asm

$L__BB0_155:
	add.s32 	%r2017, %r259, 1;
	mul.wide.s32 	%rd183, %r2017, 4;
	add.s64 	%rd184, %rd12, %rd183;
	st.global.u32 	[%rd184], %r7292;
	add.s32 	%r7293, %r7293, 2;

$L__BB0_156:
	cvt.rn.f32.f64 	%f146, %fd2;
	add.f32 	%f147, %f146, 0f3E800000;
	abs.f32 	%f12, %f147;
	add.f32 	%f13, %f12, 0f40000000;
	setp.geu.f32 	%p90, %f13, 0f40000000;
	@%p90 bra 	$L__BB0_168;

	@%p6 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	setp.eq.s32 	%p91, %r234, 0;
	add.s32 	%r2019, %r240, %r254;
	shl.b32 	%r2020, %r2019, 1;
	or.b32  	%r2021, %r2020, 1;
	mul.wide.s32 	%rd185, %r2021, 4;
	add.s64 	%rd186, %rd11, %rd185;
	ld.global.f32 	%f14, [%rd186];
	@%p91 bra 	$L__BB0_161;
	bra.uni 	$L__BB0_160;

$L__BB0_161:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f14;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r7294, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_158:
	mov.f32 	%f149, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f149;
  cvt.rn.f16.f32 high, %f149;
  mov.b32 %r7294, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_160:
	mov.f32 	%f150, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f150;
  cvt.rn.f16.f32 high, %f14;
  mov.b32 %r7294, {low,high};}

	// end inline asm

$L__BB0_162:
	add.s32 	%r270, %r7293, %r238;
	mul.wide.s32 	%rd187, %r270, 4;
	add.s64 	%rd188, %rd12, %rd187;
	st.global.u32 	[%rd188], %r7294;
	@%p6 bra 	$L__BB0_164;
	bra.uni 	$L__BB0_163;

$L__BB0_164:
	setp.eq.s32 	%p92, %r234, 0;
	add.s32 	%r2025, %r241, %r254;
	shl.b32 	%r2026, %r2025, 1;
	or.b32  	%r2027, %r2026, 1;
	mul.wide.s32 	%rd189, %r2027, 4;
	add.s64 	%rd190, %rd11, %rd189;
	ld.global.f32 	%f15, [%rd190];
	@%p92 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_165;

$L__BB0_166:
	mov.f32 	%f159, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f15;
  cvt.rn.f16.f32 high, %f159;
  mov.b32 %r7295, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_163:
	mov.f32 	%f155, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f155;
  cvt.rn.f16.f32 high, %f155;
  mov.b32 %r7295, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_165:
	mov.f32 	%f156, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f156;
  cvt.rn.f16.f32 high, %f15;
  mov.b32 %r7295, {low,high};}

	// end inline asm

$L__BB0_167:
	add.s32 	%r2030, %r270, 1;
	mul.wide.s32 	%rd191, %r2030, 4;
	add.s64 	%rd192, %rd12, %rd191;
	st.global.u32 	[%rd192], %r7295;
	add.s32 	%r7293, %r7293, 2;

$L__BB0_168:
	or.b32  	%r2031, %r243, %r254;
	setp.gt.s32 	%p93, %r2031, -1;
	and.pred  	%p95, %p83, %p93;
	setp.le.s32 	%p96, %r7289, %r1738;
	and.pred  	%p7, %p96, %p95;
	add.f32 	%f16, %f9, 0f3FC00000;
	setp.geu.f32 	%p97, %f16, 0f40000000;
	@%p97 bra 	$L__BB0_180;

	@%p7 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_170;

$L__BB0_171:
	setp.eq.s32 	%p98, %r234, 0;
	add.s32 	%r2033, %r242, %r254;
	shl.b32 	%r2034, %r2033, 1;
	mul.wide.s32 	%rd193, %r2034, 4;
	add.s64 	%rd194, %rd11, %rd193;
	ld.global.f32 	%f17, [%rd194];
	@%p98 bra 	$L__BB0_173;
	bra.uni 	$L__BB0_172;

$L__BB0_173:
	mov.f32 	%f165, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f17;
  cvt.rn.f16.f32 high, %f165;
  mov.b32 %r7297, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_170:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f161;
  mov.b32 %r7297, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_172:
	mov.f32 	%f162, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f162;
  cvt.rn.f16.f32 high, %f17;
  mov.b32 %r7297, {low,high};}

	// end inline asm

$L__BB0_174:
	add.s32 	%r281, %r7293, %r238;
	mul.wide.s32 	%rd195, %r281, 4;
	add.s64 	%rd196, %rd12, %rd195;
	st.global.u32 	[%rd196], %r7297;
	@%p7 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_175;

$L__BB0_176:
	setp.eq.s32 	%p99, %r234, 0;
	add.s32 	%r2038, %r244, %r254;
	shl.b32 	%r2039, %r2038, 1;
	mul.wide.s32 	%rd197, %r2039, 4;
	add.s64 	%rd198, %rd11, %rd197;
	ld.global.f32 	%f18, [%rd198];
	@%p99 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_177;

$L__BB0_178:
	mov.f32 	%f171, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f18;
  cvt.rn.f16.f32 high, %f171;
  mov.b32 %r7298, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_175:
	mov.f32 	%f167, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f167;
  cvt.rn.f16.f32 high, %f167;
  mov.b32 %r7298, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_177:
	mov.f32 	%f168, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f168;
  cvt.rn.f16.f32 high, %f18;
  mov.b32 %r7298, {low,high};}

	// end inline asm

$L__BB0_179:
	add.s32 	%r2042, %r281, 1;
	mul.wide.s32 	%rd199, %r2042, 4;
	add.s64 	%rd200, %rd12, %rd199;
	st.global.u32 	[%rd200], %r7298;
	add.s32 	%r7293, %r7293, 2;

$L__BB0_180:
	add.f32 	%f19, %f12, 0f3F800000;
	setp.geu.f32 	%p100, %f19, 0f40000000;
	@%p100 bra 	$L__BB0_192;

	@%p7 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_182;

$L__BB0_183:
	setp.eq.s32 	%p101, %r234, 0;
	add.s32 	%r2044, %r242, %r254;
	shl.b32 	%r2045, %r2044, 1;
	or.b32  	%r2046, %r2045, 1;
	mul.wide.s32 	%rd201, %r2046, 4;
	add.s64 	%rd202, %rd11, %rd201;
	ld.global.f32 	%f20, [%rd202];
	@%p101 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_184;

$L__BB0_185:
	mov.f32 	%f177, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f20;
  cvt.rn.f16.f32 high, %f177;
  mov.b32 %r7300, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_182:
	mov.f32 	%f173, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f173;
  cvt.rn.f16.f32 high, %f173;
  mov.b32 %r7300, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_184:
	mov.f32 	%f174, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f174;
  cvt.rn.f16.f32 high, %f20;
  mov.b32 %r7300, {low,high};}

	// end inline asm

$L__BB0_186:
	add.s32 	%r292, %r7293, %r238;
	mul.wide.s32 	%rd203, %r292, 4;
	add.s64 	%rd204, %rd12, %rd203;
	st.global.u32 	[%rd204], %r7300;
	@%p7 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_187;

$L__BB0_188:
	setp.eq.s32 	%p102, %r234, 0;
	add.s32 	%r2050, %r244, %r254;
	shl.b32 	%r2051, %r2050, 1;
	or.b32  	%r2052, %r2051, 1;
	mul.wide.s32 	%rd205, %r2052, 4;
	add.s64 	%rd206, %rd11, %rd205;
	ld.global.f32 	%f21, [%rd206];
	@%p102 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_189;

$L__BB0_190:
	mov.f32 	%f183, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f21;
  cvt.rn.f16.f32 high, %f183;
  mov.b32 %r7301, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_187:
	mov.f32 	%f179, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f179;
  cvt.rn.f16.f32 high, %f179;
  mov.b32 %r7301, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_189:
	mov.f32 	%f180, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f180;
  cvt.rn.f16.f32 high, %f21;
  mov.b32 %r7301, {low,high};}

	// end inline asm

$L__BB0_191:
	add.s32 	%r2055, %r292, 1;
	mul.wide.s32 	%rd207, %r2055, 4;
	add.s64 	%rd208, %rd12, %rd207;
	st.global.u32 	[%rd208], %r7301;
	add.s32 	%r7293, %r7293, 2;

$L__BB0_192:
	or.b32  	%r2056, %r7289, %r254;
	setp.gt.s32 	%p103, %r2056, -1;
	and.pred  	%p105, %p83, %p103;
	setp.lt.s32 	%p106, %r7289, %r1738;
	and.pred  	%p8, %p106, %p105;
	add.f32 	%f22, %f9, 0f3F000000;
	setp.geu.f32 	%p107, %f22, 0f40000000;
	@%p107 bra 	$L__BB0_204;

	@%p8 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_194;

$L__BB0_195:
	setp.eq.s32 	%p108, %r234, 0;
	add.s32 	%r2058, %r246, %r254;
	shl.b32 	%r2059, %r2058, 1;
	mul.wide.s32 	%rd209, %r2059, 4;
	add.s64 	%rd210, %rd11, %rd209;
	ld.global.f32 	%f23, [%rd210];
	@%p108 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_196;

$L__BB0_197:
	mov.f32 	%f189, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f23;
  cvt.rn.f16.f32 high, %f189;
  mov.b32 %r7303, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_194:
	mov.f32 	%f185, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f185;
  cvt.rn.f16.f32 high, %f185;
  mov.b32 %r7303, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_196:
	mov.f32 	%f186, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f186;
  cvt.rn.f16.f32 high, %f23;
  mov.b32 %r7303, {low,high};}

	// end inline asm

$L__BB0_198:
	add.s32 	%r303, %r7293, %r238;
	mul.wide.s32 	%rd211, %r303, 4;
	add.s64 	%rd212, %rd12, %rd211;
	st.global.u32 	[%rd212], %r7303;
	@%p8 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_199;

$L__BB0_200:
	setp.eq.s32 	%p109, %r234, 0;
	add.s32 	%r2063, %r245, %r254;
	shl.b32 	%r2064, %r2063, 1;
	mul.wide.s32 	%rd213, %r2064, 4;
	add.s64 	%rd214, %rd11, %rd213;
	ld.global.f32 	%f24, [%rd214];
	@%p109 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_201;

$L__BB0_202:
	mov.f32 	%f195, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f24;
  cvt.rn.f16.f32 high, %f195;
  mov.b32 %r7304, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_199:
	mov.f32 	%f191, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f191;
  cvt.rn.f16.f32 high, %f191;
  mov.b32 %r7304, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_201:
	mov.f32 	%f192, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f192;
  cvt.rn.f16.f32 high, %f24;
  mov.b32 %r7304, {low,high};}

	// end inline asm

$L__BB0_203:
	add.s32 	%r2067, %r303, 1;
	mul.wide.s32 	%rd215, %r2067, 4;
	add.s64 	%rd216, %rd12, %rd215;
	st.global.u32 	[%rd216], %r7304;
	add.s32 	%r7293, %r7293, 2;

$L__BB0_204:
	add.f32 	%f196, %f12, 0f00000000;
	setp.geu.f32 	%p110, %f196, 0f40000000;
	@%p110 bra 	$L__BB0_216;

	@%p8 bra 	$L__BB0_207;
	bra.uni 	$L__BB0_206;

$L__BB0_207:
	setp.eq.s32 	%p111, %r234, 0;
	add.s32 	%r2069, %r246, %r254;
	shl.b32 	%r2070, %r2069, 1;
	or.b32  	%r2071, %r2070, 1;
	mul.wide.s32 	%rd217, %r2071, 4;
	add.s64 	%rd218, %rd11, %rd217;
	ld.global.f32 	%f25, [%rd218];
	@%p111 bra 	$L__BB0_209;
	bra.uni 	$L__BB0_208;

$L__BB0_209:
	mov.f32 	%f202, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f25;
  cvt.rn.f16.f32 high, %f202;
  mov.b32 %r7306, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_206:
	mov.f32 	%f198, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f198;
  cvt.rn.f16.f32 high, %f198;
  mov.b32 %r7306, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_208:
	mov.f32 	%f199, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f199;
  cvt.rn.f16.f32 high, %f25;
  mov.b32 %r7306, {low,high};}

	// end inline asm

$L__BB0_210:
	add.s32 	%r314, %r7293, %r238;
	mul.wide.s32 	%rd219, %r314, 4;
	add.s64 	%rd220, %rd12, %rd219;
	st.global.u32 	[%rd220], %r7306;
	@%p8 bra 	$L__BB0_212;
	bra.uni 	$L__BB0_211;

$L__BB0_212:
	setp.eq.s32 	%p112, %r234, 0;
	add.s32 	%r2075, %r245, %r254;
	shl.b32 	%r2076, %r2075, 1;
	or.b32  	%r2077, %r2076, 1;
	mul.wide.s32 	%rd221, %r2077, 4;
	add.s64 	%rd222, %rd11, %rd221;
	ld.global.f32 	%f26, [%rd222];
	@%p112 bra 	$L__BB0_214;
	bra.uni 	$L__BB0_213;

$L__BB0_214:
	mov.f32 	%f208, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f26;
  cvt.rn.f16.f32 high, %f208;
  mov.b32 %r7307, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_211:
	mov.f32 	%f204, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f204;
  cvt.rn.f16.f32 high, %f204;
  mov.b32 %r7307, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_213:
	mov.f32 	%f205, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f205;
  cvt.rn.f16.f32 high, %f26;
  mov.b32 %r7307, {low,high};}

	// end inline asm

$L__BB0_215:
	add.s32 	%r2080, %r314, 1;
	mul.wide.s32 	%rd223, %r2080, 4;
	add.s64 	%rd224, %rd12, %rd223;
	st.global.u32 	[%rd224], %r7307;
	add.s32 	%r7293, %r7293, 2;

$L__BB0_216:
	or.b32  	%r2081, %r248, %r254;
	setp.gt.s32 	%p113, %r2081, -1;
	and.pred  	%p115, %p83, %p113;
	setp.lt.s32 	%p116, %r248, %r1738;
	and.pred  	%p9, %p116, %p115;
	@%p107 bra 	$L__BB0_228;

	@%p9 bra 	$L__BB0_219;
	bra.uni 	$L__BB0_218;

$L__BB0_219:
	setp.eq.s32 	%p118, %r234, 0;
	add.s32 	%r2083, %r247, %r254;
	shl.b32 	%r2084, %r2083, 1;
	mul.wide.s32 	%rd225, %r2084, 4;
	add.s64 	%rd226, %rd11, %rd225;
	ld.global.f32 	%f27, [%rd226];
	@%p118 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_220;

$L__BB0_221:
	mov.f32 	%f214, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f27;
  cvt.rn.f16.f32 high, %f214;
  mov.b32 %r7309, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_218:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r7309, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_220:
	mov.f32 	%f211, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f211;
  cvt.rn.f16.f32 high, %f27;
  mov.b32 %r7309, {low,high};}

	// end inline asm

$L__BB0_222:
	add.s32 	%r325, %r7293, %r238;
	mul.wide.s32 	%rd227, %r325, 4;
	add.s64 	%rd228, %rd12, %rd227;
	st.global.u32 	[%rd228], %r7309;
	@%p9 bra 	$L__BB0_224;
	bra.uni 	$L__BB0_223;

$L__BB0_224:
	setp.eq.s32 	%p119, %r234, 0;
	add.s32 	%r2088, %r249, %r254;
	shl.b32 	%r2089, %r2088, 1;
	mul.wide.s32 	%rd229, %r2089, 4;
	add.s64 	%rd230, %rd11, %rd229;
	ld.global.f32 	%f28, [%rd230];
	@%p119 bra 	$L__BB0_226;
	bra.uni 	$L__BB0_225;

$L__BB0_226:
	mov.f32 	%f220, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f28;
  cvt.rn.f16.f32 high, %f220;
  mov.b32 %r7310, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_223:
	mov.f32 	%f216, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f216;
  cvt.rn.f16.f32 high, %f216;
  mov.b32 %r7310, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_225:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f28;
  mov.b32 %r7310, {low,high};}

	// end inline asm

$L__BB0_227:
	add.s32 	%r2092, %r325, 1;
	mul.wide.s32 	%rd231, %r2092, 4;
	add.s64 	%rd232, %rd12, %rd231;
	st.global.u32 	[%rd232], %r7310;
	add.s32 	%r7293, %r7293, 2;

$L__BB0_228:
	@%p100 bra 	$L__BB0_240;

	@%p9 bra 	$L__BB0_231;
	bra.uni 	$L__BB0_230;

$L__BB0_231:
	setp.eq.s32 	%p121, %r234, 0;
	add.s32 	%r2094, %r247, %r254;
	shl.b32 	%r2095, %r2094, 1;
	or.b32  	%r2096, %r2095, 1;
	mul.wide.s32 	%rd233, %r2096, 4;
	add.s64 	%rd234, %rd11, %rd233;
	ld.global.f32 	%f29, [%rd234];
	@%p121 bra 	$L__BB0_233;
	bra.uni 	$L__BB0_232;

$L__BB0_233:
	mov.f32 	%f226, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f29;
  cvt.rn.f16.f32 high, %f226;
  mov.b32 %r7312, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_230:
	mov.f32 	%f222, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f222;
  cvt.rn.f16.f32 high, %f222;
  mov.b32 %r7312, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_232:
	mov.f32 	%f223, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f223;
  cvt.rn.f16.f32 high, %f29;
  mov.b32 %r7312, {low,high};}

	// end inline asm

$L__BB0_234:
	add.s32 	%r336, %r7293, %r238;
	mul.wide.s32 	%rd235, %r336, 4;
	add.s64 	%rd236, %rd12, %rd235;
	st.global.u32 	[%rd236], %r7312;
	@%p9 bra 	$L__BB0_236;
	bra.uni 	$L__BB0_235;

$L__BB0_236:
	setp.eq.s32 	%p122, %r234, 0;
	add.s32 	%r2100, %r249, %r254;
	shl.b32 	%r2101, %r2100, 1;
	or.b32  	%r2102, %r2101, 1;
	mul.wide.s32 	%rd237, %r2102, 4;
	add.s64 	%rd238, %rd11, %rd237;
	ld.global.f32 	%f30, [%rd238];
	@%p122 bra 	$L__BB0_238;
	bra.uni 	$L__BB0_237;

$L__BB0_238:
	mov.f32 	%f232, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f30;
  cvt.rn.f16.f32 high, %f232;
  mov.b32 %r7313, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_235:
	mov.f32 	%f228, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f228;
  cvt.rn.f16.f32 high, %f228;
  mov.b32 %r7313, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_237:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f30;
  mov.b32 %r7313, {low,high};}

	// end inline asm

$L__BB0_239:
	add.s32 	%r2105, %r336, 1;
	mul.wide.s32 	%rd239, %r2105, 4;
	add.s64 	%rd240, %rd12, %rd239;
	st.global.u32 	[%rd240], %r7313;
	add.s32 	%r7293, %r7293, 2;

$L__BB0_240:
	or.b32  	%r2106, %r251, %r254;
	setp.gt.s32 	%p123, %r2106, -1;
	and.pred  	%p125, %p83, %p123;
	setp.lt.s32 	%p126, %r251, %r1738;
	and.pred  	%p10, %p126, %p125;
	@%p97 bra 	$L__BB0_252;

	@%p10 bra 	$L__BB0_243;
	bra.uni 	$L__BB0_242;

$L__BB0_243:
	setp.eq.s32 	%p128, %r234, 0;
	add.s32 	%r2108, %r250, %r254;
	shl.b32 	%r2109, %r2108, 1;
	mul.wide.s32 	%rd241, %r2109, 4;
	add.s64 	%rd242, %rd11, %rd241;
	ld.global.f32 	%f31, [%rd242];
	@%p128 bra 	$L__BB0_245;
	bra.uni 	$L__BB0_244;

$L__BB0_245:
	mov.f32 	%f238, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f31;
  cvt.rn.f16.f32 high, %f238;
  mov.b32 %r7315, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_242:
	mov.f32 	%f234, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f234;
  cvt.rn.f16.f32 high, %f234;
  mov.b32 %r7315, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_244:
	mov.f32 	%f235, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f235;
  cvt.rn.f16.f32 high, %f31;
  mov.b32 %r7315, {low,high};}

	// end inline asm

$L__BB0_246:
	add.s32 	%r347, %r7293, %r238;
	mul.wide.s32 	%rd243, %r347, 4;
	add.s64 	%rd244, %rd12, %rd243;
	st.global.u32 	[%rd244], %r7315;
	@%p10 bra 	$L__BB0_248;
	bra.uni 	$L__BB0_247;

$L__BB0_248:
	setp.eq.s32 	%p129, %r234, 0;
	add.s32 	%r2113, %r252, %r254;
	shl.b32 	%r2114, %r2113, 1;
	mul.wide.s32 	%rd245, %r2114, 4;
	add.s64 	%rd246, %rd11, %rd245;
	ld.global.f32 	%f32, [%rd246];
	@%p129 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_249;

$L__BB0_250:
	mov.f32 	%f244, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f32;
  cvt.rn.f16.f32 high, %f244;
  mov.b32 %r7316, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_247:
	mov.f32 	%f240, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f240;
  cvt.rn.f16.f32 high, %f240;
  mov.b32 %r7316, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_249:
	mov.f32 	%f241, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f241;
  cvt.rn.f16.f32 high, %f32;
  mov.b32 %r7316, {low,high};}

	// end inline asm

$L__BB0_251:
	add.s32 	%r2117, %r347, 1;
	mul.wide.s32 	%rd247, %r2117, 4;
	add.s64 	%rd248, %rd12, %rd247;
	st.global.u32 	[%rd248], %r7316;
	add.s32 	%r7293, %r7293, 2;

$L__BB0_252:
	@%p90 bra 	$L__BB0_264;

	@%p10 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_254;

$L__BB0_255:
	setp.eq.s32 	%p131, %r234, 0;
	add.s32 	%r2119, %r250, %r254;
	shl.b32 	%r2120, %r2119, 1;
	or.b32  	%r2121, %r2120, 1;
	mul.wide.s32 	%rd249, %r2121, 4;
	add.s64 	%rd250, %rd11, %rd249;
	ld.global.f32 	%f33, [%rd250];
	@%p131 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_256;

$L__BB0_257:
	mov.f32 	%f250, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f33;
  cvt.rn.f16.f32 high, %f250;
  mov.b32 %r7318, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_254:
	mov.f32 	%f246, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f246;
  cvt.rn.f16.f32 high, %f246;
  mov.b32 %r7318, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_256:
	mov.f32 	%f247, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f247;
  cvt.rn.f16.f32 high, %f33;
  mov.b32 %r7318, {low,high};}

	// end inline asm

$L__BB0_258:
	add.s32 	%r358, %r7293, %r238;
	mul.wide.s32 	%rd251, %r358, 4;
	add.s64 	%rd252, %rd12, %rd251;
	st.global.u32 	[%rd252], %r7318;
	@%p10 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_259;

$L__BB0_260:
	setp.eq.s32 	%p132, %r234, 0;
	add.s32 	%r2125, %r252, %r254;
	shl.b32 	%r2126, %r2125, 1;
	or.b32  	%r2127, %r2126, 1;
	mul.wide.s32 	%rd253, %r2127, 4;
	add.s64 	%rd254, %rd11, %rd253;
	ld.global.f32 	%f34, [%rd254];
	@%p132 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_261;

$L__BB0_262:
	mov.f32 	%f256, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f34;
  cvt.rn.f16.f32 high, %f256;
  mov.b32 %r7319, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_259:
	mov.f32 	%f252, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f252;
  cvt.rn.f16.f32 high, %f252;
  mov.b32 %r7319, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_261:
	mov.f32 	%f253, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f253;
  cvt.rn.f16.f32 high, %f34;
  mov.b32 %r7319, {low,high};}

	// end inline asm

$L__BB0_263:
	add.s32 	%r2130, %r358, 1;
	mul.wide.s32 	%rd255, %r2130, 4;
	add.s64 	%rd256, %rd12, %rd255;
	st.global.u32 	[%rd256], %r7319;
	add.s32 	%r7293, %r7293, 2;

$L__BB0_264:
	add.s64 	%rd560, %rd560, 4;
	add.s64 	%rd559, %rd559, -4;
	setp.ne.s64 	%p133, %rd559, 0;
	@%p133 bra 	$L__BB0_144;

$L__BB0_265:
	add.s32 	%r7289, %r7289, %r30;
	setp.lt.s32 	%p134, %r7289, %r1738;
	@%p134 bra 	$L__BB0_142;

$L__BB0_266:
	add.s32 	%r7283, %r7283, %r1752;
	setp.lt.s32 	%p135, %r7283, %r1737;
	@%p135 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_267;

$L__BB0_121:
	@%p19 bra 	$L__BB0_267;

	neg.s32 	%r208, %r58;
	mov.u32 	%r1948, 31;
	sub.s32 	%r1949, %r1948, %r28;
	setp.gt.s32 	%p73, %r27, %r28;
	selp.b32 	%r1950, %r28, %r1949, %p73;
	shl.b32 	%r1951, %r1950, 2;
	mov.u32 	%r1952, 2;
	sub.s32 	%r209, %r1951, %r1740;
	sub.s32 	%r1953, %r1952, %r1740;
	add.s32 	%r210, %r1953, %r1951;
	add.s32 	%r211, %r1737, -1;
	add.s32 	%r212, %r209, 1;
	add.s32 	%r213, %r210, 1;
	rem.s32 	%r1978, %r212, %r40;
	add.s32 	%r1979, %r1978, %r40;
	rem.s32 	%r224, %r1979, %r40;
	rem.s32 	%r1980, %r213, %r40;
	add.s32 	%r1981, %r1980, %r40;
	rem.s32 	%r225, %r1981, %r40;

$L__BB0_123:
	setp.ne.s32 	%p74, %r24, %r208;
	@%p74 bra 	$L__BB0_137;

	shl.b32 	%r215, %r7283, 1;
	rem.s32 	%r1954, %r209, %r40;
	add.s32 	%r1955, %r1954, %r40;
	rem.s32 	%r216, %r1955, %r40;
	rem.s32 	%r1956, %r210, %r40;
	add.s32 	%r1957, %r1956, %r40;
	rem.s32 	%r217, %r1957, %r40;
	@%p73 bra 	$L__BB0_126;
	bra.uni 	$L__BB0_125;

$L__BB0_126:
	mul.lo.s32 	%r1960, %r215, %r40;
	add.s32 	%r1961, %r1960, %r216;
	mul.wide.s32 	%rd157, %r1961, 4;
	add.s64 	%rd158, %rd11, %rd157;
	ld.global.f32 	%f117, [%rd158];
	add.s32 	%r1962, %r1960, %r217;
	mul.wide.s32 	%rd159, %r1962, 4;
	add.s64 	%rd160, %rd11, %rd159;
	ld.global.f32 	%f118, [%rd160];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f117;
  cvt.rn.f16.f32 high, %f118;
  mov.b32 %r7284, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_127;

$L__BB0_125:
	mov.f32 	%f116, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f116;
  cvt.rn.f16.f32 high, %f116;
  mov.b32 %r7284, {low,high};}

	// end inline asm

$L__BB0_127:
	shl.b32 	%r1963, %r7283, 5;
	add.s32 	%r1964, %r1963, %r28;
	shl.b32 	%r1965, %r1964, 2;
	mul.wide.s32 	%rd161, %r1965, 4;
	add.s64 	%rd13, %rd12, %rd161;
	st.global.u32 	[%rd13], %r7284;
	@%p73 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_128;

$L__BB0_129:
	add.s32 	%r1968, %r215, 1;
	mul.lo.s32 	%r1969, %r1968, %r40;
	add.s32 	%r1970, %r1969, %r216;
	mul.wide.s32 	%rd162, %r1970, 4;
	add.s64 	%rd163, %rd11, %rd162;
	ld.global.f32 	%f121, [%rd163];
	add.s32 	%r1971, %r1969, %r217;
	mul.wide.s32 	%rd164, %r1971, 4;
	add.s64 	%rd165, %rd11, %rd164;
	ld.global.f32 	%f122, [%rd165];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f121;
  cvt.rn.f16.f32 high, %f122;
  mov.b32 %r7285, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_130;

$L__BB0_128:
	mov.f32 	%f120, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f120;
  cvt.rn.f16.f32 high, %f120;
  mov.b32 %r7285, {low,high};}

	// end inline asm

$L__BB0_130:
	add.s32 	%r1972, %r211, %r7283;
	rem.s32 	%r1973, %r1972, %r1737;
	shl.b32 	%r1974, %r1973, 5;
	add.s32 	%r1975, %r1974, %r28;
	shl.b32 	%r1976, %r1975, 2;
	or.b32  	%r1977, %r1976, 2;
	mul.wide.s32 	%rd166, %r1977, 4;
	add.s64 	%rd14, %rd12, %rd166;
	st.global.u32 	[%rd14], %r7285;
	@%p73 bra 	$L__BB0_132;
	bra.uni 	$L__BB0_131;

$L__BB0_132:
	mul.lo.s32 	%r1984, %r215, %r40;
	add.s32 	%r1985, %r1984, %r224;
	mul.wide.s32 	%rd167, %r1985, 4;
	add.s64 	%rd168, %rd11, %rd167;
	ld.global.f32 	%f125, [%rd168];
	add.s32 	%r1986, %r1984, %r225;
	mul.wide.s32 	%rd169, %r1986, 4;
	add.s64 	%rd170, %rd11, %rd169;
	ld.global.f32 	%f126, [%rd170];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f125;
  cvt.rn.f16.f32 high, %f126;
  mov.b32 %r7286, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_133;

$L__BB0_131:
	mov.f32 	%f124, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f124;
  cvt.rn.f16.f32 high, %f124;
  mov.b32 %r7286, {low,high};}

	// end inline asm

$L__BB0_133:
	st.global.u32 	[%rd13+4], %r7286;
	@%p73 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r1989, %r215, 1;
	mul.lo.s32 	%r1990, %r1989, %r40;
	add.s32 	%r1991, %r1990, %r224;
	mul.wide.s32 	%rd171, %r1991, 4;
	add.s64 	%rd172, %rd11, %rd171;
	ld.global.f32 	%f129, [%rd172];
	add.s32 	%r1992, %r1990, %r225;
	mul.wide.s32 	%rd173, %r1992, 4;
	add.s64 	%rd174, %rd11, %rd173;
	ld.global.f32 	%f130, [%rd174];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f129;
  cvt.rn.f16.f32 high, %f130;
  mov.b32 %r7287, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f128, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f128;
  cvt.rn.f16.f32 high, %f128;
  mov.b32 %r7287, {low,high};}

	// end inline asm

$L__BB0_136:
	st.global.u32 	[%rd14+4], %r7287;

$L__BB0_137:
	add.s32 	%r7283, %r7283, %r1752;
	setp.lt.s32 	%p79, %r7283, %r1737;
	@%p79 bra 	$L__BB0_123;

$L__BB0_267:
	add.s32 	%r2132, %r1732, -1;
	mad.lo.s32 	%r2133, %r1733, 576, 128;
	mul.lo.s32 	%r2134, %r2133, %r2132;
	add.s32 	%r2135, %r52, -64;
	add.s32 	%r2136, %r2135, %r52;
	add.s32 	%r2137, %r1733, -1;
	mad.lo.s32 	%r2138, %r2136, %r2137, %r2134;
	mul.lo.s32 	%r2139, %r2132, %r1733;
	mul.lo.s32 	%r2140, %r2139, 320;
	mad.lo.s32 	%r2141, %r2135, %r2137, %r2140;
	add.s32 	%r367, %r2141, %r2138;
	setp.lt.s32 	%p136, %r367, 1;
	mov.f32 	%f258, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r7498, {low,high};}

	// end inline asm
	@%p136 bra 	$L__BB0_270;

	mov.u32 	%r7323, 0;
	mov.u32 	%r7321, _ZN6kernel5shmemE;

$L__BB0_269:
	st.shared.u32 	[%r7321], %r7498;
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2144, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7321+4], %r2144;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2145, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7321+8], %r2145;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2146, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7321+12], %r2146;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r7498, {low,high};}

	// end inline asm
	add.s32 	%r7321, %r7321, 16;
	add.s32 	%r7323, %r7323, 4;
	setp.lt.s32 	%p137, %r7323, %r367;
	@%p137 bra 	$L__BB0_269;

$L__BB0_270:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r7499, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r2149, {low,high};}

	// end inline asm
	ld.param.u64 	%rd257, [%rd1+128];
	cvta.to.global.u64 	%rd19, %rd257;
	mov.u32 	%r2150, 31;
	sub.s32 	%r2151, %r2150, %r28;
	setp.gt.s32 	%p138, %r27, %r28;
	selp.b32 	%r2152, %r28, %r2151, %p138;
	shl.b32 	%r2153, %r2152, 2;
	sub.s32 	%r378, %r2153, %r1740;
	rem.s32 	%r2154, %r378, %r40;
	add.s32 	%r2155, %r2154, %r40;
	rem.s32 	%r379, %r2155, %r40;
	add.s32 	%r2156, %r378, 2;
	rem.s32 	%r2157, %r2156, %r40;
	add.s32 	%r2158, %r2157, %r40;
	rem.s32 	%r380, %r2158, %r40;
	mul.lo.s32 	%r2159, %r379, 6;
	mul.lo.s32 	%r2160, %r380, 6;
	mul.wide.s32 	%rd258, %r2159, 4;
	add.s64 	%rd20, %rd19, %rd258;
	mul.wide.s32 	%rd259, %r2160, 4;
	add.s64 	%rd21, %rd19, %rd259;
	@%p12 bra 	$L__BB0_272;
	bra.uni 	$L__BB0_271;

$L__BB0_272:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r7325, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_273;

$L__BB0_271:
	ld.global.f32 	%f273, [%rd20];
	ld.global.f32 	%f274, [%rd20+8];
	add.f32 	%f271, %f273, %f274;
	ld.global.f32 	%f275, [%rd21+8];
	ld.global.f32 	%f276, [%rd21];
	add.f32 	%f272, %f276, %f275;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f271;
  cvt.rn.f16.f32 high, %f272;
  mov.b32 %r7325, {low,high};}

	// end inline asm

$L__BB0_273:
	@%p12 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	ld.global.f32 	%f281, [%rd20+4];
	ld.global.f32 	%f282, [%rd21+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f281;
  cvt.rn.f16.f32 high, %f282;
  mov.b32 %r7326, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	ld.global.f32 	%f279, [%rd20];
	ld.global.f32 	%f280, [%rd21];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f279;
  cvt.rn.f16.f32 high, %f280;
  mov.b32 %r7326, {low,high};}

	// end inline asm

$L__BB0_276:
	@%p12 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	mov.f32 	%f290, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f290;
  cvt.rn.f16.f32 high, %f290;
  mov.b32 %r7327, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_279;

$L__BB0_277:
	ld.global.f32 	%f285, [%rd20+20];
	ld.global.f32 	%f286, [%rd20+12];
	add.f32 	%f283, %f286, %f285;
	ld.global.f32 	%f287, [%rd21+20];
	ld.global.f32 	%f288, [%rd21+12];
	add.f32 	%f284, %f288, %f287;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f284;
  mov.b32 %r7327, {low,high};}

	// end inline asm

$L__BB0_279:
	@%p12 bra 	$L__BB0_281;
	bra.uni 	$L__BB0_280;

$L__BB0_281:
	ld.global.f32 	%f293, [%rd20+16];
	ld.global.f32 	%f294, [%rd21+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f293;
  cvt.rn.f16.f32 high, %f294;
  mov.b32 %r7328, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_282;

$L__BB0_280:
	ld.global.f32 	%f291, [%rd20+12];
	ld.global.f32 	%f292, [%rd21+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f292;
  mov.b32 %r7328, {low,high};}

	// end inline asm

$L__BB0_282:
	add.s32 	%r2169, %r378, 1;
	rem.s32 	%r2170, %r2169, %r40;
	add.s32 	%r2171, %r2170, %r40;
	rem.s32 	%r393, %r2171, %r40;
	add.s32 	%r2172, %r378, 3;
	rem.s32 	%r2173, %r2172, %r40;
	add.s32 	%r2174, %r2173, %r40;
	rem.s32 	%r394, %r2174, %r40;
	mul.lo.s32 	%r2175, %r393, 6;
	mul.lo.s32 	%r2176, %r394, 6;
	mul.wide.s32 	%rd260, %r2175, 4;
	add.s64 	%rd22, %rd19, %rd260;
	mul.wide.s32 	%rd261, %r2176, 4;
	add.s64 	%rd23, %rd19, %rd261;
	@%p12 bra 	$L__BB0_284;
	bra.uni 	$L__BB0_283;

$L__BB0_284:
	mov.f32 	%f302, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f302;
  cvt.rn.f16.f32 high, %f302;
  mov.b32 %r7329, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_285;

$L__BB0_283:
	ld.global.f32 	%f297, [%rd22];
	ld.global.f32 	%f298, [%rd22+8];
	add.f32 	%f295, %f297, %f298;
	ld.global.f32 	%f299, [%rd23+8];
	ld.global.f32 	%f300, [%rd23];
	add.f32 	%f296, %f300, %f299;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f295;
  cvt.rn.f16.f32 high, %f296;
  mov.b32 %r7329, {low,high};}

	// end inline asm

$L__BB0_285:
	@%p12 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	ld.global.f32 	%f305, [%rd22+4];
	ld.global.f32 	%f306, [%rd23+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f305;
  cvt.rn.f16.f32 high, %f306;
  mov.b32 %r7330, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	ld.global.f32 	%f303, [%rd22];
	ld.global.f32 	%f304, [%rd23];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f303;
  cvt.rn.f16.f32 high, %f304;
  mov.b32 %r7330, {low,high};}

	// end inline asm

$L__BB0_288:
	@%p12 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	mov.f32 	%f314, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f314;
  cvt.rn.f16.f32 high, %f314;
  mov.b32 %r7331, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_291;

$L__BB0_289:
	ld.global.f32 	%f309, [%rd22+20];
	ld.global.f32 	%f310, [%rd22+12];
	add.f32 	%f307, %f310, %f309;
	ld.global.f32 	%f311, [%rd23+20];
	ld.global.f32 	%f312, [%rd23+12];
	add.f32 	%f308, %f312, %f311;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f307;
  cvt.rn.f16.f32 high, %f308;
  mov.b32 %r7331, {low,high};}

	// end inline asm

$L__BB0_291:
	@%p12 bra 	$L__BB0_293;
	bra.uni 	$L__BB0_292;

$L__BB0_293:
	ld.global.f32 	%f317, [%rd22+16];
	ld.global.f32 	%f318, [%rd23+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f317;
  cvt.rn.f16.f32 high, %f318;
  mov.b32 %r7332, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_294;

$L__BB0_292:
	ld.global.f32 	%f315, [%rd22+12];
	ld.global.f32 	%f316, [%rd23+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f315;
  cvt.rn.f16.f32 high, %f316;
  mov.b32 %r7332, {low,high};}

	// end inline asm

$L__BB0_294:
	// begin inline asm
	mov.u32 %r2185, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd262, %r2185;
	// begin inline asm
	mov.u32 %r2186, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd263, %r2186;
	bfi.b64 	%rd24, %rd263, %rd262, 32, 32;
	setp.ne.s64 	%p147, %rd24, 0;
	@%p147 bra 	$L__BB0_296;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_296:
	mov.u32 	%r2187, %nctaid.x;
	mov.u32 	%r2188, %nctaid.y;
	mul.lo.s32 	%r2189, %r2187, %r2188;
	mov.u32 	%r2190, %nctaid.z;
	mul.lo.s32 	%r407, %r2189, %r2190;
	neg.s32 	%r2191, %r24;
	add.s32 	%r2192, %r28, %r23;
	setp.ne.s32 	%p148, %r2192, %r2191;
	mov.u32 	%r2193, %ctaid.x;
	add.s32 	%r408, %r2193, %r25;
	neg.s32 	%r409, %r26;
	bar.sync 	0;
	@%p148 bra 	$L__BB0_300;

	setp.eq.s32 	%p149, %r408, %r409;
	mov.u32 	%r2194, -2147483647;
	sub.s32 	%r2195, %r2194, %r407;
	selp.b32 	%r2196, %r2195, 1, %p149;
	membar.gl;
	add.s64 	%rd264, %rd24, 4;
	atom.add.u32 	%r410, [%rd264], %r2196;

$L__BB0_298:
	ld.volatile.u32 	%r2197, [%rd24+4];
	xor.b32  	%r2198, %r2197, %r410;
	setp.gt.s32 	%p150, %r2198, -1;
	@%p150 bra 	$L__BB0_298;

	membar.gl;

$L__BB0_300:
	bar.sync 	0;
	setp.lt.s32 	%p151, %r31, 1;
	@%p151 bra 	$L__BB0_736;

	not.b32 	%r2212, %r23;
	add.s32 	%r2213, %r1732, %r2212;
	shr.s32 	%r2214, %r1742, 31;
	shr.u32 	%r2215, %r2214, 30;
	add.s32 	%r2216, %r1742, %r2215;
	shr.s32 	%r411, %r2216, 2;
	mul.lo.s32 	%r2217, %r2213, 384;
	add.s32 	%r2218, %r2217, %r53;
	add.s32 	%r2219, %r28, 30;
	mul.hi.s32 	%r2220, %r2219, -2078209981;
	add.s32 	%r2221, %r2220, %r2219;
	shr.u32 	%r2222, %r2221, 31;
	shr.s32 	%r2223, %r2221, 4;
	add.s32 	%r2224, %r2223, %r2222;
	mul.lo.s32 	%r2225, %r2224, 31;
	sub.s32 	%r2226, %r2219, %r2225;
	add.s32 	%r412, %r2218, -64;
	add.s32 	%r2227, %r28, 32;
	mul.hi.s32 	%r2228, %r2227, -2078209981;
	add.s32 	%r2229, %r2228, %r2227;
	shr.u32 	%r2230, %r2229, 31;
	shr.s32 	%r2231, %r2229, 4;
	add.s32 	%r2232, %r2231, %r2230;
	mul.lo.s32 	%r2233, %r2232, 31;
	sub.s32 	%r2234, %r2227, %r2233;
	add.s32 	%r2235, %r2217, %r52;
	add.s32 	%r413, %r53, %r2235;
	shr.u32 	%r2236, %r1742, 31;
	add.s32 	%r2237, %r1742, %r2236;
	and.b32  	%r2238, %r2237, -2;
	sub.s32 	%r414, %r1742, %r2238;
	setp.lt.s32 	%p152, %r28, 31;
	selp.b32 	%r415, %r2226, %r28, %p152;
	selp.b32 	%r416, %r2234, %r28, %p152;
	mov.u32 	%r2211, 0;
	// begin inline asm
	{mov.u32 %r2239, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2565, %r2239, 8;
	add.s32 	%r2566, %r2565, -8192;
	or.b32  	%r2243, %r2566, 31;
	mul.wide.s32 	%rd273, %r28, 16;
	mul.wide.s32 	%rd275, %r28, 8;
	mov.u32 	%r7610, %r2149;
	mov.u32 	%r7640, %r2149;
	mov.u32 	%r7611, %r2149;
	mov.u32 	%r7641, %r2149;
	mov.u32 	%r7612, %r2149;
	mov.u32 	%r7338, %r2149;
	mov.u32 	%r7339, %r2149;
	mov.u32 	%r7653, %r2149;
	mov.u32 	%r7642, %r2149;
	mov.u32 	%r7643, %r2149;
	mov.u32 	%r7613, %r2149;
	mov.u32 	%r7614, %r2149;
	mov.u32 	%r7615, %r2149;
	mov.u32 	%r7346, %r2149;
	mov.u32 	%r7347, %r2149;
	mov.u32 	%r7652, %r2149;
	mov.u32 	%r7644, %r2149;
	mov.u32 	%r7645, %r2149;
	mov.u32 	%r7622, %r2149;
	mov.u32 	%r7352, %r2149;
	mov.u32 	%r7353, %r2149;
	mov.u32 	%r7354, %r2149;
	mov.u32 	%r7663, %r2149;
	mov.u32 	%r7649, %r2149;
	mov.u32 	%r7654, %r2149;
	mov.u32 	%r7623, %r2149;
	mov.u32 	%r7359, %r2149;
	mov.u32 	%r7360, %r2149;
	mov.u32 	%r7361, %r2149;
	mov.u32 	%r7657, %r2149;
	mov.u32 	%r7646, %r2149;
	mov.u32 	%r7655, %r2149;
	mov.u32 	%r7624, %r2149;
	mov.u32 	%r7625, %r2149;
	mov.u32 	%r7367, %r2149;
	mov.u32 	%r7658, %r2149;
	mov.u32 	%r7659, %r2149;
	mov.u32 	%r7370, %r2149;
	mov.u32 	%r7626, %r2149;
	mov.u32 	%r7627, %r2149;
	mov.u32 	%r7628, %r2149;
	mov.u32 	%r7374, %r2149;
	mov.u32 	%r7660, %r2149;
	mov.u32 	%r7661, %r2149;
	mov.u32 	%r7629, %r2149;
	mov.u32 	%r7630, %r2149;
	mov.u32 	%r7631, %r2149;
	mov.u32 	%r7616, %r2149;
	mov.u32 	%r7381, %r2149;
	mov.u32 	%r7647, %r2149;
	mov.u32 	%r7648, %r2149;
	mov.u32 	%r7617, %r2149;
	mov.u32 	%r7385, %r2149;
	mov.u32 	%r7650, %r2149;
	mov.u32 	%r7651, %r2149;
	mov.u32 	%r7680, %r2149;
	mov.u32 	%r7389, %r2149;
	mov.u32 	%r7390, %r2149;
	mov.u32 	%r7391, %r2149;
	mov.u32 	%r7536, %r2149;
	mov.u32 	%r7681, %r2149;
	mov.u32 	%r7394, %r2149;
	mov.u32 	%r7395, %r2149;
	mov.u32 	%r7396, %r2149;
	mov.u32 	%r7537, %r2149;
	mov.u32 	%r7682, %r2149;
	mov.u32 	%r7683, %r2149;
	mov.u32 	%r7400, %r2149;
	mov.u32 	%r7401, %r2149;
	mov.u32 	%r7402, %r2149;
	mov.u32 	%r7538, %r2149;
	mov.u32 	%r7404, %r2149;
	mov.u32 	%r7684, %r2149;
	mov.u32 	%r7685, %r2149;
	mov.u32 	%r7407, %r2149;
	mov.u32 	%r7408, %r2149;
	mov.u32 	%r7409, %r2149;
	mov.u32 	%r7540, %r2149;
	mov.u32 	%r7411, %r2149;
	mov.u32 	%r7412, %r2149;
	mov.u32 	%r7413, %r2149;
	mov.u32 	%r7414, %r2149;
	mov.u32 	%r7664, %r2149;
	mov.u32 	%r7416, %r2149;
	mov.u32 	%r7417, %r2149;
	mov.u32 	%r7418, %r2149;
	mov.u32 	%r7419, %r2149;
	mov.u32 	%r7665, %r2149;
	mov.u32 	%r7632, %r2149;
	mov.u32 	%r7633, %r2149;
	mov.u32 	%r7634, %r2149;
	mov.u32 	%r7635, %r2149;
	mov.u32 	%r7425, %r2149;
	mov.u32 	%r7426, %r2149;
	mov.u32 	%r7689, %r2149;
	mov.u32 	%r7428, %r2149;
	mov.u32 	%r7429, %r2149;
	mov.u32 	%r7544, %r2149;
	mov.u32 	%r7431, %r2149;
	mov.u32 	%r7432, %r2149;
	mov.u32 	%r7433, %r2149;
	mov.u32 	%r7434, %r2149;
	mov.u32 	%r7691, %r2149;
	mov.u32 	%r7436, %r2149;
	mov.u32 	%r7437, %r2149;
	mov.u32 	%r7547, %r2149;
	mov.u32 	%r7439, %r2149;
	mov.u32 	%r7440, %r2149;
	mov.u32 	%r7441, %r2149;
	mov.u32 	%r7442, %r2149;
	mov.u32 	%r7692, %r2149;
	mov.u32 	%r7444, %r2149;
	mov.u32 	%r7445, %r2149;
	mov.u32 	%r7446, %r2149;
	mov.u32 	%r7550, %r2149;
	mov.u32 	%r7448, %r2149;
	mov.u32 	%r7449, %r2149;
	mov.u32 	%r7450, %r2149;
	mov.u32 	%r7451, %r2149;
	mov.u32 	%r7693, %r2149;
	mov.u32 	%r7453, %r2149;
	mov.u32 	%r7454, %r2149;
	mov.u32 	%r7455, %r2149;
	mov.u32 	%r7553, %r2149;
	mov.u32 	%r7457, %r2149;
	mov.u32 	%r7458, %r2149;
	mov.u32 	%r7459, %r2149;
	mov.u32 	%r7460, %r2149;
	mov.u32 	%r7461, %r2149;
	mov.u32 	%r7462, %r2149;
	mov.u32 	%r7463, %r2149;
	mov.u32 	%r7464, %r2149;
	mov.u32 	%r7465, %r2149;
	mov.u32 	%r7466, %r2149;
	mov.u32 	%r7467, %r2149;
	mov.u32 	%r7468, %r2149;
	mov.u32 	%r7469, %r2149;
	mov.u32 	%r7470, %r2149;
	mov.u32 	%r7471, %r2149;
	mov.u32 	%r7472, %r2149;
	mov.u32 	%r7473, %r2149;
	mov.u32 	%r7474, %r2149;
	mov.u32 	%r7475, %r2149;
	mov.u32 	%r7476, %r2149;
	mov.u32 	%r7477, %r2149;
	mov.u32 	%r7478, %r2149;
	mov.u32 	%r7479, %r2211;
	mov.u32 	%r7480, %r2211;
	mov.u32 	%r7481, %r2211;
	mov.u32 	%r7482, %r2211;
	mov.u32 	%r7483, %r2211;
	mov.u32 	%r7484, %r2211;
	mov.u32 	%r7485, %r2211;
	mov.u32 	%r7486, %r2211;
	mov.u32 	%r7487, %r2211;
	mov.u32 	%r7488, %r2211;
	mov.u32 	%r7489, %r2211;
	mov.u32 	%r7490, %r2211;
	mov.u32 	%r7618, %r2149;
	mov.u32 	%r7619, %r2149;
	mov.u32 	%r7620, %r2149;
	mov.u32 	%r7621, %r2149;
	mov.u32 	%r7636, %r2149;
	mov.u32 	%r7637, %r2149;
	mov.u32 	%r7497, %r2211;

$L__BB0_302:
	mov.u32 	%r554, %r7693;
	mov.u32 	%r553, %r7451;
	mov.u32 	%r545, %r7692;
	mov.u32 	%r544, %r7442;
	mov.u32 	%r537, %r7691;
	mov.u32 	%r529, %r7689;
	mov.u32 	%r7451, %r7685;
	mov.u32 	%r499, %r7684;
	mov.u32 	%r7442, %r7683;
	mov.u32 	%r491, %r7682;
	mov.u32 	%r484, %r7681;
	mov.u32 	%r477, %r7680;
	sub.s32 	%r7233, %r1737, %r30;
	mov.u32 	%r2254, 1;
	not.b32 	%r2528, %r25;
	mov.u32 	%r2520, -1;
	add.s32 	%r2529, %r1734, %r2528;
	mul.lo.s32 	%r2530, %r2529, %r1736;
	add.s32 	%r2531, %r7497, %r2530;
	not.b32 	%r2533, %r26;
	add.s32 	%r2534, %r1735, %r2533;
	mul.lo.s32 	%r2535, %r2534, %r1736;
	add.s32 	%r2536, %r7497, %r2535;
	add.s32 	%r2537, %r2530, %r2535;
	add.s32 	%r2538, %r2537, %r1737;
	mad.lo.s32 	%r2541, %r2529, %r1732, %r2213;
	not.b32 	%r2542, %r24;
	add.s32 	%r2543, %r1733, %r2542;
	mad.lo.s32 	%r2544, %r2534, %r1733, %r2543;
	add.s32 	%r2545, %r2541, %r2544;
	shl.b32 	%r2546, %r2545, 1;
	add.s32 	%r2547, %r2538, %r2546;
	add.s32 	%r2548, %r7497, %r2547;
	add.s32 	%r2549, %r7497, %r2537;
	div.s32 	%r2550, %r2548, %r1737;
	neg.s32 	%r2551, %r1737;
	sub.s32 	%r2554, %r30, %r1737;
	sub.s32 	%r2555, %r2541, %r2544;
	shl.b32 	%r2556, %r2555, 1;
	add.s32 	%r2557, %r2556, %r1738;
	mad.lo.s32 	%r2558, %r2550, %r30, %r2557;
	mad.lo.s32 	%r2559, %r2550, %r2554, %r2549;
	div.s32 	%r2560, %r2558, %r1738;
	mul.lo.s32 	%r2561, %r2560, %r1738;
	sub.s32 	%r2564, %r1753, %r1738;
	mov.u32 	%r2338, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r2240,%r7499,%r2211,%r2243,%r2520;
}
	// end inline asm
	selp.b32 	%r2246, %r7326, %r2240, %p12;
	// begin inline asm
	{mul.f16x2 %r7583,%r2246,%r7478;
}
	// end inline asm
	selp.b32 	%r2249, %r7330, %r2240, %p12;
	// begin inline asm
	{mul.f16x2 %r7581,%r2249,%r7473;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2252,%r7499,%r2254,%r2243,%r2520;
}
	// end inline asm
	selp.b32 	%r2258, %r7326, %r2252, %p12;
	// begin inline asm
	{mul.f16x2 %r7582,%r2258,%r7477;
}
	// end inline asm
	selp.b32 	%r2261, %r7330, %r2252, %p12;
	// begin inline asm
	{mul.f16x2 %r7580,%r2261,%r7472;
}
	// end inline asm
	mov.u32 	%r2266, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r2264,%r7499,%r2266,%r2243,%r2520;
}
	// end inline asm
	selp.b32 	%r2270, %r7326, %r2264, %p12;
	// begin inline asm
	{mul.f16x2 %r7579,%r2270,%r7468;
}
	// end inline asm
	selp.b32 	%r2273, %r7330, %r2264, %p12;
	// begin inline asm
	{mul.f16x2 %r7578,%r2273,%r7466;
}
	// end inline asm
	mov.u32 	%r2278, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2276,%r7499,%r2278,%r2243,%r2520;
}
	// end inline asm
	selp.b32 	%r2282, %r7326, %r2276, %p12;
	// begin inline asm
	{mul.f16x2 %r7577,%r2282,%r7665;
}
	// end inline asm
	selp.b32 	%r2285, %r7330, %r2276, %p12;
	// begin inline asm
	{mul.f16x2 %r7575,%r2285,%r7664;
}
	// end inline asm
	mov.u32 	%r2290, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r2288,%r7499,%r2290,%r2243,%r2520;
}
	// end inline asm
	selp.b32 	%r2294, %r7326, %r2288, %p12;
	// begin inline asm
	{mul.f16x2 %r7576,%r2294,%r7464;
}
	// end inline asm
	selp.b32 	%r2297, %r7330, %r2288, %p12;
	// begin inline asm
	{mul.f16x2 %r7574,%r2297,%r7461;
}
	// end inline asm
	mov.u32 	%r2302, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2300,%r7499,%r2302,%r2243,%r2520;
}
	// end inline asm
	selp.b32 	%r2306, %r7326, %r2300, %p12;
	// begin inline asm
	{mul.f16x2 %r7573,%r2306,%r7458;
}
	// end inline asm
	selp.b32 	%r2309, %r7330, %r2300, %p12;
	// begin inline asm
	{mul.f16x2 %r7570,%r2309,%r7449;
}
	// end inline asm
	mov.u32 	%r2314, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r2312,%r7499,%r2314,%r2243,%r2520;
}
	// end inline asm
	selp.b32 	%r2318, %r7326, %r2312, %p12;
	// begin inline asm
	{mul.f16x2 %r7572,%r2318,%r7457;
}
	// end inline asm
	selp.b32 	%r2321, %r7330, %r2312, %p12;
	// begin inline asm
	{mul.f16x2 %r7569,%r2321,%r7448;
}
	// end inline asm
	mov.u32 	%r2326, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2324,%r7499,%r2326,%r2243,%r2520;
}
	// end inline asm
	selp.b32 	%r2330, %r7326, %r2324, %p12;
	// begin inline asm
	{mul.f16x2 %r7571,%r2330,%r7553;
}
	// end inline asm
	selp.b32 	%r2333, %r7330, %r2324, %p12;
	// begin inline asm
	{mul.f16x2 %r7568,%r2333,%r7550;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2336,%r7499,%r2338,%r2243,%r2520;
}
	// end inline asm
	selp.b32 	%r2342, %r7326, %r2336, %p12;
	// begin inline asm
	{mul.f16x2 %r7567,%r2342,%r7440;
}
	// end inline asm
	selp.b32 	%r2345, %r7330, %r2336, %p12;
	// begin inline asm
	{mul.f16x2 %r7564,%r2345,%r7432;
}
	// end inline asm
	mov.u32 	%r2350, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2348,%r7499,%r2350,%r2243,%r2520;
}
	// end inline asm
	selp.b32 	%r2354, %r7326, %r2348, %p12;
	// begin inline asm
	{mul.f16x2 %r7566,%r2354,%r7439;
}
	// end inline asm
	selp.b32 	%r2357, %r7330, %r2348, %p12;
	// begin inline asm
	{mul.f16x2 %r7563,%r2357,%r7431;
}
	// end inline asm
	mov.u32 	%r2362, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r2360,%r7499,%r2362,%r2243,%r2520;
}
	// end inline asm
	selp.b32 	%r2366, %r7326, %r2360, %p12;
	// begin inline asm
	{mul.f16x2 %r7565,%r2366,%r7547;
}
	// end inline asm
	selp.b32 	%r2369, %r7330, %r2360, %p12;
	// begin inline asm
	{mul.f16x2 %r7562,%r2369,%r7544;
}
	// end inline asm
	mov.u32 	%r2374, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2372,%r7499,%r2374,%r2243,%r2520;
}
	// end inline asm
	selp.b32 	%r2378, %r7326, %r2372, %p12;
	// begin inline asm
	{mul.f16x2 %r7561,%r2378,%r7651;
}
	// end inline asm
	selp.b32 	%r2381, %r7330, %r2372, %p12;
	// begin inline asm
	{mul.f16x2 %r7560,%r2381,%r7648;
}
	// end inline asm
	mov.u32 	%r2386, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r2384,%r7499,%r2386,%r2243,%r2520;
}
	// end inline asm
	selp.b32 	%r2390, %r7326, %r2384, %p12;
	// begin inline asm
	{mul.f16x2 %r7559,%r2390,%r7661;
}
	// end inline asm
	selp.b32 	%r2393, %r7330, %r2384, %p12;
	// begin inline asm
	{mul.f16x2 %r7557,%r2393,%r7659;
}
	// end inline asm
	mov.u32 	%r2398, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2396,%r7499,%r2398,%r2243,%r2520;
}
	// end inline asm
	selp.b32 	%r2402, %r7326, %r2396, %p12;
	// begin inline asm
	{mul.f16x2 %r7558,%r2402,%r7660;
}
	// end inline asm
	selp.b32 	%r2405, %r7330, %r2396, %p12;
	// begin inline asm
	{mul.f16x2 %r7556,%r2405,%r7658;
}
	// end inline asm
	mov.u32 	%r2410, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r2408,%r7499,%r2410,%r2243,%r2520;
}
	// end inline asm
	selp.b32 	%r2414, %r7326, %r2408, %p12;
	// begin inline asm
	{mul.f16x2 %r7555,%r2414,%r7655;
}
	// end inline asm
	selp.b32 	%r2417, %r7330, %r2408, %p12;
	// begin inline asm
	{mul.f16x2 %r7552,%r2417,%r7654;
}
	// end inline asm
	mov.u32 	%r2422, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2420,%r7499,%r2422,%r2243,%r2520;
}
	// end inline asm
	selp.b32 	%r2426, %r7326, %r2420, %p12;
	// begin inline asm
	{mul.f16x2 %r7554,%r2426,%r7411;
}
	// end inline asm
	selp.b32 	%r2429, %r7330, %r2420, %p12;
	// begin inline asm
	{mul.f16x2 %r7551,%r2429,%r7404;
}
	// end inline asm
	mov.u32 	%r2434, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r2432,%r7499,%r2434,%r2243,%r2520;
}
	// end inline asm
	selp.b32 	%r2438, %r7326, %r2432, %p12;
	// begin inline asm
	{mul.f16x2 %r7553,%r2438,%r7540;
}
	// end inline asm
	selp.b32 	%r2441, %r7330, %r2432, %p12;
	// begin inline asm
	{mul.f16x2 %r7550,%r2441,%r7538;
}
	// end inline asm
	mov.u32 	%r2446, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2444,%r7499,%r2446,%r2243,%r2520;
}
	// end inline asm
	selp.b32 	%r2450, %r7326, %r2444, %p12;
	// begin inline asm
	{mul.f16x2 %r7549,%r2450,%r7645;
}
	// end inline asm
	selp.b32 	%r2453, %r7330, %r2444, %p12;
	// begin inline asm
	{mul.f16x2 %r7546,%r2453,%r7643;
}
	// end inline asm
	mov.u32 	%r2458, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2456,%r7499,%r2458,%r2243,%r2520;
}
	// end inline asm
	selp.b32 	%r2462, %r7326, %r2456, %p12;
	// begin inline asm
	{mul.f16x2 %r7548,%r2462,%r7644;
}
	// end inline asm
	selp.b32 	%r2465, %r7330, %r2456, %p12;
	// begin inline asm
	{mul.f16x2 %r7545,%r2465,%r7642;
}
	// end inline asm
	mov.u32 	%r2470, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2468,%r7499,%r2470,%r2243,%r2520;
}
	// end inline asm
	selp.b32 	%r2474, %r7326, %r2468, %p12;
	// begin inline asm
	{mul.f16x2 %r7547,%r2474,%r7537;
}
	// end inline asm
	selp.b32 	%r2477, %r7330, %r2468, %p12;
	// begin inline asm
	{mul.f16x2 %r7544,%r2477,%r7536;
}
	// end inline asm
	mov.u32 	%r2482, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2480,%r7499,%r2482,%r2243,%r2520;
}
	// end inline asm
	selp.b32 	%r2486, %r7326, %r2480, %p12;
	// begin inline asm
	{mul.f16x2 %r7543,%r2486,%r7640;
}
	// end inline asm
	selp.b32 	%r2489, %r7330, %r2480, %p12;
	// begin inline asm
	{mul.f16x2 %r7542,%r2489,%r7641;
}
	// end inline asm
	mov.u32 	%r2494, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2492,%r7499,%r2494,%r2243,%r2520;
}
	// end inline asm
	selp.b32 	%r2498, %r7326, %r2492, %p12;
	// begin inline asm
	{mul.f16x2 %r7541,%r2498,%r7646;
}
	// end inline asm
	selp.b32 	%r2501, %r7330, %r2492, %p12;
	// begin inline asm
	{mul.f16x2 %r7539,%r2501,%r7649;
}
	// end inline asm
	mov.u32 	%r2506, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2504,%r7499,%r2506,%r2243,%r2520;
}
	// end inline asm
	selp.b32 	%r2510, %r7326, %r2504, %p12;
	// begin inline asm
	{mul.f16x2 %r7540,%r2510,%r7657;
}
	// end inline asm
	selp.b32 	%r2513, %r7330, %r2504, %p12;
	// begin inline asm
	{mul.f16x2 %r7538,%r2513,%r7663;
}
	// end inline asm
	mov.u32 	%r2518, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2516,%r7499,%r2518,%r2243,%r2520;
}
	// end inline asm
	selp.b32 	%r2522, %r7326, %r2516, %p12;
	// begin inline asm
	{mul.f16x2 %r7537,%r2522,%r7652;
}
	// end inline asm
	selp.b32 	%r2525, %r7330, %r2516, %p12;
	// begin inline asm
	{mul.f16x2 %r7536,%r2525,%r7653;
}
	// end inline asm
	rem.s32 	%r654, %r2531, %r51;
	rem.s32 	%r655, %r2536, %r7233;
	mad.lo.s32 	%r656, %r2550, %r2551, %r2548;
	sub.s32 	%r657, %r2558, %r2561;
	mad.lo.s32 	%r658, %r2560, %r2564, %r2559;
	ld.param.u64 	%rd266, [%rd1+120];
	cvta.to.global.u64 	%rd267, %rd266;
	shl.b32 	%r2614, %r658, 1;
	mul.wide.s32 	%rd268, %r2614, 4;
	add.s64 	%rd25, %rd267, %rd268;
	@%p71 bra 	$L__BB0_310;
	bra.uni 	$L__BB0_303;

$L__BB0_310:
	add.s32 	%r2817, %r1748, 1;
	setp.lt.s32 	%p160, %r658, %r2817;
	setp.eq.s32 	%p161, %r411, %r28;
	setp.gt.s32 	%p162, %r658, -1;
	and.pred  	%p163, %p161, %p162;
	and.pred  	%p164, %p160, %p163;
	@%p164 bra 	$L__BB0_312;
	bra.uni 	$L__BB0_311;

$L__BB0_312:
	ld.global.f32 	%f329, [%rd25];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f329;
  mov.b32 %r7502, {low,low};}

	// end inline asm
	ld.global.f32 	%f330, [%rd25+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f330;
  mov.b32 %r7503, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_313;

$L__BB0_303:
	add.s32 	%r2617, %r1748, 1;
	setp.lt.s32 	%p155, %r658, %r2617;
	setp.gt.s32 	%p156, %r658, -1;
	and.pred  	%p157, %p156, %p155;
	@%p157 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f323, [%rd25];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f323;
  mov.b32 %r7500, {low,low};}

	// end inline asm
	ld.global.f32 	%f324, [%rd25+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f324;
  mov.b32 %r7501, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_311:
	mov.f32 	%f328, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7502, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7503, {low,high};}

	// end inline asm

$L__BB0_313:
	mov.u32 	%r2825, 0;
	mov.u32 	%r2836, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2823,%r7498,%r2825,%r2243,%r2836;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2828,%r7502,%r2823;
}
	// end inline asm
	mov.u32 	%r2834, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2832,%r7498,%r2834,%r2243,%r2836;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2837,%r7503,%r2832;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7505,%r2828,%r2837;
}
	// end inline asm
	setp.eq.s32 	%p165, %r414, 0;
	mov.u32 	%r7504, %r7505;
	@%p165 bra 	$L__BB0_315;

	mov.f32 	%f332, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f332;
  cvt.rn.f16.f32 high, %f332;
  mov.b32 %r7504, {low,high};}

	// end inline asm

$L__BB0_315:
	// begin inline asm
	{add.f16x2 %r7583,%r7583,%r7504;
}
	// end inline asm
	setp.eq.s32 	%p166, %r414, 1;
	@%p166 bra 	$L__BB0_317;

	mov.f32 	%f334, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f334;
  cvt.rn.f16.f32 high, %f334;
  mov.b32 %r7505, {low,high};}

	// end inline asm

$L__BB0_317:
	// begin inline asm
	{add.f16x2 %r7581,%r7581,%r7505;
}
	// end inline asm
	mov.u32 	%r2858, 2;
	mov.u32 	%r2869, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2856,%r7498,%r2858,%r2243,%r2869;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2861,%r7502,%r2856;
}
	// end inline asm
	mov.u32 	%r2867, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2865,%r7498,%r2867,%r2243,%r2869;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2870,%r7503,%r2865;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7507,%r2861,%r2870;
}
	// end inline asm
	mov.u32 	%r7506, %r7507;
	@%p165 bra 	$L__BB0_319;

	mov.f32 	%f336, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f336;
  cvt.rn.f16.f32 high, %f336;
  mov.b32 %r7506, {low,high};}

	// end inline asm

$L__BB0_319:
	// begin inline asm
	{add.f16x2 %r7582,%r7582,%r7506;
}
	// end inline asm
	@%p166 bra 	$L__BB0_321;

	mov.f32 	%f338, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f338;
  cvt.rn.f16.f32 high, %f338;
  mov.b32 %r7507, {low,high};}

	// end inline asm

$L__BB0_321:
	// begin inline asm
	{add.f16x2 %r7580,%r7580,%r7507;
}
	// end inline asm
	mov.u32 	%r2891, 4;
	mov.u32 	%r2902, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2889,%r7498,%r2891,%r2243,%r2902;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2894,%r7502,%r2889;
}
	// end inline asm
	mov.u32 	%r2900, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2898,%r7498,%r2900,%r2243,%r2902;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2903,%r7503,%r2898;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7509,%r2894,%r2903;
}
	// end inline asm
	mov.u32 	%r7508, %r7509;
	@%p165 bra 	$L__BB0_323;

	mov.f32 	%f340, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f340;
  mov.b32 %r7508, {low,high};}

	// end inline asm

$L__BB0_323:
	// begin inline asm
	{add.f16x2 %r7579,%r7579,%r7508;
}
	// end inline asm
	@%p166 bra 	$L__BB0_325;

	mov.f32 	%f342, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f342;
  cvt.rn.f16.f32 high, %f342;
  mov.b32 %r7509, {low,high};}

	// end inline asm

$L__BB0_325:
	// begin inline asm
	{add.f16x2 %r7578,%r7578,%r7509;
}
	// end inline asm
	mov.u32 	%r2924, 6;
	mov.u32 	%r2935, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2922,%r7498,%r2924,%r2243,%r2935;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2927,%r7502,%r2922;
}
	// end inline asm
	mov.u32 	%r2933, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2931,%r7498,%r2933,%r2243,%r2935;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2936,%r7503,%r2931;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7511,%r2927,%r2936;
}
	// end inline asm
	mov.u32 	%r7510, %r7511;
	@%p165 bra 	$L__BB0_327;

	mov.f32 	%f344, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f344;
  cvt.rn.f16.f32 high, %f344;
  mov.b32 %r7510, {low,high};}

	// end inline asm

$L__BB0_327:
	// begin inline asm
	{add.f16x2 %r7577,%r7577,%r7510;
}
	// end inline asm
	@%p166 bra 	$L__BB0_329;

	mov.f32 	%f346, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f346;
  cvt.rn.f16.f32 high, %f346;
  mov.b32 %r7511, {low,high};}

	// end inline asm

$L__BB0_329:
	// begin inline asm
	{add.f16x2 %r7575,%r7575,%r7511;
}
	// end inline asm
	mov.u32 	%r2957, 8;
	mov.u32 	%r2968, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2955,%r7498,%r2957,%r2243,%r2968;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2960,%r7502,%r2955;
}
	// end inline asm
	mov.u32 	%r2966, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2964,%r7498,%r2966,%r2243,%r2968;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2969,%r7503,%r2964;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7513,%r2960,%r2969;
}
	// end inline asm
	mov.u32 	%r7512, %r7513;
	@%p165 bra 	$L__BB0_331;

	mov.f32 	%f348, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f348;
  cvt.rn.f16.f32 high, %f348;
  mov.b32 %r7512, {low,high};}

	// end inline asm

$L__BB0_331:
	// begin inline asm
	{add.f16x2 %r7576,%r7576,%r7512;
}
	// end inline asm
	@%p166 bra 	$L__BB0_333;

	mov.f32 	%f350, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f350;
  cvt.rn.f16.f32 high, %f350;
  mov.b32 %r7513, {low,high};}

	// end inline asm

$L__BB0_333:
	// begin inline asm
	{add.f16x2 %r7574,%r7574,%r7513;
}
	// end inline asm
	mov.u32 	%r2990, 10;
	mov.u32 	%r3001, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2988,%r7498,%r2990,%r2243,%r3001;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2993,%r7502,%r2988;
}
	// end inline asm
	mov.u32 	%r2999, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2997,%r7498,%r2999,%r2243,%r3001;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3002,%r7503,%r2997;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7515,%r2993,%r3002;
}
	// end inline asm
	mov.u32 	%r7514, %r7515;
	@%p165 bra 	$L__BB0_335;

	mov.f32 	%f352, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f352;
  cvt.rn.f16.f32 high, %f352;
  mov.b32 %r7514, {low,high};}

	// end inline asm

$L__BB0_335:
	// begin inline asm
	{add.f16x2 %r7573,%r7573,%r7514;
}
	// end inline asm
	@%p166 bra 	$L__BB0_337;

	mov.f32 	%f354, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f354;
  cvt.rn.f16.f32 high, %f354;
  mov.b32 %r7515, {low,high};}

	// end inline asm

$L__BB0_337:
	// begin inline asm
	{add.f16x2 %r7570,%r7570,%r7515;
}
	// end inline asm
	mov.u32 	%r3023, 12;
	mov.u32 	%r3034, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3021,%r7498,%r3023,%r2243,%r3034;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3026,%r7502,%r3021;
}
	// end inline asm
	mov.u32 	%r3032, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r3030,%r7498,%r3032,%r2243,%r3034;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3035,%r7503,%r3030;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7517,%r3026,%r3035;
}
	// end inline asm
	mov.u32 	%r7516, %r7517;
	@%p165 bra 	$L__BB0_339;

	mov.f32 	%f356, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f356;
  cvt.rn.f16.f32 high, %f356;
  mov.b32 %r7516, {low,high};}

	// end inline asm

$L__BB0_339:
	// begin inline asm
	{add.f16x2 %r7572,%r7572,%r7516;
}
	// end inline asm
	@%p166 bra 	$L__BB0_341;

	mov.f32 	%f358, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f358;
  cvt.rn.f16.f32 high, %f358;
  mov.b32 %r7517, {low,high};}

	// end inline asm

$L__BB0_341:
	// begin inline asm
	{add.f16x2 %r7569,%r7569,%r7517;
}
	// end inline asm
	mov.u32 	%r3056, 14;
	mov.u32 	%r3067, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3054,%r7498,%r3056,%r2243,%r3067;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3059,%r7502,%r3054;
}
	// end inline asm
	mov.u32 	%r3065, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r3063,%r7498,%r3065,%r2243,%r3067;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3068,%r7503,%r3063;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7519,%r3059,%r3068;
}
	// end inline asm
	mov.u32 	%r7518, %r7519;
	@%p165 bra 	$L__BB0_343;

	mov.f32 	%f360, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f360;
  cvt.rn.f16.f32 high, %f360;
  mov.b32 %r7518, {low,high};}

	// end inline asm

$L__BB0_343:
	// begin inline asm
	{add.f16x2 %r7567,%r7567,%r7518;
}
	// end inline asm
	@%p166 bra 	$L__BB0_345;

	mov.f32 	%f362, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f362;
  cvt.rn.f16.f32 high, %f362;
  mov.b32 %r7519, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r7564,%r7564,%r7519;
}
	// end inline asm
	mov.u32 	%r3089, 16;
	mov.u32 	%r3100, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3087,%r7498,%r3089,%r2243,%r3100;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3092,%r7502,%r3087;
}
	// end inline asm
	mov.u32 	%r3098, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r3096,%r7498,%r3098,%r2243,%r3100;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3101,%r7503,%r3096;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7521,%r3092,%r3101;
}
	// end inline asm
	mov.u32 	%r7520, %r7521;
	@%p165 bra 	$L__BB0_347;

	mov.f32 	%f364, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f364;
  cvt.rn.f16.f32 high, %f364;
  mov.b32 %r7520, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r7566,%r7566,%r7520;
}
	// end inline asm
	@%p166 bra 	$L__BB0_349;

	mov.f32 	%f366, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f366;
  cvt.rn.f16.f32 high, %f366;
  mov.b32 %r7521, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r7563,%r7563,%r7521;
}
	// end inline asm
	mov.u32 	%r3122, 18;
	mov.u32 	%r3133, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3120,%r7498,%r3122,%r2243,%r3133;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3125,%r7502,%r3120;
}
	// end inline asm
	mov.u32 	%r3131, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r3129,%r7498,%r3131,%r2243,%r3133;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3134,%r7503,%r3129;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7523,%r3125,%r3134;
}
	// end inline asm
	mov.u32 	%r7522, %r7523;
	@%p165 bra 	$L__BB0_351;

	mov.f32 	%f368, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f368;
  cvt.rn.f16.f32 high, %f368;
  mov.b32 %r7522, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r7561,%r7561,%r7522;
}
	// end inline asm
	@%p166 bra 	$L__BB0_353;

	mov.f32 	%f370, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f370;
  cvt.rn.f16.f32 high, %f370;
  mov.b32 %r7523, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r7560,%r7560,%r7523;
}
	// end inline asm
	mov.u32 	%r3155, 20;
	mov.u32 	%r3166, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3153,%r7498,%r3155,%r2243,%r3166;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3158,%r7502,%r3153;
}
	// end inline asm
	mov.u32 	%r3164, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r3162,%r7498,%r3164,%r2243,%r3166;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3167,%r7503,%r3162;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7525,%r3158,%r3167;
}
	// end inline asm
	mov.u32 	%r7524, %r7525;
	@%p165 bra 	$L__BB0_355;

	mov.f32 	%f372, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f372;
  cvt.rn.f16.f32 high, %f372;
  mov.b32 %r7524, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r7559,%r7559,%r7524;
}
	// end inline asm
	@%p166 bra 	$L__BB0_357;

	mov.f32 	%f374, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f374;
  cvt.rn.f16.f32 high, %f374;
  mov.b32 %r7525, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r7557,%r7557,%r7525;
}
	// end inline asm
	mov.u32 	%r3188, 22;
	mov.u32 	%r3199, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3186,%r7498,%r3188,%r2243,%r3199;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3191,%r7502,%r3186;
}
	// end inline asm
	mov.u32 	%r3197, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r3195,%r7498,%r3197,%r2243,%r3199;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3200,%r7503,%r3195;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7527,%r3191,%r3200;
}
	// end inline asm
	mov.u32 	%r7526, %r7527;
	@%p165 bra 	$L__BB0_359;

	mov.f32 	%f376, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f376;
  cvt.rn.f16.f32 high, %f376;
  mov.b32 %r7526, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r7555,%r7555,%r7526;
}
	// end inline asm
	@%p166 bra 	$L__BB0_361;

	mov.f32 	%f378, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f378;
  cvt.rn.f16.f32 high, %f378;
  mov.b32 %r7527, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r7552,%r7552,%r7527;
}
	// end inline asm
	mov.u32 	%r3221, 24;
	mov.u32 	%r3232, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3219,%r7498,%r3221,%r2243,%r3232;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3224,%r7502,%r3219;
}
	// end inline asm
	mov.u32 	%r3230, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r3228,%r7498,%r3230,%r2243,%r3232;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3233,%r7503,%r3228;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7529,%r3224,%r3233;
}
	// end inline asm
	mov.u32 	%r7528, %r7529;
	@%p165 bra 	$L__BB0_363;

	mov.f32 	%f380, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f380;
  cvt.rn.f16.f32 high, %f380;
  mov.b32 %r7528, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r7554,%r7554,%r7528;
}
	// end inline asm
	@%p166 bra 	$L__BB0_365;

	mov.f32 	%f382, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f382;
  cvt.rn.f16.f32 high, %f382;
  mov.b32 %r7529, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r7551,%r7551,%r7529;
}
	// end inline asm
	mov.u32 	%r3254, 26;
	mov.u32 	%r3265, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3252,%r7498,%r3254,%r2243,%r3265;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3257,%r7502,%r3252;
}
	// end inline asm
	mov.u32 	%r3263, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r3261,%r7498,%r3263,%r2243,%r3265;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3266,%r7503,%r3261;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7531,%r3257,%r3266;
}
	// end inline asm
	mov.u32 	%r7530, %r7531;
	@%p165 bra 	$L__BB0_367;

	mov.f32 	%f384, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f384;
  cvt.rn.f16.f32 high, %f384;
  mov.b32 %r7530, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r7549,%r7549,%r7530;
}
	// end inline asm
	@%p166 bra 	$L__BB0_369;

	mov.f32 	%f386, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f386;
  cvt.rn.f16.f32 high, %f386;
  mov.b32 %r7531, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r7546,%r7546,%r7531;
}
	// end inline asm
	mov.u32 	%r3287, 28;
	mov.u32 	%r3298, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3285,%r7498,%r3287,%r2243,%r3298;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3290,%r7502,%r3285;
}
	// end inline asm
	mov.u32 	%r3296, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r3294,%r7498,%r3296,%r2243,%r3298;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3299,%r7503,%r3294;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7533,%r3290,%r3299;
}
	// end inline asm
	mov.u32 	%r7532, %r7533;
	@%p165 bra 	$L__BB0_371;

	mov.f32 	%f388, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f388;
  cvt.rn.f16.f32 high, %f388;
  mov.b32 %r7532, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r7548,%r7548,%r7532;
}
	// end inline asm
	@%p166 bra 	$L__BB0_373;

	mov.f32 	%f390, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f390;
  cvt.rn.f16.f32 high, %f390;
  mov.b32 %r7533, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r7545,%r7545,%r7533;
}
	// end inline asm
	mov.u32 	%r3329, 31;
	mov.u32 	%r3320, 30;
	mov.u32 	%r3331, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3318,%r7498,%r3320,%r2243,%r3331;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3323,%r7502,%r3318;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3327,%r7498,%r3329,%r2243,%r3331;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3332,%r7503,%r3327;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7535,%r3323,%r3332;
}
	// end inline asm
	mov.u32 	%r7534, %r7535;
	@%p165 bra 	$L__BB0_375;

	mov.f32 	%f392, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f392;
  cvt.rn.f16.f32 high, %f392;
  mov.b32 %r7534, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r7541,%r7541,%r7534;
}
	// end inline asm
	@%p166 bra 	$L__BB0_377;

	mov.f32 	%f394, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f394;
  cvt.rn.f16.f32 high, %f394;
  mov.b32 %r7535, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r7539,%r7539,%r7535;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_304:
	mov.f32 	%f322, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7500, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7501, {low,high};}

	// end inline asm

$L__BB0_306:
	setp.eq.s32 	%p158, %r657, %r1742;
	@%p158 bra 	$L__BB0_309;
	bra.uni 	$L__BB0_307;

$L__BB0_309:
	// begin inline asm
	{mul.f16x2 %r2719,%r7500,%r7482;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7583,%r7583,%r2719;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2725,%r7500,%r7480;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7571,%r7571,%r2725;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2731,%r7500,%r7486;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7573,%r7573,%r2731;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2737,%r7500,%r7484;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7553,%r7553,%r2737;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2743,%r7500,%r7490;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7555,%r7555,%r2743;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2749,%r7500,%r7488;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7540,%r7540,%r2749;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2755,%r7501,%r7486;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7577,%r7577,%r2755;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2761,%r7501,%r7484;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7558,%r7558,%r2761;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2767,%r7500,%r7481;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7581,%r7581,%r2767;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2773,%r7500,%r7479;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7568,%r7568,%r2773;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2779,%r7500,%r7485;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7570,%r7570,%r2779;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2785,%r7500,%r7483;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7550,%r7550,%r2785;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2791,%r7500,%r7489;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7552,%r7552,%r2791;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2797,%r7500,%r7487;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7538,%r7538,%r2797;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2803,%r7501,%r7485;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7575,%r7575,%r2803;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2809,%r7501,%r7483;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7556,%r7556,%r2809;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_307:
	add.s32 	%r2622, %r1742, -2;
	setp.ne.s32 	%p159, %r657, %r2622;
	@%p159 bra 	$L__BB0_378;

	// begin inline asm
	{mul.f16x2 %r2623,%r7500,%r7486;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7561,%r7561,%r2623;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2629,%r7500,%r7484;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7543,%r7543,%r2629;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2635,%r7501,%r7482;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7579,%r7579,%r2635;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2641,%r7501,%r7480;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7565,%r7565,%r2641;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2647,%r7501,%r7486;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7567,%r7567,%r2647;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2653,%r7501,%r7484;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7547,%r7547,%r2653;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2659,%r7501,%r7490;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7549,%r7549,%r2659;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2665,%r7501,%r7488;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7537,%r7537,%r2665;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2671,%r7500,%r7485;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7560,%r7560,%r2671;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2677,%r7500,%r7483;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7542,%r7542,%r2677;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2683,%r7501,%r7481;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7578,%r7578,%r2683;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2689,%r7501,%r7479;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7562,%r7562,%r2689;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2695,%r7501,%r7485;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7564,%r7564,%r2695;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2701,%r7501,%r7483;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7544,%r7544,%r2701;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2707,%r7501,%r7489;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7546,%r7546,%r2707;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2713,%r7501,%r7487;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7536,%r7536,%r2713;
}
	// end inline asm

$L__BB0_378:
	setp.lt.s32 	%p197, %r23, 1;
	mov.u32 	%r7680, %r2149;
	mov.u32 	%r7681, %r2149;
	mov.u32 	%r7686, %r2149;
	mov.u32 	%r7687, %r2149;
	mov.u32 	%r7688, %r2149;
	mov.u32 	%r7689, %r2149;
	mov.u32 	%r7690, %r2149;
	mov.u32 	%r7691, %r2149;
	mov.u32 	%r7698, %r2149;
	mov.u32 	%r7699, %r2149;
	@%p197 bra 	$L__BB0_380;

	mul.lo.s32 	%r3350, %r1733, 320;
	add.s32 	%r3351, %r23, -1;
	mul.lo.s32 	%r3352, %r24, 320;
	mad.lo.s32 	%r3353, %r3350, %r3351, %r3352;
	add.s32 	%r3356, %r1788, -64;
	mad.lo.s32 	%r3361, %r3356, %r2137, %r2134;
	add.s32 	%r3362, %r3353, %r3361;
	shl.b32 	%r3363, %r3362, 2;
	mov.u32 	%r3364, _ZN6kernel5shmemE;
	add.s32 	%r3365, %r3364, %r3363;
	shl.b32 	%r3366, %r28, 4;
	add.s32 	%r3367, %r3365, %r3366;
	ld.shared.v4.u32 	{%r7691, %r7689, %r7681, %r7680}, [%r3367];
	shl.b32 	%r3372, %r28, 3;
	add.s32 	%r3373, %r3365, %r3372;
	ld.shared.v2.u32 	{%r7690, %r7688}, [%r3373+512];
	ld.shared.v4.u32 	{%r7699, %r7698, %r7687, %r7686}, [%r3367+768];

$L__BB0_380:
	setp.lt.s32 	%p198, %r24, 1;
	mov.u32 	%r7682, %r2149;
	mov.u32 	%r7683, %r2149;
	mov.u32 	%r7684, %r2149;
	mov.u32 	%r7685, %r2149;
	mov.u32 	%r7692, %r2149;
	mov.u32 	%r7693, %r2149;
	mov.u32 	%r7694, %r2149;
	mov.u32 	%r7695, %r2149;
	mov.u32 	%r7696, %r2149;
	mov.u32 	%r7697, %r2149;
	mov.u32 	%r7700, %r2149;
	mov.u32 	%r7701, %r2149;
	@%p198 bra 	$L__BB0_383;

	mad.lo.s32 	%r3385, %r2213, 384, %r2140;
	add.s32 	%r3388, %r24, -1;
	mad.lo.s32 	%r3389, %r2135, %r3388, %r3385;
	add.s32 	%r3395, %r3389, %r2138;
	shl.b32 	%r3396, %r3395, 2;
	mov.u32 	%r3397, _ZN6kernel5shmemE;
	add.s32 	%r3398, %r3397, %r3396;
	shl.b32 	%r3399, %r28, 4;
	add.s32 	%r3400, %r3398, %r3399;
	ld.shared.v4.u32 	{%r7701, %r7700, %r7696, %r7694}, [%r3400];
	shl.b32 	%r3405, %r28, 3;
	add.s32 	%r3406, %r3398, %r3405;
	ld.shared.v2.u32 	{%r7697, %r7695}, [%r3406+512];
	ld.shared.v4.u32 	{%r7693, %r7692, %r7684, %r7682}, [%r3400+768];
	mov.u32 	%r7683, %r2149;
	mov.u32 	%r7685, %r2149;
	@%p197 bra 	$L__BB0_383;

	add.s32 	%r7223, %r3406, 512;
	ld.shared.v2.u32 	{%r7685, %r7683}, [%r7223+768];

$L__BB0_383:
	setp.eq.s32 	%p200, %r23, 0;
	@%p200 bra 	$L__BB0_388;

	setp.eq.s32 	%p201, %r24, %r2137;
	@%p201 bra 	$L__BB0_386;

	sub.s32 	%r3416, %r1732, %r23;
	mul.lo.s32 	%r3418, %r52, %r24;
	mad.lo.s32 	%r3419, %r3416, 384, %r3418;
	mad.lo.s32 	%r3422, %r2135, %r2137, %r3419;
	mad.lo.s32 	%r3425, %r2133, %r2132, %r3422;
	shl.b32 	%r3426, %r3425, 2;
	mov.u32 	%r3427, _ZN6kernel5shmemE;
	add.s32 	%r3428, %r3427, %r3426;
	shl.b32 	%r3429, %r28, 4;
	add.s32 	%r3430, %r3428, %r3429;
	ld.shared.v4.u32 	{%r7610, %r7613, %r7617, %r7616}, [%r3430];

$L__BB0_386:
	shl.b32 	%r3435, %r24, 8;
	shl.b32 	%r3439, %r1733, 8;
	or.b32  	%r3440, %r3439, 128;
	add.s32 	%r3441, %r23, -1;
	mad.lo.s32 	%r3442, %r3440, %r3441, %r2140;
	add.s32 	%r3443, %r3442, %r3435;
	shl.b32 	%r3444, %r3443, 2;
	mov.u32 	%r3445, _ZN6kernel5shmemE;
	add.s32 	%r3446, %r3445, %r3444;
	setp.ne.s32 	%p202, %r24, %r2137;
	shl.b32 	%r3448, %r28, 4;
	add.s32 	%r916, %r3446, %r3448;
	ld.shared.v4.u32 	{%r7619, %r7621, %r7618, %r7620}, [%r916];
	ld.shared.v4.u32 	{%r7615, %r7612, %r7611, %r7614}, [%r916+512];
	@%p202 bra 	$L__BB0_388;

	ld.shared.v4.u32 	{%r7610, %r7613, %r7617, %r7616}, [%r916+1024];

$L__BB0_388:
	setp.eq.s32 	%p203, %r24, 0;
	@%p203 bra 	$L__BB0_391;

	mul.lo.s32 	%r3462, %r52, %r24;
	sub.s32 	%r3463, %r3462, %r52;
	mad.lo.s32 	%r3466, %r2213, 384, %r3463;
	mad.lo.s32 	%r3469, %r2135, %r2137, %r3466;
	mad.lo.s32 	%r3472, %r2133, %r2132, %r3469;
	shl.b32 	%r3473, %r3472, 2;
	mov.u32 	%r3474, _ZN6kernel5shmemE;
	add.s32 	%r3475, %r3474, %r3473;
	shl.b32 	%r3476, %r28, 4;
	add.s32 	%r941, %r3475, %r3476;
	ld.shared.v4.u32 	{%r7630, %r7629, %r7634, %r7632}, [%r941];
	ld.shared.v4.u32 	{%r7628, %r7625, %r7622, %r7623}, [%r941+512];
	ld.shared.v4.u32 	{%r7627, %r7624, %r7626, %r7633}, [%r941+1024];
	@%p200 bra 	$L__BB0_391;

	ld.shared.v4.u32 	{%r7636, %r7637, %r7631, %r7635}, [%r941+1536];

$L__BB0_391:
	setp.ne.s32 	%p205, %r23, 0;
	@%p205 bra 	$L__BB0_396;

	ld.param.u64 	%rd549, [%rd1+56];
	cvta.to.global.u64 	%rd548, %rd549;
	mad.lo.s32 	%r3494, %r654, %r1735, %r26;
	mul.lo.s32 	%r3495, %r1733, %r3494;
	mul.lo.s32 	%r3496, %r3495, 768;
	mad.lo.s32 	%r3497, %r24, 384, %r3496;
	add.s32 	%r3498, %r3497, -64;
	mul.wide.s32 	%rd271, %r3498, 4;
	add.s64 	%rd272, %rd548, %rd271;
	add.s64 	%rd274, %rd272, %rd273;
	ld.global.v4.u32 	{%r7645, %r7643, %r7652, %r7653}, [%rd274+256];
	ld.global.v4.u32 	{%r7651, %r7648, %r7640, %r7641}, [%rd274+1024];
	add.s64 	%rd27, %rd272, %rd275;
	@%p203 bra 	$L__BB0_394;

	ld.global.v2.u32 	{%r7646, %r7649}, [%rd27];

$L__BB0_394:
	setp.ne.s32 	%p207, %r24, %r2137;
	ld.global.v2.u32 	{%r7644, %r7642}, [%rd27+768];
	@%p207 bra 	$L__BB0_396;

	ld.global.v2.u32 	{%r7650, %r7647}, [%rd27+1536];

$L__BB0_396:
	setp.ne.s32 	%p208, %r24, 0;
	@%p208 bra 	$L__BB0_398;

	ld.param.u64 	%rd551, [%rd1+56];
	cvta.to.global.u64 	%rd550, %rd551;
	mad.lo.s32 	%r3515, %r655, %r1734, %r25;
	mad.lo.s32 	%r3519, %r3515, %r1789, %r412;
	mul.wide.s32 	%rd276, %r3519, 4;
	add.s64 	%rd277, %rd550, %rd276;
	add.s64 	%rd279, %rd277, %rd273;
	ld.global.v4.u32 	{%r7665, %r7664, %r7660, %r7658}, [%rd279+256];
	ld.global.v4.u32 	{%r7655, %r7654, %r7657, %r7663}, [%rd279+1024];
	add.s64 	%rd281, %rd277, %rd275;
	ld.global.v2.u32 	{%r7661, %r7659}, [%rd281+768];
	ld.global.v2.u32 	{%r7646, %r7649}, [%rd281+1536];

$L__BB0_398:
	add.s32 	%r3532, %r1737, -1;
	setp.lt.s32 	%p209, %r656, %r3532;
	setp.gt.s32 	%p210, %r656, 1;
	and.pred  	%p211, %p210, %p209;
	setp.gt.s32 	%p212, %r657, 1;
	and.pred  	%p213, %p211, %p212;
	add.s32 	%r3533, %r1738, -2;
	setp.lt.s32 	%p214, %r657, %r3533;
	and.pred  	%p11, %p214, %p213;
	not.pred 	%p215, %p11;
	@%p215 bra 	$L__BB0_409;

	ld.param.u64 	%rd553, [%rd1+64];
	cvta.to.global.u64 	%rd552, %rd553;
	mad.lo.s32 	%r1036, %r657, %r1737, %r656;
	shl.b32 	%r3534, %r1036, 6;
	mul.wide.s32 	%rd284, %r3534, 4;
	add.s64 	%rd29, %rd552, %rd284;
	and.pred  	%p218, %p205, %p208;
	@%p218 bra 	$L__BB0_401;

	add.s64 	%rd286, %rd29, %rd275;
	ld.global.v2.u32 	{%r7685, %r7683}, [%rd286+256];

$L__BB0_401:
	@%p205 bra 	$L__BB0_403;

	shl.b32 	%r3537, %r1737, 5;
	cvt.s64.s32 	%rd287, %r3537;
	cvt.s64.s32 	%rd288, %r28;
	add.s64 	%rd289, %rd287, %rd288;
	shl.b64 	%rd290, %rd289, 3;
	add.s64 	%rd291, %rd29, %rd290;
	ld.global.v2.u32 	{%r7690, %r7688}, [%rd291];

$L__BB0_403:
	@%p208 bra 	$L__BB0_405;

	shl.b32 	%r3540, %r1737, 5;
	neg.s32 	%r3541, %r3540;
	cvt.s64.s32 	%rd292, %r3541;
	cvt.s64.s32 	%rd293, %r28;
	add.s64 	%rd294, %rd292, %rd293;
	shl.b64 	%rd295, %rd294, 3;
	add.s64 	%rd296, %rd29, %rd295;
	ld.global.v2.u32 	{%r7697, %r7695}, [%rd296];

$L__BB0_405:
	mad.lo.s32 	%r7234, %r657, %r1737, %r656;
	ld.param.u64 	%rd555, [%rd1+64];
	cvta.to.global.u64 	%rd554, %rd555;
	shl.b32 	%r3544, %r1738, 6;
	shl.b32 	%r3545, %r7234, 7;
	mad.lo.s32 	%r3546, %r3544, %r1737, %r3545;
	mul.wide.s32 	%rd297, %r3546, 4;
	add.s64 	%rd30, %rd554, %rd297;
	@%p205 bra 	$L__BB0_407;

	shl.b32 	%r3547, %r1737, 5;
	cvt.s64.s32 	%rd298, %r3547;
	cvt.s64.s32 	%rd299, %r28;
	add.s64 	%rd300, %rd298, %rd299;
	shl.b64 	%rd301, %rd300, 4;
	add.s64 	%rd302, %rd30, %rd301;
	ld.global.v4.u32 	{%r7691, %r7689, %r7681, %r7680}, [%rd302];
	shl.b32 	%r3552, %r1737, 6;
	add.s32 	%r3553, %r3552, -32;
	cvt.s64.s32 	%rd303, %r3553;
	add.s64 	%rd304, %rd303, %rd299;
	shl.b64 	%rd305, %rd304, 4;
	add.s64 	%rd306, %rd30, %rd305;
	ld.global.v4.u32 	{%r7699, %r7698, %r7687, %r7686}, [%rd306];

$L__BB0_407:
	@%p208 bra 	$L__BB0_409;

	shl.b32 	%r3558, %r1737, 5;
	xor.b32  	%r3559, %r3558, -32;
	cvt.s64.s32 	%rd307, %r3559;
	cvt.s64.s32 	%rd308, %r28;
	add.s64 	%rd309, %rd307, %rd308;
	shl.b64 	%rd310, %rd309, 4;
	add.s64 	%rd311, %rd30, %rd310;
	ld.global.v4.u32 	{%r7701, %r7700, %r7696, %r7694}, [%rd311];
	add.s64 	%rd313, %rd30, %rd273;
	ld.global.v4.u32 	{%r7693, %r7692, %r7684, %r7682}, [%rd313];

$L__BB0_409:
	mov.u32 	%r3573, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3569,%r7445,%r415,%r2243,%r3573;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3569;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7445;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3576, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3577,%r7454,%r3576;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3580,%r7325,%r3577;
}
	// end inline asm
	@%p12 bra 	$L__BB0_411;
	bra.uni 	$L__BB0_410;

$L__BB0_411:
	// begin inline asm
	{neg.f16x2 %r7702,%r7583;
}
	// end inline asm
	bra.uni 	$L__BB0_412;

$L__BB0_410:
	// begin inline asm
	{mul.f16x2 %r7702,%r7326,%r3577;
}
	// end inline asm

$L__BB0_412:
	mov.u32 	%r3593, 31;
	mov.u32 	%r3616, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3591,%r7702,%r3593,%r2243,%r3616;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3596,%r3580,%r3591;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3599,%r7453,%r7463;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3602,%r3599,%r3596;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3605,%r7475,%r3602;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3608,%r7583,%r3605;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3612,%r7446,%r415,%r2243,%r3616;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3612;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7446;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3619, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3620,%r7455,%r3619;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3623,%r7325,%r3620;
}
	// end inline asm
	mov.u32 	%r7703, %r7582;
	@%p12 bra 	$L__BB0_414;

	// begin inline asm
	{mul.f16x2 %r7703,%r7326,%r3620;
}
	// end inline asm

$L__BB0_414:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3634,%r7703,%r3593,%r2243,%r3616;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3639,%r3623,%r3634;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3642,%r7453,%r7476;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3645,%r3639,%r3642;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3648,%r7474,%r3645;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3651,%r7582,%r3648;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3654,%r7445,%r7454;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3657,%r7329,%r3654;
}
	// end inline asm
	@%p12 bra 	$L__BB0_416;
	bra.uni 	$L__BB0_415;

$L__BB0_416:
	// begin inline asm
	{neg.f16x2 %r7704,%r7581;
}
	// end inline asm
	bra.uni 	$L__BB0_417;

$L__BB0_415:
	// begin inline asm
	{mul.f16x2 %r7704,%r7330,%r3654;
}
	// end inline asm

$L__BB0_417:
	mov.u32 	%r3670, 31;
	mov.u32 	%r3672, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3668,%r7704,%r3670,%r2243,%r3672;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3673,%r3657,%r3668;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3676,%r7444,%r7460;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3679,%r3676,%r3673;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3682,%r7470,%r3679;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3685,%r7581,%r3682;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3688,%r7446,%r7455;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3691,%r7329,%r3688;
}
	// end inline asm
	mov.u32 	%r7705, %r7580;
	@%p12 bra 	$L__BB0_419;

	// begin inline asm
	{mul.f16x2 %r7705,%r7330,%r3688;
}
	// end inline asm

$L__BB0_419:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3700,%r7705,%r3670,%r2243,%r3672;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3705,%r3691,%r3700;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3708,%r7444,%r7471;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3711,%r3705,%r3708;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3714,%r7469,%r3711;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3717,%r7580,%r3714;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3721,%r7429,%r415,%r2243,%r3672;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3721;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7429;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3728, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3729,%r7437,%r3728;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3732,%r7325,%r3729;
}
	// end inline asm
	@%p12 bra 	$L__BB0_421;
	bra.uni 	$L__BB0_420;

$L__BB0_421:
	// begin inline asm
	{neg.f16x2 %r7706,%r7579;
}
	// end inline asm
	bra.uni 	$L__BB0_422;

$L__BB0_420:
	// begin inline asm
	{mul.f16x2 %r7706,%r7326,%r3729;
}
	// end inline asm

$L__BB0_422:
	mov.u32 	%r3747, 31;
	mov.u32 	%r3749, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3745,%r7706,%r3747,%r2243,%r3749;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3750,%r3732,%r3745;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3753,%r7436,%r7453;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3756,%r3753,%r3750;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3759,%r7467,%r3756;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3762,%r7579,%r3759;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3765,%r7429,%r7437;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3768,%r7329,%r3765;
}
	// end inline asm
	@%p12 bra 	$L__BB0_424;
	bra.uni 	$L__BB0_423;

$L__BB0_424:
	// begin inline asm
	{neg.f16x2 %r7707,%r7578;
}
	// end inline asm
	bra.uni 	$L__BB0_425;

$L__BB0_423:
	// begin inline asm
	{mul.f16x2 %r7707,%r7330,%r3765;
}
	// end inline asm

$L__BB0_425:
	mov.u32 	%r3781, 31;
	mov.u32 	%r3804, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3779,%r7707,%r3781,%r2243,%r3804;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3784,%r3768,%r3779;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3787,%r7428,%r7444;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3790,%r3787,%r3784;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3793,%r7465,%r3790;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3796,%r7578,%r3793;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3800,%r7413,%r415,%r2243,%r3804;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3800;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7413;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3807, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3808,%r7418,%r3807;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3811,%r7325,%r3808;
}
	// end inline asm
	@%p12 bra 	$L__BB0_427;
	bra.uni 	$L__BB0_426;

$L__BB0_427:
	// begin inline asm
	{neg.f16x2 %r7708,%r7577;
}
	// end inline asm
	bra.uni 	$L__BB0_428;

$L__BB0_426:
	// begin inline asm
	{mul.f16x2 %r7708,%r7326,%r3808;
}
	// end inline asm

$L__BB0_428:
	mov.u32 	%r3826, 31;
	mov.u32 	%r3849, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3824,%r7708,%r3826,%r2243,%r3849;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3829,%r3811,%r3824;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3832,%r7417,%r7634;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3835,%r3832,%r3829;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3838,%r7701,%r3835;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3841,%r7577,%r3838;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3845,%r7414,%r415,%r2243,%r3849;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3845;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7414;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3852, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3853,%r7419,%r3852;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3856,%r7325,%r3853;
}
	// end inline asm
	mov.u32 	%r7709, %r7576;
	@%p12 bra 	$L__BB0_430;

	// begin inline asm
	{mul.f16x2 %r7709,%r7326,%r3853;
}
	// end inline asm

$L__BB0_430:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3867,%r7709,%r3826,%r2243,%r3849;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3872,%r3856,%r3867;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3875,%r7417,%r7463;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3878,%r3872,%r3875;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3881,%r7462,%r3878;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3884,%r7576,%r3881;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3887,%r7413,%r7418;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3890,%r7329,%r3887;
}
	// end inline asm
	@%p12 bra 	$L__BB0_432;
	bra.uni 	$L__BB0_431;

$L__BB0_432:
	// begin inline asm
	{neg.f16x2 %r7710,%r7575;
}
	// end inline asm
	bra.uni 	$L__BB0_433;

$L__BB0_431:
	// begin inline asm
	{mul.f16x2 %r7710,%r7330,%r3887;
}
	// end inline asm

$L__BB0_433:
	mov.u32 	%r3903, 31;
	mov.u32 	%r3905, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3901,%r7710,%r3903,%r2243,%r3905;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3906,%r3890,%r3901;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3909,%r7412,%r7632;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3912,%r3909,%r3906;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3915,%r7700,%r3912;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3918,%r7575,%r3915;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3921,%r7414,%r7419;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3924,%r7329,%r3921;
}
	// end inline asm
	mov.u32 	%r7711, %r7574;
	@%p12 bra 	$L__BB0_435;

	// begin inline asm
	{mul.f16x2 %r7711,%r7330,%r3921;
}
	// end inline asm

$L__BB0_435:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3933,%r7711,%r3903,%r2243,%r3905;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3938,%r3924,%r3933;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3941,%r7412,%r7460;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3944,%r3938,%r3941;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3947,%r7459,%r3944;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3950,%r7574,%r3947;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3954,%r7401,%r415,%r2243,%r3905;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3954;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7401;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3961, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3962,%r7408,%r3961;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3965,%r7325,%r3962;
}
	// end inline asm
	@%p12 bra 	$L__BB0_437;
	bra.uni 	$L__BB0_436;

$L__BB0_437:
	// begin inline asm
	{neg.f16x2 %r7712,%r7573;
}
	// end inline asm
	bra.uni 	$L__BB0_438;

$L__BB0_436:
	// begin inline asm
	{mul.f16x2 %r7712,%r7326,%r3962;
}
	// end inline asm

$L__BB0_438:
	mov.u32 	%r3980, 31;
	mov.u32 	%r4003, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3978,%r7712,%r3980,%r2243,%r4003;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3983,%r3965,%r3978;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3986,%r7407,%r7417;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3989,%r3986,%r3983;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3992,%r554,%r3989;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7478,%r7573,%r3992;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3999,%r7402,%r415,%r2243,%r4003;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3999;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7402;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4006, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4007,%r7409,%r4006;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4010,%r7325,%r4007;
}
	// end inline asm
	mov.u32 	%r7713, %r7572;
	@%p12 bra 	$L__BB0_440;

	// begin inline asm
	{mul.f16x2 %r7713,%r7326,%r4007;
}
	// end inline asm

$L__BB0_440:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4021,%r7713,%r3980,%r2243,%r4003;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4026,%r4010,%r4021;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4029,%r7407,%r7453;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4032,%r4026,%r4029;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4035,%r553,%r4032;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7477,%r7572,%r4035;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4041,%r7408,%r7454;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4044,%r7409,%r7419;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4047,%r4041,%r4044;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4050,%r7450,%r4047;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4053,%r7571,%r4050;
}
	// end inline asm
	@%p12 bra 	$L__BB0_442;

	mov.u32 	%r7571, %r4053;

$L__BB0_442:
	// begin inline asm
	{sub.f16x2 %r4058,%r7401,%r7408;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4061,%r7329,%r4058;
}
	// end inline asm
	@%p12 bra 	$L__BB0_444;
	bra.uni 	$L__BB0_443;

$L__BB0_444:
	// begin inline asm
	{neg.f16x2 %r7715,%r7570;
}
	// end inline asm
	bra.uni 	$L__BB0_445;

$L__BB0_443:
	// begin inline asm
	{mul.f16x2 %r7715,%r7330,%r4058;
}
	// end inline asm

$L__BB0_445:
	mov.u32 	%r4072, 31;
	mov.u32 	%r4074, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4070,%r7715,%r4072,%r2243,%r4074;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4075,%r4061,%r4070;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4078,%r7400,%r7412;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4081,%r4078,%r4075;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4084,%r545,%r4081;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7473,%r7570,%r4084;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4090,%r7402,%r7409;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4093,%r7329,%r4090;
}
	// end inline asm
	mov.u32 	%r7716, %r7569;
	@%p12 bra 	$L__BB0_447;

	// begin inline asm
	{mul.f16x2 %r7716,%r7330,%r4090;
}
	// end inline asm

$L__BB0_447:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4102,%r7716,%r4072,%r2243,%r4074;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4107,%r4093,%r4102;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4110,%r7400,%r7444;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4113,%r4107,%r4110;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4116,%r544,%r4113;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7472,%r7569,%r4116;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4122,%r7401,%r7445;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4125,%r7402,%r7414;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4128,%r4122,%r4125;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4131,%r7441,%r4128;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4134,%r7568,%r4131;
}
	// end inline asm
	@%p12 bra 	$L__BB0_449;

	mov.u32 	%r7568, %r4134;

$L__BB0_449:
	mov.u32 	%r4144, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4140,%r7390,%r415,%r2243,%r4144;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4140;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7390;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4147, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4148,%r7395,%r4147;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4151,%r7325,%r4148;
}
	// end inline asm
	@%p12 bra 	$L__BB0_451;
	bra.uni 	$L__BB0_450;

$L__BB0_451:
	// begin inline asm
	{neg.f16x2 %r7718,%r7567;
}
	// end inline asm
	bra.uni 	$L__BB0_452;

$L__BB0_450:
	// begin inline asm
	{mul.f16x2 %r7718,%r7326,%r4148;
}
	// end inline asm

$L__BB0_452:
	mov.u32 	%r4164, 31;
	mov.u32 	%r4187, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4162,%r7718,%r4164,%r2243,%r4187;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4167,%r4151,%r4162;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4170,%r7394,%r7407;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4173,%r4170,%r4167;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4176,%r537,%r4173;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7468,%r7567,%r4176;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4183,%r7391,%r415,%r2243,%r4187;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4183;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7391;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4190, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4191,%r7396,%r4190;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4194,%r7325,%r4191;
}
	// end inline asm
	mov.u32 	%r7719, %r7566;
	@%p12 bra 	$L__BB0_454;

	// begin inline asm
	{mul.f16x2 %r7719,%r7326,%r4191;
}
	// end inline asm

$L__BB0_454:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4205,%r7719,%r4164,%r2243,%r4187;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4210,%r4194,%r4205;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4213,%r7394,%r7436;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4216,%r4210,%r4213;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4219,%r7434,%r4216;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4222,%r7566,%r4219;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4225,%r7395,%r7437;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4228,%r7396,%r7409;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4231,%r4225,%r4228;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4234,%r7433,%r4231;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4237,%r7565,%r4234;
}
	// end inline asm
	@%p12 bra 	$L__BB0_456;

	mov.u32 	%r7565, %r4237;

$L__BB0_456:
	// begin inline asm
	{sub.f16x2 %r4242,%r7390,%r7395;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4245,%r7329,%r4242;
}
	// end inline asm
	@%p12 bra 	$L__BB0_458;
	bra.uni 	$L__BB0_457;

$L__BB0_458:
	// begin inline asm
	{neg.f16x2 %r7721,%r7564;
}
	// end inline asm
	bra.uni 	$L__BB0_459;

$L__BB0_457:
	// begin inline asm
	{mul.f16x2 %r7721,%r7330,%r4242;
}
	// end inline asm

$L__BB0_459:
	mov.u32 	%r4256, 31;
	mov.u32 	%r4258, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4254,%r7721,%r4256,%r2243,%r4258;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4259,%r4245,%r4254;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4262,%r7389,%r7400;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4265,%r4262,%r4259;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4268,%r529,%r4265;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7466,%r7564,%r4268;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4274,%r7391,%r7396;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4277,%r7329,%r4274;
}
	// end inline asm
	mov.u32 	%r7722, %r7563;
	@%p12 bra 	$L__BB0_461;

	// begin inline asm
	{mul.f16x2 %r7722,%r7330,%r4274;
}
	// end inline asm

$L__BB0_461:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4286,%r7722,%r4256,%r2243,%r4258;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4291,%r4277,%r4286;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4294,%r7389,%r7428;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4297,%r4291,%r4294;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4300,%r7426,%r4297;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4303,%r7563,%r4300;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4306,%r7390,%r7429;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4309,%r7391,%r7402;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4312,%r4306,%r4309;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4315,%r7425,%r4312;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4318,%r7562,%r4315;
}
	// end inline asm
	@%p12 bra 	$L__BB0_463;

	mov.u32 	%r7562, %r4318;

$L__BB0_463:
	mov.u32 	%r4328, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4324,%r7381,%r415,%r2243,%r4328;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4324;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7381;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4331, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4332,%r7385,%r4331;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4335,%r7325,%r4332;
}
	// end inline asm
	@%p12 bra 	$L__BB0_465;
	bra.uni 	$L__BB0_464;

$L__BB0_465:
	// begin inline asm
	{neg.f16x2 %r7724,%r7561;
}
	// end inline asm
	bra.uni 	$L__BB0_466;

$L__BB0_464:
	// begin inline asm
	{mul.f16x2 %r7724,%r7326,%r4332;
}
	// end inline asm

$L__BB0_466:
	mov.u32 	%r4348, 31;
	mov.u32 	%r4350, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4346,%r7724,%r4348,%r2243,%r4350;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4351,%r4335,%r4346;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4354,%r7617,%r7394;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4357,%r4354,%r4351;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4360,%r7699,%r4357;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4363,%r7561,%r4360;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4366,%r7381,%r7385;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4369,%r7329,%r4366;
}
	// end inline asm
	@%p12 bra 	$L__BB0_468;
	bra.uni 	$L__BB0_467;

$L__BB0_468:
	// begin inline asm
	{neg.f16x2 %r7725,%r7560;
}
	// end inline asm
	bra.uni 	$L__BB0_469;

$L__BB0_467:
	// begin inline asm
	{mul.f16x2 %r7725,%r7330,%r4366;
}
	// end inline asm

$L__BB0_469:
	mov.u32 	%r4382, 31;
	mov.u32 	%r4405, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4380,%r7725,%r4382,%r2243,%r4405;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4385,%r4369,%r4380;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4388,%r7616,%r7389;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4391,%r4388,%r4385;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4394,%r7698,%r4391;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4397,%r7560,%r4394;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4401,%r7367,%r415,%r2243,%r4405;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4401;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7367;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4408, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4409,%r7374,%r4408;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4412,%r7325,%r4409;
}
	// end inline asm
	mov.u32 	%r7726, %r7559;
	@%p12 bra 	$L__BB0_471;

	// begin inline asm
	{mul.f16x2 %r7726,%r7326,%r4409;
}
	// end inline asm

$L__BB0_471:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4423,%r7726,%r4382,%r2243,%r4405;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4428,%r4412,%r4423;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4431,%r7627,%r7417;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4434,%r4428,%r4431;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4437,%r7697,%r4434;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7464,%r7559,%r4437;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4443,%r7628,%r7418;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4446,%r7374,%r7630;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4449,%r4443,%r4446;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4452,%r7696,%r4449;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4455,%r7558,%r4452;
}
	// end inline asm
	@%p12 bra 	$L__BB0_473;

	mov.u32 	%r7558, %r4455;

$L__BB0_473:
	// begin inline asm
	{sub.f16x2 %r4460,%r7367,%r7374;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4463,%r7329,%r4460;
}
	// end inline asm
	mov.u32 	%r7728, %r7557;
	@%p12 bra 	$L__BB0_475;

	// begin inline asm
	{mul.f16x2 %r7728,%r7330,%r4460;
}
	// end inline asm

$L__BB0_475:
	mov.u32 	%r4472, 31;
	mov.u32 	%r4474, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4470,%r7728,%r4472,%r2243,%r4474;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4475,%r4463,%r4470;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4478,%r7624,%r7412;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4481,%r4475,%r4478;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4484,%r7695,%r4481;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7461,%r7557,%r4484;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4490,%r7625,%r7413;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4493,%r7367,%r7629;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4496,%r4490,%r4493;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4499,%r7694,%r4496;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4502,%r7556,%r4499;
}
	// end inline asm
	@%p12 bra 	$L__BB0_477;

	mov.u32 	%r7556, %r4502;

$L__BB0_477:
	// begin inline asm
	{shfl.sync.idx.b32 %r4508,%r7353,%r415,%r2243,%r4474;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4508;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7353;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4515, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4516,%r7360,%r4515;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4519,%r7325,%r4516;
}
	// end inline asm
	@%p12 bra 	$L__BB0_479;
	bra.uni 	$L__BB0_478;

$L__BB0_479:
	// begin inline asm
	{neg.f16x2 %r7730,%r7555;
}
	// end inline asm
	bra.uni 	$L__BB0_480;

$L__BB0_478:
	// begin inline asm
	{mul.f16x2 %r7730,%r7326,%r4516;
}
	// end inline asm

$L__BB0_480:
	mov.u32 	%r4532, 31;
	mov.u32 	%r4555, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4530,%r7730,%r4532,%r2243,%r4555;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4535,%r4519,%r4530;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4538,%r7359,%r7627;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4541,%r4538,%r4535;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4544,%r7693,%r4541;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7458,%r7555,%r4544;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4551,%r7354,%r415,%r2243,%r4555;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4551;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7354;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4558, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4559,%r7361,%r4558;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4562,%r7325,%r4559;
}
	// end inline asm
	mov.u32 	%r7731, %r7554;
	@%p12 bra 	$L__BB0_482;

	// begin inline asm
	{mul.f16x2 %r7731,%r7326,%r4559;
}
	// end inline asm

$L__BB0_482:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4573,%r7731,%r4532,%r2243,%r4555;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4578,%r4562,%r4573;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4581,%r7359,%r7407;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4584,%r4578,%r4581;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4587,%r7451,%r4584;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7457,%r7554,%r4587;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4593,%r7360,%r7408;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4596,%r7361,%r7374;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4599,%r4593,%r4596;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4602,%r499,%r4599;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4605,%r7553,%r4602;
}
	// end inline asm
	@%p12 bra 	$L__BB0_484;

	mov.u32 	%r7553, %r4605;

$L__BB0_484:
	// begin inline asm
	{sub.f16x2 %r4610,%r7353,%r7360;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4613,%r7329,%r4610;
}
	// end inline asm
	@%p12 bra 	$L__BB0_486;
	bra.uni 	$L__BB0_485;

$L__BB0_486:
	// begin inline asm
	{neg.f16x2 %r7733,%r7552;
}
	// end inline asm
	bra.uni 	$L__BB0_487;

$L__BB0_485:
	// begin inline asm
	{mul.f16x2 %r7733,%r7330,%r4610;
}
	// end inline asm

$L__BB0_487:
	mov.u32 	%r4624, 31;
	mov.u32 	%r4626, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4622,%r7733,%r4624,%r2243,%r4626;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4627,%r4613,%r4622;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4630,%r7352,%r7624;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4633,%r4630,%r4627;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4636,%r7692,%r4633;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7449,%r7552,%r4636;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4642,%r7354,%r7361;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4645,%r7329,%r4642;
}
	// end inline asm
	mov.u32 	%r7734, %r7551;
	@%p12 bra 	$L__BB0_489;

	// begin inline asm
	{mul.f16x2 %r7734,%r7330,%r4642;
}
	// end inline asm

$L__BB0_489:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4654,%r7734,%r4624,%r2243,%r4626;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4659,%r4645,%r4654;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4662,%r7352,%r7400;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4665,%r4659,%r4662;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4668,%r7442,%r4665;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7448,%r7551,%r4668;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4674,%r7353,%r7401;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4677,%r7354,%r7367;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4680,%r4674,%r4677;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4683,%r491,%r4680;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4686,%r7550,%r4683;
}
	// end inline asm
	@%p12 bra 	$L__BB0_491;

	mov.u32 	%r7550, %r4686;

$L__BB0_491:
	mov.u32 	%r4696, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4692,%r7338,%r415,%r2243,%r4696;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4692;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7338;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4699, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4700,%r7346,%r4699;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4703,%r7325,%r4700;
}
	// end inline asm
	@%p12 bra 	$L__BB0_493;
	bra.uni 	$L__BB0_492;

$L__BB0_493:
	// begin inline asm
	{neg.f16x2 %r7736,%r7549;
}
	// end inline asm
	bra.uni 	$L__BB0_494;

$L__BB0_492:
	// begin inline asm
	{mul.f16x2 %r7736,%r7326,%r4700;
}
	// end inline asm

$L__BB0_494:
	mov.u32 	%r4716, 31;
	mov.u32 	%r4739, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4714,%r7736,%r4716,%r2243,%r4739;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4719,%r4703,%r4714;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4722,%r7615,%r7359;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4725,%r4722,%r4719;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4728,%r7691,%r4725;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7440,%r7549,%r4728;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4735,%r7339,%r415,%r2243,%r4739;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4735;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7339;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4742, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4743,%r7347,%r4742;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4746,%r7325,%r4743;
}
	// end inline asm
	mov.u32 	%r7737, %r7548;
	@%p12 bra 	$L__BB0_496;

	// begin inline asm
	{mul.f16x2 %r7737,%r7326,%r4743;
}
	// end inline asm

$L__BB0_496:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4757,%r7737,%r4716,%r2243,%r4739;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4762,%r4746,%r4757;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4765,%r7615,%r7394;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4768,%r4762,%r4765;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4771,%r7690,%r4768;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7439,%r7548,%r4771;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4777,%r7346,%r7395;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4780,%r7347,%r7361;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4783,%r4777,%r4780;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4786,%r484,%r4783;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4789,%r7547,%r4786;
}
	// end inline asm
	@%p12 bra 	$L__BB0_498;

	mov.u32 	%r7547, %r4789;

$L__BB0_498:
	// begin inline asm
	{sub.f16x2 %r4794,%r7338,%r7346;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4797,%r7329,%r4794;
}
	// end inline asm
	@%p12 bra 	$L__BB0_500;
	bra.uni 	$L__BB0_499;

$L__BB0_500:
	// begin inline asm
	{neg.f16x2 %r7739,%r7546;
}
	// end inline asm
	bra.uni 	$L__BB0_501;

$L__BB0_499:
	// begin inline asm
	{mul.f16x2 %r7739,%r7330,%r4794;
}
	// end inline asm

$L__BB0_501:
	mov.u32 	%r4808, 31;
	mov.u32 	%r4810, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4806,%r7739,%r4808,%r2243,%r4810;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4811,%r4797,%r4806;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4814,%r7612,%r7352;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4817,%r4814,%r4811;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4820,%r7689,%r4817;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7432,%r7546,%r4820;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4826,%r7339,%r7347;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4829,%r7329,%r4826;
}
	// end inline asm
	mov.u32 	%r7740, %r7545;
	@%p12 bra 	$L__BB0_503;

	// begin inline asm
	{mul.f16x2 %r7740,%r7330,%r4826;
}
	// end inline asm

$L__BB0_503:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4838,%r7740,%r4808,%r2243,%r4810;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4843,%r4829,%r4838;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4846,%r7612,%r7389;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4849,%r4843,%r4846;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4852,%r7688,%r4849;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7431,%r7545,%r4852;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4858,%r7338,%r7390;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4861,%r7339,%r7354;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4864,%r4858,%r4861;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4867,%r477,%r4864;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4870,%r7544,%r4867;
}
	// end inline asm
	@%p12 bra 	$L__BB0_505;

	mov.u32 	%r7544, %r4870;

$L__BB0_505:
	// begin inline asm
	{sub.f16x2 %r4875,%r7611,%r7385;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4878,%r7610,%r7347;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4881,%r4875,%r4878;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4884,%r7687,%r4881;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4887,%r7543,%r4884;
}
	// end inline asm
	@%p12 bra 	$L__BB0_507;

	mov.u32 	%r7543, %r4887;

$L__BB0_507:
	// begin inline asm
	{sub.f16x2 %r4890,%r7614,%r7381;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4893,%r7613,%r7339;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4896,%r4890,%r4893;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4899,%r7686,%r4896;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4902,%r7542,%r4899;
}
	// end inline asm
	@%p12 bra 	$L__BB0_509;

	mov.u32 	%r7542, %r4902;

$L__BB0_509:
	mov.u32 	%r4910, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4906,%r7416,%r415,%r2243,%r4910;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4906;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7416;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4913, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4914,%r7370,%r4913;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4917,%r7325,%r4914;
}
	// end inline asm
	mov.u32 	%r7744, %r7541;
	@%p12 bra 	$L__BB0_511;

	// begin inline asm
	{mul.f16x2 %r7744,%r7326,%r4914;
}
	// end inline asm

$L__BB0_511:
	mov.u32 	%r4928, 31;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4926,%r7744,%r4928,%r2243,%r4910;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4931,%r4917,%r4926;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4934,%r7631,%r7359;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4937,%r4931,%r4934;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4940,%r7685,%r4937;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7411,%r7541,%r4940;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4946,%r7626,%r7360;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4949,%r7370,%r7622;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4952,%r4946,%r4949;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4955,%r7684,%r4952;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4958,%r7540,%r4955;
}
	// end inline asm
	@%p12 bra 	$L__BB0_513;

	mov.u32 	%r7540, %r4958;

$L__BB0_513:
	// begin inline asm
	{sub.f16x2 %r4963,%r7416,%r7370;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4966,%r7329,%r4963;
}
	// end inline asm
	mov.u32 	%r7746, %r7539;
	@%p12 bra 	$L__BB0_515;

	// begin inline asm
	{mul.f16x2 %r7746,%r7330,%r4963;
}
	// end inline asm

$L__BB0_515:
	mov.u32 	%r4975, 31;
	mov.u32 	%r4977, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4973,%r7746,%r4975,%r2243,%r4977;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4978,%r4966,%r4973;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4981,%r7635,%r7352;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4984,%r4978,%r4981;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4987,%r7683,%r4984;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7404,%r7539,%r4987;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4993,%r7633,%r7353;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4996,%r7416,%r7623;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4999,%r4993,%r4996;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5002,%r7682,%r4999;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5005,%r7538,%r5002;
}
	// end inline asm
	@%p12 bra 	$L__BB0_517;

	mov.u32 	%r7538, %r5005;

$L__BB0_517:
	// begin inline asm
	{sub.f16x2 %r5010,%r7619,%r7346;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5013,%r7618,%r7370;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5016,%r5010,%r5013;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5019,%r7681,%r5016;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5022,%r7537,%r5019;
}
	// end inline asm
	@%p12 bra 	$L__BB0_519;

	mov.u32 	%r7537, %r5022;

$L__BB0_519:
	// begin inline asm
	{sub.f16x2 %r5025,%r7621,%r7338;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5028,%r7620,%r7416;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5031,%r5025,%r5028;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5034,%r7680,%r5031;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5037,%r7536,%r5034;
}
	// end inline asm
	@%p12 bra 	$L__BB0_521;

	mov.u32 	%r7536, %r5037;

$L__BB0_521:
	bar.sync 	0;
	ld.param.u64 	%rd314, [%rd1+136];
	cvta.to.global.u64 	%rd32, %rd314;
	setp.lt.s32 	%p271, %r658, %r1743;
	or.pred  	%p273, %p271, %p215;
	mad.lo.s32 	%r5040, %r1745, %r1744, %r1743;
	setp.ge.s32 	%p274, %r658, %r5040;
	or.pred  	%p275, %p273, %p274;
	@%p275 bra 	$L__BB0_571;

	sub.s32 	%r1303, %r658, %r1743;
	rem.s32 	%r5041, %r1303, %r1744;
	setp.ne.s32 	%p276, %r5041, 0;
	@%p276 bra 	$L__BB0_571;

	div.s32 	%r5042, %r1303, %r1744;
	mul.lo.s32 	%r5043, %r5042, %r1737;
	mul.lo.s32 	%r1304, %r5043, 3;
	add.s32 	%r1305, %r656, -2;
	add.s32 	%r5044, %r1304, %r1305;
	mul.lo.s32 	%r1306, %r5044, %r1738;
	@%p12 bra 	$L__BB0_525;

	add.s32 	%r5049, %r1306, %r657;
	mul.lo.s32 	%r5050, %r5049, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3608;
  cvt.f32.f16 %f395, low;}

	// end inline asm
	add.s32 	%r5051, %r379, %r5050;
	mul.wide.s32 	%rd315, %r5051, 4;
	add.s64 	%rd316, %rd32, %rd315;
	st.global.f32 	[%rd316], %f395;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3608;
  cvt.f32.f16 %f396, high;}

	// end inline asm
	add.s32 	%r5052, %r380, %r5050;
	mul.wide.s32 	%rd317, %r5052, 4;
	add.s64 	%rd318, %rd32, %rd317;
	st.global.f32 	[%rd318], %f396;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3685;
  cvt.f32.f16 %f397, low;}

	// end inline asm
	add.s32 	%r5053, %r393, %r5050;
	mul.wide.s32 	%rd319, %r5053, 4;
	add.s64 	%rd320, %rd32, %rd319;
	st.global.f32 	[%rd320], %f397;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3685;
  cvt.f32.f16 %f398, high;}

	// end inline asm
	add.s32 	%r5054, %r394, %r5050;
	mul.wide.s32 	%rd321, %r5054, 4;
	add.s64 	%rd322, %rd32, %rd321;
	st.global.f32 	[%rd322], %f398;

$L__BB0_525:
	add.s32 	%r1307, %r1304, %r1737;
	@%p12 bra 	$L__BB0_527;

	add.s32 	%r5059, %r1307, %r1305;
	mad.lo.s32 	%r5060, %r5059, %r1738, %r657;
	mul.lo.s32 	%r5061, %r5060, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3651;
  cvt.f32.f16 %f399, low;}

	// end inline asm
	add.s32 	%r5062, %r379, %r5061;
	mul.wide.s32 	%rd323, %r5062, 4;
	add.s64 	%rd324, %rd32, %rd323;
	st.global.f32 	[%rd324], %f399;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3651;
  cvt.f32.f16 %f400, high;}

	// end inline asm
	add.s32 	%r5063, %r380, %r5061;
	mul.wide.s32 	%rd325, %r5063, 4;
	add.s64 	%rd326, %rd32, %rd325;
	st.global.f32 	[%rd326], %f400;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3717;
  cvt.f32.f16 %f401, low;}

	// end inline asm
	add.s32 	%r5064, %r393, %r5061;
	mul.wide.s32 	%rd327, %r5064, 4;
	add.s64 	%rd328, %rd32, %rd327;
	st.global.f32 	[%rd328], %f401;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3717;
  cvt.f32.f16 %f402, high;}

	// end inline asm
	add.s32 	%r5065, %r394, %r5061;
	mul.wide.s32 	%rd329, %r5065, 4;
	add.s64 	%rd330, %rd32, %rd329;
	st.global.f32 	[%rd330], %f402;

$L__BB0_527:
	add.s32 	%r1308, %r657, 1;
	@%p12 bra 	$L__BB0_529;

	add.s32 	%r5070, %r1306, %r1308;
	mul.lo.s32 	%r5071, %r5070, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3762;
  cvt.f32.f16 %f403, low;}

	// end inline asm
	add.s32 	%r5072, %r379, %r5071;
	mul.wide.s32 	%rd331, %r5072, 4;
	add.s64 	%rd332, %rd32, %rd331;
	st.global.f32 	[%rd332], %f403;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3762;
  cvt.f32.f16 %f404, high;}

	// end inline asm
	add.s32 	%r5073, %r380, %r5071;
	mul.wide.s32 	%rd333, %r5073, 4;
	add.s64 	%rd334, %rd32, %rd333;
	st.global.f32 	[%rd334], %f404;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3796;
  cvt.f32.f16 %f405, low;}

	// end inline asm
	add.s32 	%r5074, %r393, %r5071;
	mul.wide.s32 	%rd335, %r5074, 4;
	add.s64 	%rd336, %rd32, %rd335;
	st.global.f32 	[%rd336], %f405;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3796;
  cvt.f32.f16 %f406, high;}

	// end inline asm
	add.s32 	%r5075, %r394, %r5071;
	mul.wide.s32 	%rd337, %r5075, 4;
	add.s64 	%rd338, %rd32, %rd337;
	st.global.f32 	[%rd338], %f406;

$L__BB0_529:
	add.s32 	%r1309, %r656, -1;
	add.s32 	%r5076, %r1304, %r1309;
	mul.lo.s32 	%r1310, %r5076, %r1738;
	add.s32 	%r1311, %r657, -1;
	@%p12 bra 	$L__BB0_531;

	add.s32 	%r5081, %r1310, %r1311;
	mul.lo.s32 	%r5082, %r5081, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3841;
  cvt.f32.f16 %f407, low;}

	// end inline asm
	add.s32 	%r5083, %r379, %r5082;
	mul.wide.s32 	%rd339, %r5083, 4;
	add.s64 	%rd340, %rd32, %rd339;
	st.global.f32 	[%rd340], %f407;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3841;
  cvt.f32.f16 %f408, high;}

	// end inline asm
	add.s32 	%r5084, %r380, %r5082;
	mul.wide.s32 	%rd341, %r5084, 4;
	add.s64 	%rd342, %rd32, %rd341;
	st.global.f32 	[%rd342], %f408;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3918;
  cvt.f32.f16 %f409, low;}

	// end inline asm
	add.s32 	%r5085, %r393, %r5082;
	mul.wide.s32 	%rd343, %r5085, 4;
	add.s64 	%rd344, %rd32, %rd343;
	st.global.f32 	[%rd344], %f409;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3918;
  cvt.f32.f16 %f410, high;}

	// end inline asm
	add.s32 	%r5086, %r394, %r5082;
	mul.wide.s32 	%rd345, %r5086, 4;
	add.s64 	%rd346, %rd32, %rd345;
	st.global.f32 	[%rd346], %f410;

$L__BB0_531:
	add.s32 	%r5087, %r1307, %r1309;
	mul.lo.s32 	%r1312, %r5087, %r1738;
	@%p12 bra 	$L__BB0_533;

	add.s32 	%r5092, %r1312, %r1311;
	mul.lo.s32 	%r5093, %r5092, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3884;
  cvt.f32.f16 %f411, low;}

	// end inline asm
	add.s32 	%r5094, %r379, %r5093;
	mul.wide.s32 	%rd347, %r5094, 4;
	add.s64 	%rd348, %rd32, %rd347;
	st.global.f32 	[%rd348], %f411;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3884;
  cvt.f32.f16 %f412, high;}

	// end inline asm
	add.s32 	%r5095, %r380, %r5093;
	mul.wide.s32 	%rd349, %r5095, 4;
	add.s64 	%rd350, %rd32, %rd349;
	st.global.f32 	[%rd350], %f412;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3950;
  cvt.f32.f16 %f413, low;}

	// end inline asm
	add.s32 	%r5096, %r393, %r5093;
	mul.wide.s32 	%rd351, %r5096, 4;
	add.s64 	%rd352, %rd32, %rd351;
	st.global.f32 	[%rd352], %f413;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3950;
  cvt.f32.f16 %f414, high;}

	// end inline asm
	add.s32 	%r5097, %r394, %r5093;
	mul.wide.s32 	%rd353, %r5097, 4;
	add.s64 	%rd354, %rd32, %rd353;
	st.global.f32 	[%rd354], %f414;

$L__BB0_533:
	@%p12 bra 	$L__BB0_535;

	add.s32 	%r5102, %r1310, %r657;
	mul.lo.s32 	%r5103, %r5102, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7478;
  cvt.f32.f16 %f415, low;}

	// end inline asm
	add.s32 	%r5104, %r379, %r5103;
	mul.wide.s32 	%rd355, %r5104, 4;
	add.s64 	%rd356, %rd32, %rd355;
	st.global.f32 	[%rd356], %f415;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7478;
  cvt.f32.f16 %f416, high;}

	// end inline asm
	add.s32 	%r5105, %r380, %r5103;
	mul.wide.s32 	%rd357, %r5105, 4;
	add.s64 	%rd358, %rd32, %rd357;
	st.global.f32 	[%rd358], %f416;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7473;
  cvt.f32.f16 %f417, low;}

	// end inline asm
	add.s32 	%r5106, %r393, %r5103;
	mul.wide.s32 	%rd359, %r5106, 4;
	add.s64 	%rd360, %rd32, %rd359;
	st.global.f32 	[%rd360], %f417;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7473;
  cvt.f32.f16 %f418, high;}

	// end inline asm
	add.s32 	%r5107, %r394, %r5103;
	mul.wide.s32 	%rd361, %r5107, 4;
	add.s64 	%rd362, %rd32, %rd361;
	st.global.f32 	[%rd362], %f418;

$L__BB0_535:
	@%p12 bra 	$L__BB0_537;

	add.s32 	%r5112, %r1312, %r657;
	mul.lo.s32 	%r5113, %r5112, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7477;
  cvt.f32.f16 %f419, low;}

	// end inline asm
	add.s32 	%r5114, %r379, %r5113;
	mul.wide.s32 	%rd363, %r5114, 4;
	add.s64 	%rd364, %rd32, %rd363;
	st.global.f32 	[%rd364], %f419;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7477;
  cvt.f32.f16 %f420, high;}

	// end inline asm
	add.s32 	%r5115, %r380, %r5113;
	mul.wide.s32 	%rd365, %r5115, 4;
	add.s64 	%rd366, %rd32, %rd365;
	st.global.f32 	[%rd366], %f420;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7472;
  cvt.f32.f16 %f421, low;}

	// end inline asm
	add.s32 	%r5116, %r393, %r5113;
	mul.wide.s32 	%rd367, %r5116, 4;
	add.s64 	%rd368, %rd32, %rd367;
	st.global.f32 	[%rd368], %f421;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7472;
  cvt.f32.f16 %f422, high;}

	// end inline asm
	add.s32 	%r5117, %r394, %r5113;
	mul.wide.s32 	%rd369, %r5117, 4;
	add.s64 	%rd370, %rd32, %rd369;
	st.global.f32 	[%rd370], %f422;

$L__BB0_537:
	add.s32 	%r1313, %r1307, %r1737;
	add.s32 	%r5118, %r1313, %r1309;
	mul.lo.s32 	%r1314, %r5118, %r1738;
	@%p12 bra 	$L__BB0_539;

	add.s32 	%r5123, %r1314, %r657;
	mul.lo.s32 	%r5124, %r5123, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7571;
  cvt.f32.f16 %f423, low;}

	// end inline asm
	add.s32 	%r5125, %r379, %r5124;
	mul.wide.s32 	%rd371, %r5125, 4;
	add.s64 	%rd372, %rd32, %rd371;
	st.global.f32 	[%rd372], %f423;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7571;
  cvt.f32.f16 %f424, high;}

	// end inline asm
	add.s32 	%r5126, %r380, %r5124;
	mul.wide.s32 	%rd373, %r5126, 4;
	add.s64 	%rd374, %rd32, %rd373;
	st.global.f32 	[%rd374], %f424;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7568;
  cvt.f32.f16 %f425, low;}

	// end inline asm
	add.s32 	%r5127, %r393, %r5124;
	mul.wide.s32 	%rd375, %r5127, 4;
	add.s64 	%rd376, %rd32, %rd375;
	st.global.f32 	[%rd376], %f425;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7568;
  cvt.f32.f16 %f426, high;}

	// end inline asm
	add.s32 	%r5128, %r394, %r5124;
	mul.wide.s32 	%rd377, %r5128, 4;
	add.s64 	%rd378, %rd32, %rd377;
	st.global.f32 	[%rd378], %f426;

$L__BB0_539:
	@%p12 bra 	$L__BB0_541;

	add.s32 	%r5133, %r1310, %r1308;
	mul.lo.s32 	%r5134, %r5133, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7468;
  cvt.f32.f16 %f427, low;}

	// end inline asm
	add.s32 	%r5135, %r379, %r5134;
	mul.wide.s32 	%rd379, %r5135, 4;
	add.s64 	%rd380, %rd32, %rd379;
	st.global.f32 	[%rd380], %f427;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7468;
  cvt.f32.f16 %f428, high;}

	// end inline asm
	add.s32 	%r5136, %r380, %r5134;
	mul.wide.s32 	%rd381, %r5136, 4;
	add.s64 	%rd382, %rd32, %rd381;
	st.global.f32 	[%rd382], %f428;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7466;
  cvt.f32.f16 %f429, low;}

	// end inline asm
	add.s32 	%r5137, %r393, %r5134;
	mul.wide.s32 	%rd383, %r5137, 4;
	add.s64 	%rd384, %rd32, %rd383;
	st.global.f32 	[%rd384], %f429;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7466;
  cvt.f32.f16 %f430, high;}

	// end inline asm
	add.s32 	%r5138, %r394, %r5134;
	mul.wide.s32 	%rd385, %r5138, 4;
	add.s64 	%rd386, %rd32, %rd385;
	st.global.f32 	[%rd386], %f430;

$L__BB0_541:
	@%p12 bra 	$L__BB0_543;

	add.s32 	%r5143, %r1312, %r1308;
	mul.lo.s32 	%r5144, %r5143, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4222;
  cvt.f32.f16 %f431, low;}

	// end inline asm
	add.s32 	%r5145, %r379, %r5144;
	mul.wide.s32 	%rd387, %r5145, 4;
	add.s64 	%rd388, %rd32, %rd387;
	st.global.f32 	[%rd388], %f431;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4222;
  cvt.f32.f16 %f432, high;}

	// end inline asm
	add.s32 	%r5146, %r380, %r5144;
	mul.wide.s32 	%rd389, %r5146, 4;
	add.s64 	%rd390, %rd32, %rd389;
	st.global.f32 	[%rd390], %f432;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4303;
  cvt.f32.f16 %f433, low;}

	// end inline asm
	add.s32 	%r5147, %r393, %r5144;
	mul.wide.s32 	%rd391, %r5147, 4;
	add.s64 	%rd392, %rd32, %rd391;
	st.global.f32 	[%rd392], %f433;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4303;
  cvt.f32.f16 %f434, high;}

	// end inline asm
	add.s32 	%r5148, %r394, %r5144;
	mul.wide.s32 	%rd393, %r5148, 4;
	add.s64 	%rd394, %rd32, %rd393;
	st.global.f32 	[%rd394], %f434;

$L__BB0_543:
	@%p12 bra 	$L__BB0_545;

	add.s32 	%r5153, %r1314, %r1308;
	mul.lo.s32 	%r5154, %r5153, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7565;
  cvt.f32.f16 %f435, low;}

	// end inline asm
	add.s32 	%r5155, %r379, %r5154;
	mul.wide.s32 	%rd395, %r5155, 4;
	add.s64 	%rd396, %rd32, %rd395;
	st.global.f32 	[%rd396], %f435;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7565;
  cvt.f32.f16 %f436, high;}

	// end inline asm
	add.s32 	%r5156, %r380, %r5154;
	mul.wide.s32 	%rd397, %r5156, 4;
	add.s64 	%rd398, %rd32, %rd397;
	st.global.f32 	[%rd398], %f436;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7562;
  cvt.f32.f16 %f437, low;}

	// end inline asm
	add.s32 	%r5157, %r393, %r5154;
	mul.wide.s32 	%rd399, %r5157, 4;
	add.s64 	%rd400, %rd32, %rd399;
	st.global.f32 	[%rd400], %f437;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7562;
  cvt.f32.f16 %f438, high;}

	// end inline asm
	add.s32 	%r5158, %r394, %r5154;
	mul.wide.s32 	%rd401, %r5158, 4;
	add.s64 	%rd402, %rd32, %rd401;
	st.global.f32 	[%rd402], %f438;

$L__BB0_545:
	add.s32 	%r1315, %r657, 2;
	@%p12 bra 	$L__BB0_547;

	add.s32 	%r5163, %r1310, %r1315;
	mul.lo.s32 	%r5164, %r5163, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4363;
  cvt.f32.f16 %f439, low;}

	// end inline asm
	add.s32 	%r5165, %r379, %r5164;
	mul.wide.s32 	%rd403, %r5165, 4;
	add.s64 	%rd404, %rd32, %rd403;
	st.global.f32 	[%rd404], %f439;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4363;
  cvt.f32.f16 %f440, high;}

	// end inline asm
	add.s32 	%r5166, %r380, %r5164;
	mul.wide.s32 	%rd405, %r5166, 4;
	add.s64 	%rd406, %rd32, %rd405;
	st.global.f32 	[%rd406], %f440;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4397;
  cvt.f32.f16 %f441, low;}

	// end inline asm
	add.s32 	%r5167, %r393, %r5164;
	mul.wide.s32 	%rd407, %r5167, 4;
	add.s64 	%rd408, %rd32, %rd407;
	st.global.f32 	[%rd408], %f441;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4397;
  cvt.f32.f16 %f442, high;}

	// end inline asm
	add.s32 	%r5168, %r394, %r5164;
	mul.wide.s32 	%rd409, %r5168, 4;
	add.s64 	%rd410, %rd32, %rd409;
	st.global.f32 	[%rd410], %f442;

$L__BB0_547:
	add.s32 	%r5169, %r1307, %r656;
	mul.lo.s32 	%r1316, %r5169, %r1738;
	@%p12 bra 	$L__BB0_549;

	add.s32 	%r5174, %r1316, %r1311;
	mul.lo.s32 	%r5175, %r5174, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7464;
  cvt.f32.f16 %f443, low;}

	// end inline asm
	add.s32 	%r5176, %r379, %r5175;
	mul.wide.s32 	%rd411, %r5176, 4;
	add.s64 	%rd412, %rd32, %rd411;
	st.global.f32 	[%rd412], %f443;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7464;
  cvt.f32.f16 %f444, high;}

	// end inline asm
	add.s32 	%r5177, %r380, %r5175;
	mul.wide.s32 	%rd413, %r5177, 4;
	add.s64 	%rd414, %rd32, %rd413;
	st.global.f32 	[%rd414], %f444;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7461;
  cvt.f32.f16 %f445, low;}

	// end inline asm
	add.s32 	%r5178, %r393, %r5175;
	mul.wide.s32 	%rd415, %r5178, 4;
	add.s64 	%rd416, %rd32, %rd415;
	st.global.f32 	[%rd416], %f445;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7461;
  cvt.f32.f16 %f446, high;}

	// end inline asm
	add.s32 	%r5179, %r394, %r5175;
	mul.wide.s32 	%rd417, %r5179, 4;
	add.s64 	%rd418, %rd32, %rd417;
	st.global.f32 	[%rd418], %f446;

$L__BB0_549:
	add.s32 	%r5180, %r1313, %r656;
	mul.lo.s32 	%r1317, %r5180, %r1738;
	@%p12 bra 	$L__BB0_551;

	add.s32 	%r5185, %r1317, %r1311;
	mul.lo.s32 	%r5186, %r5185, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7558;
  cvt.f32.f16 %f447, low;}

	// end inline asm
	add.s32 	%r5187, %r379, %r5186;
	mul.wide.s32 	%rd419, %r5187, 4;
	add.s64 	%rd420, %rd32, %rd419;
	st.global.f32 	[%rd420], %f447;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7558;
  cvt.f32.f16 %f448, high;}

	// end inline asm
	add.s32 	%r5188, %r380, %r5186;
	mul.wide.s32 	%rd421, %r5188, 4;
	add.s64 	%rd422, %rd32, %rd421;
	st.global.f32 	[%rd422], %f448;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7556;
  cvt.f32.f16 %f449, low;}

	// end inline asm
	add.s32 	%r5189, %r393, %r5186;
	mul.wide.s32 	%rd423, %r5189, 4;
	add.s64 	%rd424, %rd32, %rd423;
	st.global.f32 	[%rd424], %f449;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7556;
  cvt.f32.f16 %f450, high;}

	// end inline asm
	add.s32 	%r5190, %r394, %r5186;
	mul.wide.s32 	%rd425, %r5190, 4;
	add.s64 	%rd426, %rd32, %rd425;
	st.global.f32 	[%rd426], %f450;

$L__BB0_551:
	add.s32 	%r5191, %r1304, %r656;
	mul.lo.s32 	%r1318, %r5191, %r1738;
	@%p12 bra 	$L__BB0_553;

	add.s32 	%r5196, %r1318, %r657;
	mul.lo.s32 	%r5197, %r5196, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7458;
  cvt.f32.f16 %f451, low;}

	// end inline asm
	add.s32 	%r5198, %r379, %r5197;
	mul.wide.s32 	%rd427, %r5198, 4;
	add.s64 	%rd428, %rd32, %rd427;
	st.global.f32 	[%rd428], %f451;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7458;
  cvt.f32.f16 %f452, high;}

	// end inline asm
	add.s32 	%r5199, %r380, %r5197;
	mul.wide.s32 	%rd429, %r5199, 4;
	add.s64 	%rd430, %rd32, %rd429;
	st.global.f32 	[%rd430], %f452;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7449;
  cvt.f32.f16 %f453, low;}

	// end inline asm
	add.s32 	%r5200, %r393, %r5197;
	mul.wide.s32 	%rd431, %r5200, 4;
	add.s64 	%rd432, %rd32, %rd431;
	st.global.f32 	[%rd432], %f453;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7449;
  cvt.f32.f16 %f454, high;}

	// end inline asm
	add.s32 	%r5201, %r394, %r5197;
	mul.wide.s32 	%rd433, %r5201, 4;
	add.s64 	%rd434, %rd32, %rd433;
	st.global.f32 	[%rd434], %f454;

$L__BB0_553:
	@%p12 bra 	$L__BB0_555;

	add.s32 	%r5206, %r1316, %r657;
	mul.lo.s32 	%r5207, %r5206, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7457;
  cvt.f32.f16 %f455, low;}

	// end inline asm
	add.s32 	%r5208, %r379, %r5207;
	mul.wide.s32 	%rd435, %r5208, 4;
	add.s64 	%rd436, %rd32, %rd435;
	st.global.f32 	[%rd436], %f455;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7457;
  cvt.f32.f16 %f456, high;}

	// end inline asm
	add.s32 	%r5209, %r380, %r5207;
	mul.wide.s32 	%rd437, %r5209, 4;
	add.s64 	%rd438, %rd32, %rd437;
	st.global.f32 	[%rd438], %f456;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7448;
  cvt.f32.f16 %f457, low;}

	// end inline asm
	add.s32 	%r5210, %r393, %r5207;
	mul.wide.s32 	%rd439, %r5210, 4;
	add.s64 	%rd440, %rd32, %rd439;
	st.global.f32 	[%rd440], %f457;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7448;
  cvt.f32.f16 %f458, high;}

	// end inline asm
	add.s32 	%r5211, %r394, %r5207;
	mul.wide.s32 	%rd441, %r5211, 4;
	add.s64 	%rd442, %rd32, %rd441;
	st.global.f32 	[%rd442], %f458;

$L__BB0_555:
	@%p12 bra 	$L__BB0_557;

	add.s32 	%r5216, %r1317, %r657;
	mul.lo.s32 	%r5217, %r5216, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7553;
  cvt.f32.f16 %f459, low;}

	// end inline asm
	add.s32 	%r5218, %r379, %r5217;
	mul.wide.s32 	%rd443, %r5218, 4;
	add.s64 	%rd444, %rd32, %rd443;
	st.global.f32 	[%rd444], %f459;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7553;
  cvt.f32.f16 %f460, high;}

	// end inline asm
	add.s32 	%r5219, %r380, %r5217;
	mul.wide.s32 	%rd445, %r5219, 4;
	add.s64 	%rd446, %rd32, %rd445;
	st.global.f32 	[%rd446], %f460;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7550;
  cvt.f32.f16 %f461, low;}

	// end inline asm
	add.s32 	%r5220, %r393, %r5217;
	mul.wide.s32 	%rd447, %r5220, 4;
	add.s64 	%rd448, %rd32, %rd447;
	st.global.f32 	[%rd448], %f461;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7550;
  cvt.f32.f16 %f462, high;}

	// end inline asm
	add.s32 	%r5221, %r394, %r5217;
	mul.wide.s32 	%rd449, %r5221, 4;
	add.s64 	%rd450, %rd32, %rd449;
	st.global.f32 	[%rd450], %f462;

$L__BB0_557:
	@%p12 bra 	$L__BB0_559;

	add.s32 	%r5226, %r1318, %r1308;
	mul.lo.s32 	%r5227, %r5226, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7440;
  cvt.f32.f16 %f463, low;}

	// end inline asm
	add.s32 	%r5228, %r379, %r5227;
	mul.wide.s32 	%rd451, %r5228, 4;
	add.s64 	%rd452, %rd32, %rd451;
	st.global.f32 	[%rd452], %f463;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7440;
  cvt.f32.f16 %f464, high;}

	// end inline asm
	add.s32 	%r5229, %r380, %r5227;
	mul.wide.s32 	%rd453, %r5229, 4;
	add.s64 	%rd454, %rd32, %rd453;
	st.global.f32 	[%rd454], %f464;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7432;
  cvt.f32.f16 %f465, low;}

	// end inline asm
	add.s32 	%r5230, %r393, %r5227;
	mul.wide.s32 	%rd455, %r5230, 4;
	add.s64 	%rd456, %rd32, %rd455;
	st.global.f32 	[%rd456], %f465;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7432;
  cvt.f32.f16 %f466, high;}

	// end inline asm
	add.s32 	%r5231, %r394, %r5227;
	mul.wide.s32 	%rd457, %r5231, 4;
	add.s64 	%rd458, %rd32, %rd457;
	st.global.f32 	[%rd458], %f466;

$L__BB0_559:
	@%p12 bra 	$L__BB0_561;

	add.s32 	%r5236, %r1316, %r1308;
	mul.lo.s32 	%r5237, %r5236, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7439;
  cvt.f32.f16 %f467, low;}

	// end inline asm
	add.s32 	%r5238, %r379, %r5237;
	mul.wide.s32 	%rd459, %r5238, 4;
	add.s64 	%rd460, %rd32, %rd459;
	st.global.f32 	[%rd460], %f467;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7439;
  cvt.f32.f16 %f468, high;}

	// end inline asm
	add.s32 	%r5239, %r380, %r5237;
	mul.wide.s32 	%rd461, %r5239, 4;
	add.s64 	%rd462, %rd32, %rd461;
	st.global.f32 	[%rd462], %f468;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7431;
  cvt.f32.f16 %f469, low;}

	// end inline asm
	add.s32 	%r5240, %r393, %r5237;
	mul.wide.s32 	%rd463, %r5240, 4;
	add.s64 	%rd464, %rd32, %rd463;
	st.global.f32 	[%rd464], %f469;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7431;
  cvt.f32.f16 %f470, high;}

	// end inline asm
	add.s32 	%r5241, %r394, %r5237;
	mul.wide.s32 	%rd465, %r5241, 4;
	add.s64 	%rd466, %rd32, %rd465;
	st.global.f32 	[%rd466], %f470;

$L__BB0_561:
	@%p12 bra 	$L__BB0_563;

	add.s32 	%r5246, %r1317, %r1308;
	mul.lo.s32 	%r5247, %r5246, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7547;
  cvt.f32.f16 %f471, low;}

	// end inline asm
	add.s32 	%r5248, %r379, %r5247;
	mul.wide.s32 	%rd467, %r5248, 4;
	add.s64 	%rd468, %rd32, %rd467;
	st.global.f32 	[%rd468], %f471;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7547;
  cvt.f32.f16 %f472, high;}

	// end inline asm
	add.s32 	%r5249, %r380, %r5247;
	mul.wide.s32 	%rd469, %r5249, 4;
	add.s64 	%rd470, %rd32, %rd469;
	st.global.f32 	[%rd470], %f472;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7544;
  cvt.f32.f16 %f473, low;}

	// end inline asm
	add.s32 	%r5250, %r393, %r5247;
	mul.wide.s32 	%rd471, %r5250, 4;
	add.s64 	%rd472, %rd32, %rd471;
	st.global.f32 	[%rd472], %f473;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7544;
  cvt.f32.f16 %f474, high;}

	// end inline asm
	add.s32 	%r5251, %r394, %r5247;
	mul.wide.s32 	%rd473, %r5251, 4;
	add.s64 	%rd474, %rd32, %rd473;
	st.global.f32 	[%rd474], %f474;

$L__BB0_563:
	add.s32 	%r1319, %r1317, %r1315;
	@%p12 bra 	$L__BB0_565;

	mul.lo.s32 	%r5256, %r1319, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7543;
  cvt.f32.f16 %f475, low;}

	// end inline asm
	add.s32 	%r5257, %r379, %r5256;
	mul.wide.s32 	%rd475, %r5257, 4;
	add.s64 	%rd476, %rd32, %rd475;
	st.global.f32 	[%rd476], %f475;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7543;
  cvt.f32.f16 %f476, high;}

	// end inline asm
	add.s32 	%r5258, %r380, %r5256;
	mul.wide.s32 	%rd477, %r5258, 4;
	add.s64 	%rd478, %rd32, %rd477;
	st.global.f32 	[%rd478], %f476;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7542;
  cvt.f32.f16 %f477, low;}

	// end inline asm
	add.s32 	%r5259, %r393, %r5256;
	mul.wide.s32 	%rd479, %r5259, 4;
	add.s64 	%rd480, %rd32, %rd479;
	st.global.f32 	[%rd480], %f477;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7542;
  cvt.f32.f16 %f478, high;}

	// end inline asm
	add.s32 	%r5260, %r394, %r5256;
	mul.wide.s32 	%rd481, %r5260, 4;
	add.s64 	%rd482, %rd32, %rd481;
	st.global.f32 	[%rd482], %f478;

$L__BB0_565:
	add.s32 	%r1320, %r656, 1;
	@%p12 bra 	$L__BB0_567;

	add.s32 	%r5265, %r1307, %r1320;
	mad.lo.s32 	%r5266, %r5265, %r1738, %r657;
	mul.lo.s32 	%r5267, %r5266, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7411;
  cvt.f32.f16 %f479, low;}

	// end inline asm
	add.s32 	%r5268, %r379, %r5267;
	mul.wide.s32 	%rd483, %r5268, 4;
	add.s64 	%rd484, %rd32, %rd483;
	st.global.f32 	[%rd484], %f479;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7411;
  cvt.f32.f16 %f480, high;}

	// end inline asm
	add.s32 	%r5269, %r380, %r5267;
	mul.wide.s32 	%rd485, %r5269, 4;
	add.s64 	%rd486, %rd32, %rd485;
	st.global.f32 	[%rd486], %f480;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7404;
  cvt.f32.f16 %f481, low;}

	// end inline asm
	add.s32 	%r5270, %r393, %r5267;
	mul.wide.s32 	%rd487, %r5270, 4;
	add.s64 	%rd488, %rd32, %rd487;
	st.global.f32 	[%rd488], %f481;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7404;
  cvt.f32.f16 %f482, high;}

	// end inline asm
	add.s32 	%r5271, %r394, %r5267;
	mul.wide.s32 	%rd489, %r5271, 4;
	add.s64 	%rd490, %rd32, %rd489;
	st.global.f32 	[%rd490], %f482;

$L__BB0_567:
	add.s32 	%r5272, %r1313, %r1320;
	mul.lo.s32 	%r1321, %r5272, %r1738;
	@%p12 bra 	$L__BB0_569;

	add.s32 	%r5277, %r1321, %r657;
	mul.lo.s32 	%r5278, %r5277, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7540;
  cvt.f32.f16 %f483, low;}

	// end inline asm
	add.s32 	%r5279, %r379, %r5278;
	mul.wide.s32 	%rd491, %r5279, 4;
	add.s64 	%rd492, %rd32, %rd491;
	st.global.f32 	[%rd492], %f483;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7540;
  cvt.f32.f16 %f484, high;}

	// end inline asm
	add.s32 	%r5280, %r380, %r5278;
	mul.wide.s32 	%rd493, %r5280, 4;
	add.s64 	%rd494, %rd32, %rd493;
	st.global.f32 	[%rd494], %f484;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7538;
  cvt.f32.f16 %f485, low;}

	// end inline asm
	add.s32 	%r5281, %r393, %r5278;
	mul.wide.s32 	%rd495, %r5281, 4;
	add.s64 	%rd496, %rd32, %rd495;
	st.global.f32 	[%rd496], %f485;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7538;
  cvt.f32.f16 %f486, high;}

	// end inline asm
	add.s32 	%r5282, %r394, %r5278;
	mul.wide.s32 	%rd497, %r5282, 4;
	add.s64 	%rd498, %rd32, %rd497;
	st.global.f32 	[%rd498], %f486;

$L__BB0_569:
	add.s32 	%r1322, %r1321, %r1308;
	@%p12 bra 	$L__BB0_571;

	mul.lo.s32 	%r5287, %r1322, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7537;
  cvt.f32.f16 %f487, low;}

	// end inline asm
	add.s32 	%r5288, %r379, %r5287;
	mul.wide.s32 	%rd499, %r5288, 4;
	add.s64 	%rd500, %rd32, %rd499;
	st.global.f32 	[%rd500], %f487;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7537;
  cvt.f32.f16 %f488, high;}

	// end inline asm
	add.s32 	%r5289, %r380, %r5287;
	mul.wide.s32 	%rd501, %r5289, 4;
	add.s64 	%rd502, %rd32, %rd501;
	st.global.f32 	[%rd502], %f488;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7536;
  cvt.f32.f16 %f489, low;}

	// end inline asm
	add.s32 	%r5290, %r393, %r5287;
	mul.wide.s32 	%rd503, %r5290, 4;
	add.s64 	%rd504, %rd32, %rd503;
	st.global.f32 	[%rd504], %f489;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7536;
  cvt.f32.f16 %f490, high;}

	// end inline asm
	add.s32 	%r5291, %r394, %r5287;
	mul.wide.s32 	%rd505, %r5291, 4;
	add.s64 	%rd506, %rd32, %rd505;
	st.global.f32 	[%rd506], %f490;

$L__BB0_571:
	setp.eq.s32 	%p301, %r23, %r2132;
	@%p301 bra 	$L__BB0_573;

	mad.lo.s32 	%r5292, %r1733, %r23, %r24;
	mov.u32 	%r5293, _ZN6kernel5shmemE;
	mad.lo.s32 	%r5294, %r5292, 1280, %r5293;
	add.s32 	%r5295, %r5294, -256;
	shl.b32 	%r5296, %r28, 4;
	add.s32 	%r5297, %r5295, %r5296;
	st.shared.v4.u32 	[%r5297+256], {%r3841, %r3918, %r7558, %r7556};
	st.shared.v4.u32 	[%r5297+1024], {%r3608, %r3685, %r7571, %r7568};
	shl.b32 	%r5298, %r28, 3;
	add.s32 	%r5299, %r5295, %r5298;
	st.shared.v2.u32 	[%r5299+768], {%r3884, %r3950};

$L__BB0_573:
	setp.eq.s32 	%p302, %r24, %r2137;
	@%p302 bra 	$L__BB0_577;

	mad.lo.s32 	%r5303, %r1732, 384, -64;
	mul.lo.s32 	%r5304, %r5303, %r24;
	mad.lo.s32 	%r5306, %r2133, %r2132, %r5304;
	mad.lo.s32 	%r5307, %r2213, 384, %r5306;
	shl.b32 	%r5308, %r5307, 2;
	mov.u32 	%r5309, _ZN6kernel5shmemE;
	add.s32 	%r5310, %r5309, %r5308;
	add.s32 	%r5311, %r5310, -256;
	shl.b32 	%r5312, %r28, 4;
	add.s32 	%r5313, %r5311, %r5312;
	st.shared.v4.u32 	[%r5313+256], {%r3762, %r3796, %r7565, %r7562};
	st.shared.v4.u32 	[%r5313+1024], {%r4363, %r4397, %r7543, %r7542};
	shl.b32 	%r5314, %r28, 3;
	add.s32 	%r1326, %r5311, %r5314;
	@%p301 bra 	$L__BB0_576;

	st.shared.v2.u32 	[%r1326], {%r3651, %r3717};

$L__BB0_576:
	st.shared.v2.u32 	[%r1326+768], {%r4222, %r4303};

$L__BB0_577:
	setp.ne.s32 	%p304, %r23, %r2132;
	ld.param.u64 	%rd507, [%rd1+56];
	cvta.to.global.u64 	%rd33, %rd507;
	@%p304 bra 	$L__BB0_579;

	mad.lo.s32 	%r5316, %r654, %r1735, %r26;
	mul.lo.s32 	%r5317, %r5316, %r1733;
	mul.lo.s32 	%r5318, %r5317, 768;
	mad.lo.s32 	%r5319, %r24, 384, %r5318;
	add.s32 	%r5320, %r5319, -64;
	mul.wide.s32 	%rd508, %r5320, 4;
	add.s64 	%rd509, %rd33, %rd508;
	add.s64 	%rd511, %rd509, %rd273;
	st.global.v4.u32 	[%rd511+256], {%r3841, %r3918, %r7558, %r7556};
	st.global.v4.u32 	[%rd511+1024], {%r3608, %r3685, %r7571, %r7568};
	add.s64 	%rd513, %rd509, %rd275;
	st.global.v2.u32 	[%rd513+768], {%r3884, %r3950};
	st.global.v2.u32 	[%rd513+1536], {%r3651, %r3717};

$L__BB0_579:
	setp.ne.s32 	%p305, %r24, %r2137;
	@%p305 bra 	$L__BB0_584;

	ld.param.u64 	%rd557, [%rd1+56];
	cvta.to.global.u64 	%rd556, %rd557;
	mad.lo.s32 	%r5323, %r655, %r1734, %r25;
	mad.lo.s32 	%r5327, %r5323, %r1789, %r412;
	mul.wide.s32 	%rd514, %r5327, 4;
	add.s64 	%rd515, %rd556, %rd514;
	add.s64 	%rd517, %rd515, %rd273;
	st.global.v4.u32 	[%rd517+256], {%r3762, %r3796, %r7565, %r7562};
	st.global.v4.u32 	[%rd517+1024], {%r4363, %r4397, %r7543, %r7542};
	add.s64 	%rd34, %rd515, %rd275;
	@%p301 bra 	$L__BB0_582;

	st.global.v2.u32 	[%rd34], {%r3651, %r3717};

$L__BB0_582:
	st.global.v2.u32 	[%rd34+768], {%r4222, %r4303};
	@%p205 bra 	$L__BB0_584;

	st.global.v2.u32 	[%rd34+1536], {%r7650, %r7647};

$L__BB0_584:
	setp.ge.s32 	%p308, %r23, %r2132;
	@%p308 bra 	$L__BB0_586;

	mul.lo.s32 	%r5328, %r1733, 320;
	mul.lo.s32 	%r5329, %r24, 320;
	mad.lo.s32 	%r5330, %r5328, %r23, %r5329;
	add.s32 	%r5334, %r1788, -64;
	mad.lo.s32 	%r5338, %r5334, %r2137, %r2134;
	add.s32 	%r5339, %r5330, %r5338;
	shl.b32 	%r5340, %r5339, 2;
	mov.u32 	%r5341, _ZN6kernel5shmemE;
	add.s32 	%r5342, %r5341, %r5340;
	shl.b32 	%r5343, %r28, 4;
	add.s32 	%r5344, %r5342, %r5343;
	st.shared.v4.u32 	[%r5344], {%r7701, %r7700, %r7696, %r7694};
	shl.b32 	%r5345, %r28, 3;
	add.s32 	%r5346, %r5342, %r5345;
	st.shared.v2.u32 	[%r5346+512], {%r7462, %r7459};
	st.shared.v4.u32 	[%r5344+768], {%r7475, %r7470, %r7450, %r7441};

$L__BB0_586:
	setp.ge.s32 	%p309, %r24, %r2137;
	@%p309 bra 	$L__BB0_590;

	mad.lo.s32 	%r5352, %r2213, 384, %r2140;
	mad.lo.s32 	%r5355, %r2135, %r24, %r5352;
	add.s32 	%r5361, %r5355, %r2138;
	shl.b32 	%r5362, %r5361, 2;
	mov.u32 	%r5363, _ZN6kernel5shmemE;
	add.s32 	%r5364, %r5363, %r5362;
	shl.b32 	%r5365, %r28, 3;
	add.s32 	%r5366, %r5364, %r5365;
	@%p308 bra 	$L__BB0_589;

	add.s32 	%r7224, %r5366, -256;
	st.shared.v2.u32 	[%r7224], {%r7474, %r7469};

$L__BB0_589:
	shl.b32 	%r5385, %r28, 4;
	add.s32 	%r5386, %r5364, %r5385;
	st.shared.v4.u32 	[%r5386], {%r7467, %r7465, %r7433, %r7425};
	add.s32 	%r7225, %r5366, -256;
	st.shared.v2.u32 	[%r7225+768], {%r7434, %r7426};
	st.shared.v4.u32 	[%r5386+768], {%r7699, %r7698, %r7687, %r7686};

$L__BB0_590:
	bar.sync 	0;
	@%p200 bra 	$L__BB0_592;

	mul.lo.s32 	%r5387, %r1733, 320;
	add.s32 	%r5388, %r23, -1;
	mul.lo.s32 	%r5389, %r24, 320;
	mad.lo.s32 	%r5390, %r5387, %r5388, %r5389;
	shl.b32 	%r5391, %r5390, 2;
	mov.u32 	%r5392, _ZN6kernel5shmemE;
	add.s32 	%r5393, %r5392, %r5391;
	add.s32 	%r5394, %r5393, -256;
	shl.b32 	%r5395, %r28, 4;
	add.s32 	%r5396, %r5394, %r5395;
	ld.shared.v4.u32 	{%r7645, %r7643, %r7652, %r7653}, [%r5396+256];
	ld.shared.v4.u32 	{%r7651, %r7648, %r7640, %r7641}, [%r5396+1024];
	shl.b32 	%r5405, %r28, 3;
	add.s32 	%r5406, %r5394, %r5405;
	ld.shared.v2.u32 	{%r7644, %r7642}, [%r5406+768];

$L__BB0_592:
	@%p203 bra 	$L__BB0_595;

	mad.lo.s32 	%r5411, %r1732, 384, -64;
	add.s32 	%r5412, %r24, -1;
	mul.lo.s32 	%r5413, %r5411, %r5412;
	mad.lo.s32 	%r5416, %r2133, %r2132, %r5413;
	mad.lo.s32 	%r5417, %r2213, 384, %r5416;
	shl.b32 	%r5418, %r5417, 2;
	mov.u32 	%r5419, _ZN6kernel5shmemE;
	add.s32 	%r5420, %r5419, %r5418;
	add.s32 	%r5421, %r5420, -256;
	shl.b32 	%r5422, %r28, 4;
	add.s32 	%r5423, %r5421, %r5422;
	ld.shared.v4.u32 	{%r7665, %r7664, %r7660, %r7658}, [%r5423+256];
	ld.shared.v4.u32 	{%r7655, %r7654, %r7657, %r7663}, [%r5423+1024];
	shl.b32 	%r5432, %r28, 3;
	add.s32 	%r5433, %r5421, %r5432;
	ld.shared.v2.u32 	{%r7661, %r7659}, [%r5433+768];
	@%p200 bra 	$L__BB0_595;

	add.s32 	%r7226, %r5433, 768;
	ld.shared.v2.u32 	{%r7646, %r7649}, [%r7226+768];

$L__BB0_595:
	ld.param.u64 	%rd519, [%rd1+56];
	cvta.to.global.u64 	%rd35, %rd519;
	mov.u32 	%r7777, %r7611;
	mov.u32 	%r7778, %r7612;
	mov.u32 	%r7780, %r7614;
	mov.u32 	%r7781, %r7615;
	mov.u32 	%r7801, %r7631;
	mov.u32 	%r7805, %r7635;
	mov.u32 	%r7786, %r7618;
	mov.u32 	%r7787, %r7619;
	mov.u32 	%r7788, %r7620;
	mov.u32 	%r7789, %r7621;
	mov.u32 	%r7806, %r7636;
	mov.u32 	%r7807, %r7637;
	@%p205 bra 	$L__BB0_599;

	mad.lo.s32 	%r5439, %r654, %r1735, %r26;
	mad.lo.s32 	%r5440, %r5439, 768, 384;
	mul.lo.s32 	%r5441, %r5440, %r1733;
	mad.lo.s32 	%r5442, %r24, 384, %r5441;
	add.s32 	%r5443, %r5442, -128;
	mul.wide.s32 	%rd520, %r5443, 4;
	add.s64 	%rd521, %rd35, %rd520;
	add.s64 	%rd523, %rd521, %rd273;
	add.s64 	%rd36, %rd523, 512;
	mov.u32 	%r7801, %r7631;
	mov.u32 	%r7805, %r7635;
	mov.u32 	%r7806, %r7636;
	mov.u32 	%r7807, %r7637;
	@%p203 bra 	$L__BB0_598;

	ld.global.v4.u32 	{%r7806, %r7807, %r7801, %r7805}, [%rd36+-512];

$L__BB0_598:
	ld.global.v4.u32 	{%r7787, %r7789, %r7786, %r7788}, [%rd36];
	ld.global.v4.u32 	{%r7781, %r7778, %r7777, %r7780}, [%rd36+512];
	ld.global.v4.u32 	{%r7610, %r7613, %r7617, %r7616}, [%rd36+1024];

$L__BB0_599:
	mov.u32 	%r7792, %r7622;
	mov.u32 	%r7793, %r7623;
	mov.u32 	%r7794, %r7624;
	mov.u32 	%r7795, %r7625;
	mov.u32 	%r7796, %r7626;
	mov.u32 	%r7797, %r7627;
	mov.u32 	%r7798, %r7628;
	mov.u32 	%r7803, %r7633;
	@%p208 bra 	$L__BB0_601;

	mad.lo.s32 	%r5461, %r655, %r1734, %r25;
	mad.lo.s32 	%r5465, %r5461, %r1789, %r413;
	mul.wide.s32 	%rd524, %r5465, 4;
	add.s64 	%rd525, %rd35, %rd524;
	add.s64 	%rd527, %rd525, %rd273;
	ld.global.v4.u32 	{%r7630, %r7629, %r7634, %r7632}, [%rd527];
	ld.global.v4.u32 	{%r7798, %r7795, %r7792, %r7793}, [%rd527+512];
	ld.global.v4.u32 	{%r7797, %r7794, %r7796, %r7803}, [%rd527+1024];
	ld.global.v4.u32 	{%r7806, %r7807, %r7801, %r7805}, [%rd527+1536];

$L__BB0_601:
	neg.s32 	%r7232, %r1737;
	not.b32 	%r7231, %r26;
	add.s32 	%r7230, %r1735, %r7231;
	mul.lo.s32 	%r7229, %r7230, %r1736;
	not.b32 	%r7228, %r25;
	add.s32 	%r7227, %r1734, %r7228;
	mad.lo.s32 	%r5489, %r7227, %r1736, %r7229;
	add.s32 	%r5490, %r5489, %r1737;
	add.s32 	%r5499, %r5490, %r2546;
	add.s32 	%r1446, %r7497, 1;
	add.s32 	%r5500, %r1446, %r5499;
	div.s32 	%r5501, %r5500, %r1737;
	mad.lo.s32 	%r1447, %r5501, %r7232, %r5500;
	mad.lo.s32 	%r5508, %r5501, %r30, %r2557;
	ld.param.u64 	%rd528, [%rd1+72];
	cvta.to.global.u64 	%rd529, %rd528;
	rem.s32 	%r5509, %r5508, %r1738;
	shr.u32 	%r5510, %r5509, 31;
	add.s32 	%r5511, %r5509, %r5510;
	shr.s32 	%r5512, %r5511, 1;
	mad.lo.s32 	%r5513, %r5512, %r1737, %r1447;
	shl.b32 	%r5514, %r5513, 5;
	add.s32 	%r5515, %r5514, %r28;
	cvt.s64.s32 	%rd37, %r5515;
	mul.wide.s32 	%rd530, %r5515, 4;
	add.s64 	%rd531, %rd529, %rd530;
	ld.global.u32 	%r7499, [%rd531];
	ld.param.u64 	%rd532, [%rd1+80];
	cvta.to.global.u64 	%rd38, %rd532;
	@%p71 bra 	$L__BB0_603;
	bra.uni 	$L__BB0_602;

$L__BB0_603:
	shl.b64 	%rd535, %rd37, 2;
	add.s64 	%rd536, %rd38, %rd535;
	ld.global.u32 	%r7498, [%rd536];
	bra.uni 	$L__BB0_604;

$L__BB0_602:
	shl.b32 	%r5516, %r1447, 5;
	add.s32 	%r5517, %r5516, %r28;
	mul.wide.s32 	%rd533, %r5517, 16;
	add.s64 	%rd534, %rd38, %rd533;
	ld.global.v4.u32 	{%r5518, %r5519, %r5520, %r5521}, [%rd534];
	mov.u32 	%r7479, %r7483;
	mov.u32 	%r7480, %r7484;
	mov.u32 	%r7481, %r7485;
	mov.u32 	%r7482, %r7486;
	mov.u32 	%r7483, %r7487;
	mov.u32 	%r7484, %r7488;
	mov.u32 	%r7485, %r7489;
	mov.u32 	%r7486, %r7490;
	mov.u32 	%r7487, %r5521;
	mov.u32 	%r7488, %r5520;
	mov.u32 	%r7489, %r5519;
	mov.u32 	%r7490, %r5518;

$L__BB0_604:
	mov.f32 	%f538, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5522, {low,high};}

	// end inline asm
	selp.b32 	%r5524, %r7328, %r5522, %p12;
	// begin inline asm
	{mul.f16x2 %r7476,%r5524,%r7453;
}
	// end inline asm
	selp.b32 	%r5527, %r7332, %r5522, %p12;
	// begin inline asm
	{mul.f16x2 %r7471,%r5527,%r7444;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5529, {low,high};}

	// end inline asm
	selp.b32 	%r5531, %r7328, %r5529, %p12;
	// begin inline asm
	{mul.f16x2 %r7463,%r5531,%r7417;
}
	// end inline asm
	selp.b32 	%r5534, %r7332, %r5529, %p12;
	// begin inline asm
	{mul.f16x2 %r7460,%r5534,%r7412;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5536, {low,high};}

	// end inline asm
	selp.b32 	%r5538, %r7328, %r5536, %p12;
	// begin inline asm
	{mul.f16x2 %r5537,%r5538,%r7409;
}
	// end inline asm
	selp.b32 	%r5541, %r7332, %r5536, %p12;
	// begin inline asm
	{mul.f16x2 %r5540,%r5541,%r7402;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5543, {low,high};}

	// end inline asm
	selp.b32 	%r5545, %r7328, %r5543, %p12;
	// begin inline asm
	{mul.f16x2 %r5544,%r5545,%r7408;
}
	// end inline asm
	selp.b32 	%r5548, %r7332, %r5543, %p12;
	// begin inline asm
	{mul.f16x2 %r5547,%r5548,%r7401;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5550, {low,high};}

	// end inline asm
	selp.b32 	%r5552, %r7328, %r5550, %p12;
	// begin inline asm
	{mul.f16x2 %r7453,%r5552,%r7407;
}
	// end inline asm
	selp.b32 	%r5555, %r7332, %r5550, %p12;
	// begin inline asm
	{mul.f16x2 %r7444,%r5555,%r7400;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5557, {low,high};}

	// end inline asm
	selp.b32 	%r5559, %r7328, %r5557, %p12;
	// begin inline asm
	{mul.f16x2 %r5558,%r5559,%r7395;
}
	// end inline asm
	selp.b32 	%r5562, %r7332, %r5557, %p12;
	// begin inline asm
	{mul.f16x2 %r5561,%r5562,%r7390;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5564, {low,high};}

	// end inline asm
	selp.b32 	%r5566, %r7328, %r5564, %p12;
	// begin inline asm
	{mul.f16x2 %r7436,%r5566,%r7394;
}
	// end inline asm
	selp.b32 	%r5569, %r7332, %r5564, %p12;
	// begin inline asm
	{mul.f16x2 %r7428,%r5569,%r7389;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5571, {low,high};}

	// end inline asm
	selp.b32 	%r5573, %r7328, %r5571, %p12;
	// begin inline asm
	{mul.f16x2 %r5572,%r5573,%r7374;
}
	// end inline asm
	selp.b32 	%r5576, %r7332, %r5571, %p12;
	// begin inline asm
	{mul.f16x2 %r5575,%r5576,%r7367;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5578, {low,high};}

	// end inline asm
	selp.b32 	%r5580, %r7328, %r5578, %p12;
	// begin inline asm
	{mul.f16x2 %r5579,%r5580,%r7628;
}
	// end inline asm
	selp.b32 	%r5583, %r7332, %r5578, %p12;
	// begin inline asm
	{mul.f16x2 %r5582,%r5583,%r7625;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5585, {low,high};}

	// end inline asm
	selp.b32 	%r5587, %r7328, %r5585, %p12;
	// begin inline asm
	{mul.f16x2 %r7417,%r5587,%r7627;
}
	// end inline asm
	selp.b32 	%r5590, %r7332, %r5585, %p12;
	// begin inline asm
	{mul.f16x2 %r7412,%r5590,%r7624;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5592, {low,high};}

	// end inline asm
	selp.b32 	%r5594, %r7328, %r5592, %p12;
	// begin inline asm
	{mul.f16x2 %r5593,%r5594,%r7361;
}
	// end inline asm
	selp.b32 	%r5597, %r7332, %r5592, %p12;
	// begin inline asm
	{mul.f16x2 %r5596,%r5597,%r7354;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5599, {low,high};}

	// end inline asm
	selp.b32 	%r5601, %r7328, %r5599, %p12;
	// begin inline asm
	{mul.f16x2 %r5600,%r5601,%r7360;
}
	// end inline asm
	selp.b32 	%r5604, %r7332, %r5599, %p12;
	// begin inline asm
	{mul.f16x2 %r5603,%r5604,%r7353;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5606, {low,high};}

	// end inline asm
	selp.b32 	%r5608, %r7328, %r5606, %p12;
	// begin inline asm
	{mul.f16x2 %r7407,%r5608,%r7359;
}
	// end inline asm
	selp.b32 	%r5611, %r7332, %r5606, %p12;
	// begin inline asm
	{mul.f16x2 %r7400,%r5611,%r7352;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5613, {low,high};}

	// end inline asm
	selp.b32 	%r5615, %r7328, %r5613, %p12;
	// begin inline asm
	{mul.f16x2 %r5614,%r5615,%r7347;
}
	// end inline asm
	selp.b32 	%r5618, %r7332, %r5613, %p12;
	// begin inline asm
	{mul.f16x2 %r5617,%r5618,%r7339;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5620, {low,high};}

	// end inline asm
	selp.b32 	%r5622, %r7328, %r5620, %p12;
	// begin inline asm
	{mul.f16x2 %r5621,%r5622,%r7346;
}
	// end inline asm
	selp.b32 	%r5625, %r7332, %r5620, %p12;
	// begin inline asm
	{mul.f16x2 %r5624,%r5625,%r7338;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5627, {low,high};}

	// end inline asm
	selp.b32 	%r5629, %r7328, %r5627, %p12;
	// begin inline asm
	{mul.f16x2 %r7394,%r5629,%r7615;
}
	// end inline asm
	selp.b32 	%r5632, %r7332, %r5627, %p12;
	// begin inline asm
	{mul.f16x2 %r7389,%r5632,%r7612;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5634, {low,high};}

	// end inline asm
	selp.b32 	%r5636, %r7328, %r5634, %p12;
	// begin inline asm
	{mul.f16x2 %r5635,%r5636,%r7611;
}
	// end inline asm
	selp.b32 	%r5639, %r7332, %r5634, %p12;
	// begin inline asm
	{mul.f16x2 %r5638,%r5639,%r7614;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5641, {low,high};}

	// end inline asm
	selp.b32 	%r5643, %r7328, %r5641, %p12;
	// begin inline asm
	{mul.f16x2 %r5642,%r5643,%r7622;
}
	// end inline asm
	selp.b32 	%r5646, %r7332, %r5641, %p12;
	// begin inline asm
	{mul.f16x2 %r5645,%r5646,%r7623;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5648, {low,high};}

	// end inline asm
	selp.b32 	%r5650, %r7328, %r5648, %p12;
	// begin inline asm
	{mul.f16x2 %r5649,%r5650,%r7370;
}
	// end inline asm
	selp.b32 	%r5653, %r7332, %r5648, %p12;
	// begin inline asm
	{mul.f16x2 %r5652,%r5653,%r7416;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5655, {low,high};}

	// end inline asm
	selp.b32 	%r5657, %r7328, %r5655, %p12;
	// begin inline asm
	{mul.f16x2 %r5656,%r5657,%r7626;
}
	// end inline asm
	selp.b32 	%r5660, %r7332, %r5655, %p12;
	// begin inline asm
	{mul.f16x2 %r5659,%r5660,%r7633;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5662, {low,high};}

	// end inline asm
	selp.b32 	%r5664, %r7328, %r5662, %p12;
	// begin inline asm
	{mul.f16x2 %r7359,%r5664,%r7631;
}
	// end inline asm
	selp.b32 	%r5667, %r7332, %r5662, %p12;
	// begin inline asm
	{mul.f16x2 %r7352,%r5667,%r7635;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5669, {low,high};}

	// end inline asm
	selp.b32 	%r5671, %r7328, %r5669, %p12;
	// begin inline asm
	{mul.f16x2 %r5670,%r5671,%r7618;
}
	// end inline asm
	selp.b32 	%r5674, %r7332, %r5669, %p12;
	// begin inline asm
	{mul.f16x2 %r5673,%r5674,%r7620;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5676, {low,high};}

	// end inline asm
	selp.b32 	%r5678, %r7328, %r5676, %p12;
	// begin inline asm
	{mul.f16x2 %r5677,%r5678,%r7619;
}
	// end inline asm
	selp.b32 	%r5681, %r7332, %r5676, %p12;
	// begin inline asm
	{mul.f16x2 %r5680,%r5681,%r7621;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5683, {low,high};}

	// end inline asm
	selp.b32 	%r5685, %r7328, %r5683, %p12;
	// begin inline asm
	{mul.f16x2 %r5684,%r5685,%r7636;
}
	// end inline asm
	selp.b32 	%r5688, %r7332, %r5683, %p12;
	// begin inline asm
	{mul.f16x2 %r5687,%r5688,%r7637;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5690,%r7477,%r3651;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5693,%r3762,%r3608;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5696,%r5690,%r5693;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5699,%r7236,%r5696;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5702,%r7476,%r5699;
}
	// end inline asm
	@%p12 bra 	$L__BB0_606;

	mov.u32 	%r7476, %r5702;

$L__BB0_606:
	// begin inline asm
	{sub.f16x2 %r5705,%r7472,%r3717;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5708,%r3796,%r3685;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5711,%r5705,%r5708;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5714,%r7236,%r5711;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5717,%r7471,%r5714;
}
	// end inline asm
	@%p12 bra 	$L__BB0_608;

	mov.u32 	%r7471, %r5717;

$L__BB0_608:
	// begin inline asm
	{sub.f16x2 %r5720,%r7464,%r3884;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5723,%r7478,%r3841;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5726,%r5720,%r5723;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5729,%r7236,%r5726;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5732,%r7463,%r5729;
}
	// end inline asm
	@%p12 bra 	$L__BB0_610;

	mov.u32 	%r7463, %r5732;

$L__BB0_610:
	// begin inline asm
	{sub.f16x2 %r5735,%r7461,%r3950;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5738,%r7473,%r3918;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5741,%r5735,%r5738;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5744,%r7236,%r5741;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5747,%r7460,%r5744;
}
	// end inline asm
	@%p12 bra 	$L__BB0_612;

	mov.u32 	%r7460, %r5747;

$L__BB0_612:
	// begin inline asm
	{sub.f16x2 %r5750,%r7472,%r7477;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5753,%r7327,%r5750;
}
	// end inline asm
	@%p12 bra 	$L__BB0_614;
	bra.uni 	$L__BB0_613;

$L__BB0_614:
	// begin inline asm
	{neg.f16x2 %r7825,%r5537;
}
	// end inline asm
	bra.uni 	$L__BB0_615;

$L__BB0_613:
	// begin inline asm
	{mul.f16x2 %r7825,%r7328,%r5750;
}
	// end inline asm

$L__BB0_615:
	mov.u32 	%r5764, 31;
	mov.u32 	%r5766, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5762,%r7825,%r5764,%r2243,%r5766;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5767,%r5753,%r5762;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5770,%r7565,%r7571;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5773,%r5770,%r5767;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5776,%r7236,%r5773;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7455,%r5537,%r5776;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5782,%r7473,%r7478;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5785,%r7327,%r5782;
}
	// end inline asm
	mov.u32 	%r7826, %r5544;
	@%p12 bra 	$L__BB0_617;

	// begin inline asm
	{mul.f16x2 %r7826,%r7328,%r5782;
}
	// end inline asm

$L__BB0_617:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5794,%r7826,%r5764,%r2243,%r5766;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5799,%r5785,%r5794;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5802,%r7553,%r7571;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5805,%r5799,%r5802;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5808,%r7236,%r5805;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7454,%r5544,%r5808;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5814,%r7457,%r7477;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5817,%r7468,%r7478;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5820,%r5814,%r5817;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5823,%r7236,%r5820;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5826,%r7453,%r5823;
}
	// end inline asm
	@%p12 bra 	$L__BB0_619;

	mov.u32 	%r7453, %r5826;

$L__BB0_619:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7477;
 mov.b16 %rs65, high;}
	// end inline asm
	mov.u32 	%r5837, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r5833,%r7477,%r416,%r2243,%r5837;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5833;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5839, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5840,%r5839,%r7472;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5843,%r7331,%r5840;
}
	// end inline asm
	@%p12 bra 	$L__BB0_621;
	bra.uni 	$L__BB0_620;

$L__BB0_621:
	// begin inline asm
	{neg.f16x2 %r7828,%r5540;
}
	// end inline asm
	bra.uni 	$L__BB0_622;

$L__BB0_620:
	// begin inline asm
	{mul.f16x2 %r7828,%r7332,%r5840;
}
	// end inline asm

$L__BB0_622:
	mov.u32 	%r5856, 31;
	mov.u32 	%r5880, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5854,%r7828,%r5856,%r2243,%r5880;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5859,%r5843,%r5854;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5862,%r7562,%r7568;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5865,%r5862,%r5859;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5868,%r7236,%r5865;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7446,%r5540,%r5868;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7478;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5876,%r7478,%r416,%r2243,%r5880;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5876;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5882, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5883,%r5882,%r7473;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5886,%r7331,%r5883;
}
	// end inline asm
	mov.u32 	%r7829, %r5547;
	@%p12 bra 	$L__BB0_624;

	// begin inline asm
	{mul.f16x2 %r7829,%r7332,%r5883;
}
	// end inline asm

$L__BB0_624:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5897,%r7829,%r5856,%r2243,%r5880;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5902,%r5886,%r5897;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5905,%r7550,%r7568;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5908,%r5902,%r5905;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5911,%r7236,%r5908;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7445,%r5547,%r5911;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5917,%r7448,%r7472;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5920,%r7466,%r7473;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5923,%r5917,%r5920;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5926,%r7236,%r5923;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5929,%r7444,%r5926;
}
	// end inline asm
	@%p12 bra 	$L__BB0_626;

	mov.u32 	%r7444, %r5929;

$L__BB0_626:
	// begin inline asm
	{sub.f16x2 %r5934,%r7466,%r7468;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5937,%r7327,%r5934;
}
	// end inline asm
	mov.u32 	%r7831, %r5558;
	@%p12 bra 	$L__BB0_628;

	// begin inline asm
	{mul.f16x2 %r7831,%r7328,%r5934;
}
	// end inline asm

$L__BB0_628:
	mov.u32 	%r5946, 31;
	mov.u32 	%r5948, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5944,%r7831,%r5946,%r2243,%r5948;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5949,%r5937,%r5944;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5952,%r7547,%r7565;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5955,%r5949,%r5952;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5958,%r7236,%r5955;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7437,%r5558,%r5958;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5964,%r7439,%r4222;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5967,%r4363,%r7468;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5970,%r5964,%r5967;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5973,%r7236,%r5970;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5976,%r7436,%r5973;
}
	// end inline asm
	@%p12 bra 	$L__BB0_630;

	mov.u32 	%r7436, %r5976;

$L__BB0_630:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7468;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5983,%r7468,%r416,%r2243,%r5948;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5983;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5989, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5990,%r5989,%r7466;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5993,%r7331,%r5990;
}
	// end inline asm
	mov.u32 	%r7833, %r5561;
	@%p12 bra 	$L__BB0_632;

	// begin inline asm
	{mul.f16x2 %r7833,%r7332,%r5990;
}
	// end inline asm

$L__BB0_632:
	mov.u32 	%r6004, 31;
	mov.u32 	%r6006, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6002,%r7833,%r6004,%r2243,%r6006;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6007,%r5993,%r6002;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6010,%r7544,%r7562;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6013,%r6007,%r6010;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6016,%r7236,%r6013;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7429,%r5561,%r6016;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6022,%r7431,%r4303;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6025,%r4397,%r7466;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6028,%r6022,%r6025;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6031,%r7236,%r6028;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6034,%r7428,%r6031;
}
	// end inline asm
	@%p12 bra 	$L__BB0_634;

	mov.u32 	%r7428, %r6034;

$L__BB0_634:
	// begin inline asm
	{sub.f16x2 %r6039,%r7461,%r7464;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6042,%r7327,%r6039;
}
	// end inline asm
	@%p12 bra 	$L__BB0_636;
	bra.uni 	$L__BB0_635;

$L__BB0_636:
	// begin inline asm
	{neg.f16x2 %r7835,%r5572;
}
	// end inline asm
	bra.uni 	$L__BB0_637;

$L__BB0_635:
	// begin inline asm
	{mul.f16x2 %r7835,%r7328,%r6039;
}
	// end inline asm

$L__BB0_637:
	mov.u32 	%r6053, 31;
	mov.u32 	%r6055, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6051,%r7835,%r6053,%r2243,%r6055;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6056,%r6042,%r6051;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6059,%r7553,%r7558;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6062,%r6059,%r6056;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6065,%r7236,%r6062;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7419,%r5572,%r6065;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6071,%r7664,%r7665;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6074,%r7327,%r6071;
}
	// end inline asm
	mov.u32 	%r7836, %r5579;
	@%p12 bra 	$L__BB0_639;

	// begin inline asm
	{mul.f16x2 %r7836,%r7328,%r6071;
}
	// end inline asm

$L__BB0_639:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6083,%r7836,%r6053,%r2243,%r6055;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6088,%r6074,%r6083;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6091,%r7660,%r7558;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6094,%r6088,%r6091;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6097,%r7236,%r6094;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7418,%r5579,%r6097;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6103,%r7661,%r7464;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6106,%r7458,%r7665;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6109,%r6103,%r6106;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6112,%r7236,%r6109;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6115,%r7417,%r6112;
}
	// end inline asm
	@%p12 bra 	$L__BB0_641;

	mov.u32 	%r7417, %r6115;

$L__BB0_641:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7464;
 mov.b16 %rs77, high;}
	// end inline asm
	mov.u32 	%r6126, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6122,%r7464,%r416,%r2243,%r6126;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6122;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6128, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6129,%r6128,%r7461;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6132,%r7331,%r6129;
}
	// end inline asm
	@%p12 bra 	$L__BB0_643;
	bra.uni 	$L__BB0_642;

$L__BB0_643:
	// begin inline asm
	{neg.f16x2 %r7838,%r5575;
}
	// end inline asm
	bra.uni 	$L__BB0_644;

$L__BB0_642:
	// begin inline asm
	{mul.f16x2 %r7838,%r7332,%r6129;
}
	// end inline asm

$L__BB0_644:
	mov.u32 	%r6145, 31;
	mov.u32 	%r6169, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6143,%r7838,%r6145,%r2243,%r6169;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6148,%r6132,%r6143;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6151,%r7550,%r7556;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6154,%r6151,%r6148;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6157,%r7236,%r6154;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7414,%r5575,%r6157;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7665;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6165,%r7665,%r416,%r2243,%r6169;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6165;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6171, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6172,%r6171,%r7664;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6175,%r7331,%r6172;
}
	// end inline asm
	mov.u32 	%r7839, %r5582;
	@%p12 bra 	$L__BB0_646;

	// begin inline asm
	{mul.f16x2 %r7839,%r7332,%r6172;
}
	// end inline asm

$L__BB0_646:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6186,%r7839,%r6145,%r2243,%r6169;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6191,%r6175,%r6186;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6194,%r7658,%r7556;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6197,%r6191,%r6194;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6200,%r7236,%r6197;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7413,%r5582,%r6200;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6206,%r7659,%r7461;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6209,%r7449,%r7664;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6212,%r6206,%r6209;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6215,%r7236,%r6212;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6218,%r7412,%r6215;
}
	// end inline asm
	@%p12 bra 	$L__BB0_648;

	mov.u32 	%r7412, %r6218;

$L__BB0_648:
	// begin inline asm
	{sub.f16x2 %r6223,%r7448,%r7457;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6226,%r7327,%r6223;
}
	// end inline asm
	@%p12 bra 	$L__BB0_650;
	bra.uni 	$L__BB0_649;

$L__BB0_650:
	// begin inline asm
	{neg.f16x2 %r7841,%r5593;
}
	// end inline asm
	bra.uni 	$L__BB0_651;

$L__BB0_649:
	// begin inline asm
	{mul.f16x2 %r7841,%r7328,%r6223;
}
	// end inline asm

$L__BB0_651:
	mov.u32 	%r6237, 31;
	mov.u32 	%r6239, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6235,%r7841,%r6237,%r2243,%r6239;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6240,%r6226,%r6235;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6243,%r7547,%r7553;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6246,%r6243,%r6240;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6249,%r7236,%r6246;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7409,%r5593,%r6249;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6255,%r7449,%r7458;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6258,%r7327,%r6255;
}
	// end inline asm
	mov.u32 	%r7842, %r5600;
	@%p12 bra 	$L__BB0_653;

	// begin inline asm
	{mul.f16x2 %r7842,%r7328,%r6255;
}
	// end inline asm

$L__BB0_653:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6267,%r7842,%r6237,%r2243,%r6239;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6272,%r6258,%r6267;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6275,%r7540,%r7553;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6278,%r6272,%r6275;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6281,%r7236,%r6278;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7408,%r5600,%r6281;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6287,%r7411,%r7457;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6290,%r7440,%r7458;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6293,%r6287,%r6290;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6296,%r7236,%r6293;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6299,%r7407,%r6296;
}
	// end inline asm
	@%p12 bra 	$L__BB0_655;

	mov.u32 	%r7407, %r6299;

$L__BB0_655:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7457;
 mov.b16 %rs85, high;}
	// end inline asm
	mov.u32 	%r6310, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6306,%r7457,%r416,%r2243,%r6310;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6306;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6312, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6313,%r6312,%r7448;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6316,%r7331,%r6313;
}
	// end inline asm
	@%p12 bra 	$L__BB0_657;
	bra.uni 	$L__BB0_656;

$L__BB0_657:
	// begin inline asm
	{neg.f16x2 %r7844,%r5596;
}
	// end inline asm
	bra.uni 	$L__BB0_658;

$L__BB0_656:
	// begin inline asm
	{mul.f16x2 %r7844,%r7332,%r6313;
}
	// end inline asm

$L__BB0_658:
	mov.u32 	%r6329, 31;
	mov.u32 	%r6353, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6327,%r7844,%r6329,%r2243,%r6353;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6332,%r6316,%r6327;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6335,%r7544,%r7550;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6338,%r6335,%r6332;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6341,%r7236,%r6338;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7402,%r5596,%r6341;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7458;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6349,%r7458,%r416,%r2243,%r6353;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6349;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6355, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6356,%r6355,%r7449;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6359,%r7331,%r6356;
}
	// end inline asm
	mov.u32 	%r7845, %r5603;
	@%p12 bra 	$L__BB0_660;

	// begin inline asm
	{mul.f16x2 %r7845,%r7332,%r6356;
}
	// end inline asm

$L__BB0_660:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6370,%r7845,%r6329,%r2243,%r6353;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6375,%r6359,%r6370;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6378,%r7538,%r7550;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6381,%r6375,%r6378;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6384,%r7236,%r6381;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7401,%r5603,%r6384;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6390,%r7404,%r7448;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6393,%r7432,%r7449;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6396,%r6390,%r6393;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6399,%r7236,%r6396;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6402,%r7400,%r6399;
}
	// end inline asm
	@%p12 bra 	$L__BB0_662;

	mov.u32 	%r7400, %r6402;

$L__BB0_662:
	// begin inline asm
	{sub.f16x2 %r6407,%r7431,%r7439;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6410,%r7327,%r6407;
}
	// end inline asm
	@%p12 bra 	$L__BB0_664;
	bra.uni 	$L__BB0_663;

$L__BB0_664:
	// begin inline asm
	{neg.f16x2 %r7847,%r5614;
}
	// end inline asm
	bra.uni 	$L__BB0_665;

$L__BB0_663:
	// begin inline asm
	{mul.f16x2 %r7847,%r7328,%r6407;
}
	// end inline asm

$L__BB0_665:
	mov.u32 	%r6421, 31;
	mov.u32 	%r6423, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6419,%r7847,%r6421,%r2243,%r6423;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6424,%r6410,%r6419;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6427,%r7543,%r7547;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6430,%r6427,%r6424;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6433,%r7236,%r6430;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7396,%r5614,%r6433;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6439,%r7432,%r7440;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6442,%r7327,%r6439;
}
	// end inline asm
	mov.u32 	%r7848, %r5621;
	@%p12 bra 	$L__BB0_667;

	// begin inline asm
	{mul.f16x2 %r7848,%r7328,%r6439;
}
	// end inline asm

$L__BB0_667:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6451,%r7848,%r6421,%r2243,%r6423;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6456,%r6442,%r6451;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6459,%r7537,%r7547;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6462,%r6456,%r6459;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6465,%r7236,%r6462;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7395,%r5621,%r6465;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6471,%r7644,%r7439;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6474,%r7651,%r7440;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6477,%r6471,%r6474;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6480,%r7236,%r6477;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6483,%r7394,%r6480;
}
	// end inline asm
	@%p12 bra 	$L__BB0_669;

	mov.u32 	%r7394, %r6483;

$L__BB0_669:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7439;
 mov.b16 %rs93, high;}
	// end inline asm
	mov.u32 	%r6494, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6490,%r7439,%r416,%r2243,%r6494;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6490;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6496, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6497,%r6496,%r7431;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6500,%r7331,%r6497;
}
	// end inline asm
	@%p12 bra 	$L__BB0_671;
	bra.uni 	$L__BB0_670;

$L__BB0_671:
	// begin inline asm
	{neg.f16x2 %r7850,%r5617;
}
	// end inline asm
	bra.uni 	$L__BB0_672;

$L__BB0_670:
	// begin inline asm
	{mul.f16x2 %r7850,%r7332,%r6497;
}
	// end inline asm

$L__BB0_672:
	mov.u32 	%r6513, 31;
	mov.u32 	%r6537, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6511,%r7850,%r6513,%r2243,%r6537;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6516,%r6500,%r6511;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6519,%r7542,%r7544;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6522,%r6519,%r6516;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6525,%r7236,%r6522;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7391,%r5617,%r6525;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7440;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6533,%r7440,%r416,%r2243,%r6537;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6533;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6539, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6540,%r6539,%r7432;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6543,%r7331,%r6540;
}
	// end inline asm
	mov.u32 	%r7851, %r5624;
	@%p12 bra 	$L__BB0_674;

	// begin inline asm
	{mul.f16x2 %r7851,%r7332,%r6540;
}
	// end inline asm

$L__BB0_674:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6554,%r7851,%r6513,%r2243,%r6537;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6559,%r6543,%r6554;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6562,%r7536,%r7544;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6565,%r6559,%r6562;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6568,%r7236,%r6565;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7390,%r5624,%r6568;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6574,%r7642,%r7431;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6577,%r7648,%r7432;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6580,%r6574,%r6577;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6583,%r7236,%r6580;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6586,%r7389,%r6583;
}
	// end inline asm
	@%p12 bra 	$L__BB0_676;

	mov.u32 	%r7389, %r6586;

$L__BB0_676:
	// begin inline asm
	{sub.f16x2 %r6591,%r7648,%r7651;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6594,%r7327,%r6591;
}
	// end inline asm
	mov.u32 	%r7853, %r5635;
	@%p12 bra 	$L__BB0_678;

	// begin inline asm
	{mul.f16x2 %r7853,%r7328,%r6591;
}
	// end inline asm

$L__BB0_678:
	mov.u32 	%r6603, 31;
	mov.u32 	%r6627, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6601,%r7853,%r6603,%r2243,%r6627;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6606,%r6594,%r6601;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6609,%r7640,%r7543;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6612,%r6606,%r6609;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6615,%r7236,%r6612;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7385,%r5635,%r6615;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7651;
 mov.b16 %rs101, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6623,%r7651,%r416,%r2243,%r6627;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6623;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6629, {%rs101,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6630,%r6629,%r7648;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6633,%r7331,%r6630;
}
	// end inline asm
	mov.u32 	%r7854, %r5638;
	@%p12 bra 	$L__BB0_680;

	// begin inline asm
	{mul.f16x2 %r7854,%r7332,%r6630;
}
	// end inline asm

$L__BB0_680:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6644,%r7854,%r6603,%r2243,%r6627;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6649,%r6633,%r6644;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6652,%r7641,%r7542;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6655,%r6649,%r6652;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6658,%r7236,%r6655;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7381,%r5638,%r6658;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6664,%r7659,%r7661;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6667,%r7327,%r6664;
}
	// end inline asm
	@%p12 bra 	$L__BB0_682;
	bra.uni 	$L__BB0_681;

$L__BB0_682:
	// begin inline asm
	{neg.f16x2 %r7855,%r5642;
}
	// end inline asm
	bra.uni 	$L__BB0_683;

$L__BB0_681:
	// begin inline asm
	{mul.f16x2 %r7855,%r7328,%r6664;
}
	// end inline asm

$L__BB0_683:
	mov.u32 	%r6680, 31;
	mov.u32 	%r6704, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6678,%r7855,%r6680,%r2243,%r6704;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6683,%r6667,%r6678;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6686,%r7540,%r7660;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6689,%r6686,%r6683;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6692,%r7236,%r6689;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7374,%r5642,%r6692;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7661;
 mov.b16 %rs105, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6700,%r7661,%r416,%r2243,%r6704;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6700;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6706, {%rs105,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6707,%r6706,%r7659;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6710,%r7331,%r6707;
}
	// end inline asm
	@%p12 bra 	$L__BB0_685;
	bra.uni 	$L__BB0_684;

$L__BB0_685:
	// begin inline asm
	{neg.f16x2 %r7856,%r5645;
}
	// end inline asm
	bra.uni 	$L__BB0_686;

$L__BB0_684:
	// begin inline asm
	{mul.f16x2 %r7856,%r7332,%r6707;
}
	// end inline asm

$L__BB0_686:
	mov.u32 	%r6725, 31;
	mov.u32 	%r6727, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6723,%r7856,%r6725,%r2243,%r6727;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6728,%r6710,%r6723;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6731,%r7538,%r7658;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6734,%r6731,%r6728;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6737,%r7236,%r6734;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7367,%r5645,%r6737;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6743,%r7404,%r7411;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6746,%r7327,%r6743;
}
	// end inline asm
	@%p12 bra 	$L__BB0_688;
	bra.uni 	$L__BB0_687;

$L__BB0_688:
	// begin inline asm
	{neg.f16x2 %r7857,%r5649;
}
	// end inline asm
	bra.uni 	$L__BB0_689;

$L__BB0_687:
	// begin inline asm
	{mul.f16x2 %r7857,%r7328,%r6743;
}
	// end inline asm

$L__BB0_689:
	mov.u32 	%r6759, 31;
	mov.u32 	%r6761, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6757,%r7857,%r6759,%r2243,%r6761;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6762,%r6746,%r6757;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6765,%r7537,%r7540;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6768,%r6765,%r6762;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6771,%r7236,%r6768;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7361,%r5649,%r6771;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6777,%r7654,%r7655;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6780,%r7327,%r6777;
}
	// end inline asm
	mov.u32 	%r7858, %r5656;
	@%p12 bra 	$L__BB0_691;

	// begin inline asm
	{mul.f16x2 %r7858,%r7328,%r6777;
}
	// end inline asm

$L__BB0_691:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6789,%r7858,%r6759,%r2243,%r6761;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6794,%r6780,%r6789;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6797,%r7657,%r7540;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6800,%r6794,%r6797;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6803,%r7236,%r6800;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7360,%r5656,%r6803;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6809,%r7646,%r7411;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6812,%r7645,%r7655;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6815,%r6809,%r6812;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6818,%r7236,%r6815;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6821,%r7359,%r6818;
}
	// end inline asm
	@%p12 bra 	$L__BB0_693;

	mov.u32 	%r7359, %r6821;

$L__BB0_693:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7411;
 mov.b16 %rs109, high;}
	// end inline asm
	mov.u32 	%r6832, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6828,%r7411,%r416,%r2243,%r6832;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6828;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6834, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6835,%r6834,%r7404;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6838,%r7331,%r6835;
}
	// end inline asm
	@%p12 bra 	$L__BB0_695;
	bra.uni 	$L__BB0_694;

$L__BB0_695:
	// begin inline asm
	{neg.f16x2 %r7860,%r5652;
}
	// end inline asm
	bra.uni 	$L__BB0_696;

$L__BB0_694:
	// begin inline asm
	{mul.f16x2 %r7860,%r7332,%r6835;
}
	// end inline asm

$L__BB0_696:
	mov.u32 	%r6851, 31;
	mov.u32 	%r6875, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6849,%r7860,%r6851,%r2243,%r6875;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6854,%r6838,%r6849;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6857,%r7536,%r7538;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6860,%r6857,%r6854;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6863,%r7236,%r6860;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7354,%r5652,%r6863;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7655;
 mov.b16 %rs113, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6871,%r7655,%r416,%r2243,%r6875;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6871;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6877, {%rs113,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6878,%r6877,%r7654;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6881,%r7331,%r6878;
}
	// end inline asm
	mov.u32 	%r7861, %r5659;
	@%p12 bra 	$L__BB0_698;

	// begin inline asm
	{mul.f16x2 %r7861,%r7332,%r6878;
}
	// end inline asm

$L__BB0_698:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6892,%r7861,%r6851,%r2243,%r6875;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6897,%r6881,%r6892;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6900,%r7663,%r7538;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6903,%r6897,%r6900;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6906,%r7236,%r6903;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7353,%r5659,%r6906;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6912,%r7649,%r7404;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6915,%r7643,%r7654;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6918,%r6912,%r6915;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6921,%r7236,%r6918;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6924,%r7352,%r6921;
}
	// end inline asm
	@%p12 bra 	$L__BB0_700;

	mov.u32 	%r7352, %r6924;

$L__BB0_700:
	// begin inline asm
	{sub.f16x2 %r6929,%r7642,%r7644;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6932,%r7327,%r6929;
}
	// end inline asm
	@%p12 bra 	$L__BB0_702;
	bra.uni 	$L__BB0_701;

$L__BB0_702:
	// begin inline asm
	{neg.f16x2 %r7863,%r5670;
}
	// end inline asm
	bra.uni 	$L__BB0_703;

$L__BB0_701:
	// begin inline asm
	{mul.f16x2 %r7863,%r7328,%r6929;
}
	// end inline asm

$L__BB0_703:
	mov.u32 	%r6943, 31;
	mov.u32 	%r6945, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6941,%r7863,%r6943,%r2243,%r6945;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6946,%r6932,%r6941;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6949,%r7640,%r7537;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6952,%r6949,%r6946;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6955,%r7236,%r6952;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7347,%r5670,%r6955;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6961,%r7643,%r7645;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6964,%r7327,%r6961;
}
	// end inline asm
	mov.u32 	%r7864, %r5677;
	@%p12 bra 	$L__BB0_705;

	// begin inline asm
	{mul.f16x2 %r7864,%r7328,%r6961;
}
	// end inline asm

$L__BB0_705:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6973,%r7864,%r6943,%r2243,%r6945;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6978,%r6964,%r6973;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6981,%r7652,%r7537;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6984,%r6978,%r6981;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6987,%r7236,%r6984;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7346,%r5677,%r6987;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7644;
 mov.b16 %rs117, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6995,%r7644,%r416,%r2243,%r6945;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6995;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7001, {%rs117,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7002,%r7001,%r7642;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7005,%r7331,%r7002;
}
	// end inline asm
	@%p12 bra 	$L__BB0_707;
	bra.uni 	$L__BB0_706;

$L__BB0_707:
	// begin inline asm
	{neg.f16x2 %r7865,%r5673;
}
	// end inline asm
	bra.uni 	$L__BB0_708;

$L__BB0_706:
	// begin inline asm
	{mul.f16x2 %r7865,%r7332,%r7002;
}
	// end inline asm

$L__BB0_708:
	mov.u32 	%r7020, 31;
	mov.u32 	%r7044, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7018,%r7865,%r7020,%r2243,%r7044;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7023,%r7005,%r7018;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7026,%r7641,%r7536;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7029,%r7026,%r7023;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7032,%r7236,%r7029;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7339,%r5673,%r7032;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7645;
 mov.b16 %rs121, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7040,%r7645,%r416,%r2243,%r7044;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7040;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7046, {%rs121,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7047,%r7046,%r7643;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7050,%r7331,%r7047;
}
	// end inline asm
	mov.u32 	%r7866, %r5680;
	@%p12 bra 	$L__BB0_710;

	// begin inline asm
	{mul.f16x2 %r7866,%r7332,%r7047;
}
	// end inline asm

$L__BB0_710:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7061,%r7866,%r7020,%r2243,%r7044;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7066,%r7050,%r7061;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7069,%r7653,%r7536;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7072,%r7066,%r7069;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7075,%r7236,%r7072;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7338,%r5680,%r7075;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7081,%r7649,%r7646;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7084,%r7327,%r7081;
}
	// end inline asm
	@%p12 bra 	$L__BB0_712;
	bra.uni 	$L__BB0_711;

$L__BB0_712:
	// begin inline asm
	{neg.f16x2 %r7867,%r5684;
}
	// end inline asm
	bra.uni 	$L__BB0_713;

$L__BB0_711:
	// begin inline asm
	{mul.f16x2 %r7867,%r7328,%r7081;
}
	// end inline asm

$L__BB0_713:
	mov.u32 	%r7097, 31;
	mov.u32 	%r7121, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7095,%r7867,%r7097,%r2243,%r7121;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7100,%r7084,%r7095;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7103,%r7652,%r7657;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7106,%r7103,%r7100;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7109,%r7236,%r7106;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7370,%r5684,%r7109;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7646;
 mov.b16 %rs125, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7117,%r7646,%r416,%r2243,%r7121;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7117;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7123, {%rs125,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7124,%r7123,%r7649;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7127,%r7331,%r7124;
}
	// end inline asm
	@%p12 bra 	$L__BB0_715;
	bra.uni 	$L__BB0_714;

$L__BB0_715:
	// begin inline asm
	{neg.f16x2 %r7868,%r5687;
}
	// end inline asm
	bra.uni 	$L__BB0_716;

$L__BB0_714:
	// begin inline asm
	{mul.f16x2 %r7868,%r7332,%r7124;
}
	// end inline asm

$L__BB0_716:
	mov.u32 	%r7142, 31;
	mov.u32 	%r7144, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7140,%r7868,%r7142,%r2243,%r7144;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7145,%r7127,%r7140;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7148,%r7653,%r7663;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7151,%r7148,%r7145;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7154,%r7236,%r7151;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7416,%r5687,%r7154;
}
	// end inline asm
	bar.sync 	0;
	@%p301 bra 	$L__BB0_719;

	setp.ne.s32 	%p380, %r24, %r2137;
	shl.b32 	%r7163, %r24, 8;
	shl.b32 	%r7167, %r1733, 8;
	or.b32  	%r7168, %r7167, 128;
	mad.lo.s32 	%r7169, %r7168, %r23, %r2140;
	add.s32 	%r7170, %r7169, %r7163;
	shl.b32 	%r7171, %r7170, 2;
	mov.u32 	%r7172, _ZN6kernel5shmemE;
	add.s32 	%r7173, %r7172, %r7171;
	shl.b32 	%r7174, %r28, 4;
	add.s32 	%r1729, %r7173, %r7174;
	st.shared.v4.u32 	[%r1729], {%r7418, %r7413, %r7419, %r7414};
	st.shared.v4.u32 	[%r1729+512], {%r7463, %r7460, %r7454, %r7445};
	@%p380 bra 	$L__BB0_719;

	st.shared.v4.u32 	[%r1729+1024], {%r7455, %r7446, %r7476, %r7471};

$L__BB0_719:
	setp.eq.s32 	%p378, %r24, %r2137;
	@%p378 bra 	$L__BB0_721;

	mad.lo.s32 	%r7179, %r52, %r24, %r2217;
	mad.lo.s32 	%r7182, %r2135, %r2137, %r7179;
	mad.lo.s32 	%r7185, %r2133, %r2132, %r7182;
	shl.b32 	%r7186, %r7185, 2;
	mov.u32 	%r7187, _ZN6kernel5shmemE;
	add.s32 	%r7188, %r7187, %r7186;
	shl.b32 	%r7189, %r28, 4;
	add.s32 	%r7190, %r7188, %r7189;
	st.shared.v4.u32 	[%r7190], {%r7455, %r7446, %r7476, %r7471};
	st.shared.v4.u32 	[%r7190+512], {%r7437, %r7429, %r7396, %r7391};
	st.shared.v4.u32 	[%r7190+1024], {%r7436, %r7428, %r7385, %r7381};

$L__BB0_721:
	setp.ne.s32 	%p379, %r23, %r2132;
	ld.param.u64 	%rd537, [%rd1+56];
	cvta.to.global.u64 	%rd39, %rd537;
	@%p379 bra 	$L__BB0_723;

	mad.lo.s32 	%r7192, %r654, %r1735, %r26;
	mul.lo.s32 	%r7193, %r7192, %r1733;
	mul.lo.s32 	%r7194, %r7193, 768;
	add.s32 	%r7195, %r1733, %r24;
	mad.lo.s32 	%r7196, %r7195, 384, %r7194;
	add.s32 	%r7197, %r7196, -128;
	mul.wide.s32 	%rd538, %r7197, 4;
	add.s64 	%rd539, %rd39, %rd538;
	add.s64 	%rd541, %rd539, %rd273;
	st.global.v4.u32 	[%rd541+512], {%r7418, %r7413, %r7419, %r7414};
	st.global.v4.u32 	[%rd541+1024], {%r7463, %r7460, %r7454, %r7445};
	st.global.v4.u32 	[%rd541+1536], {%r7455, %r7446, %r7476, %r7471};

$L__BB0_723:
	setp.ne.s32 	%p381, %r24, %r2137;
	@%p381 bra 	$L__BB0_726;

	mad.lo.s32 	%r7199, %r655, %r1734, %r25;
	mad.lo.s32 	%r7203, %r7199, %r1789, %r413;
	mul.wide.s32 	%rd542, %r7203, 4;
	add.s64 	%rd543, %rd39, %rd542;
	add.s64 	%rd40, %rd543, %rd273;
	st.global.v4.u32 	[%rd40], {%r7455, %r7446, %r7476, %r7471};
	st.global.v4.u32 	[%rd40+512], {%r7437, %r7429, %r7396, %r7391};
	st.global.v4.u32 	[%rd40+1024], {%r7436, %r7428, %r7385, %r7381};
	@%p205 bra 	$L__BB0_726;

	st.global.v4.u32 	[%rd40+1536], {%r7610, %r7613, %r7617, %r7616};

$L__BB0_726:
	rem.s32 	%r7204, %r7497, %r1736;
	setp.eq.s32 	%p372, %r7204, 0;
	@%p372 bra 	$L__BB0_728;

	bar.sync 	0;
	bra.uni 	$L__BB0_735;

$L__BB0_728:
	@%p147 bra 	$L__BB0_730;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_730:
	bar.sync 	0;
	@%p148 bra 	$L__BB0_734;

	membar.gl;
	add.s64 	%rd545, %rd24, 4;
	setp.eq.s32 	%p375, %r408, %r409;
	mov.u32 	%r7217, -2147483647;
	sub.s32 	%r7218, %r7217, %r407;
	selp.b32 	%r7219, %r7218, 1, %p375;
	atom.add.u32 	%r1730, [%rd545], %r7219;

$L__BB0_732:
	ld.volatile.u32 	%r7220, [%rd24+4];
	xor.b32  	%r7221, %r7220, %r1730;
	setp.gt.s32 	%p376, %r7221, -1;
	@%p376 bra 	$L__BB0_732;

	membar.gl;

$L__BB0_734:
	bar.sync 	0;

$L__BB0_735:
	add.s32 	%r7497, %r7497, 1;
	setp.lt.s32 	%p377, %r7497, %r31;
	mov.u32 	%r7611, %r7777;
	mov.u32 	%r7612, %r7778;
	mov.u32 	%r7614, %r7780;
	mov.u32 	%r7615, %r7781;
	mov.u32 	%r7622, %r7792;
	mov.u32 	%r7623, %r7793;
	mov.u32 	%r7624, %r7794;
	mov.u32 	%r7625, %r7795;
	mov.u32 	%r7626, %r7796;
	mov.u32 	%r7627, %r7797;
	mov.u32 	%r7628, %r7798;
	mov.u32 	%r7631, %r7801;
	mov.u32 	%r7633, %r7803;
	mov.u32 	%r7635, %r7805;
	mov.u32 	%r7425, %r477;
	mov.u32 	%r7426, %r7688;
	mov.u32 	%r7433, %r484;
	mov.u32 	%r7434, %r7690;
	mov.u32 	%r7441, %r491;
	mov.u32 	%r7450, %r499;
	mov.u32 	%r7459, %r7695;
	mov.u32 	%r7462, %r7697;
	mov.u32 	%r7465, %r529;
	mov.u32 	%r7467, %r537;
	mov.u32 	%r7469, %r544;
	mov.u32 	%r7470, %r545;
	mov.u32 	%r7474, %r553;
	mov.u32 	%r7475, %r554;
	mov.u32 	%r7618, %r7786;
	mov.u32 	%r7619, %r7787;
	mov.u32 	%r7620, %r7788;
	mov.u32 	%r7621, %r7789;
	mov.u32 	%r7636, %r7806;
	mov.u32 	%r7637, %r7807;
	@%p377 bra 	$L__BB0_302;

$L__BB0_736:
	ret;

}


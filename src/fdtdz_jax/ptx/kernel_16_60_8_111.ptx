//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_60
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi8ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi8ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi8ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[144]
)
{
	.reg .pred 	%p<382>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<541>;
	.reg .b32 	%r<7867>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<561>;


	mov.b64 	%rd41, _ZN6kernel16SimulationKernelI7__half2fLi8ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd41;
	ld.param.v2.u32 	{%r1732, %r1733}, [_ZN6kernel16SimulationKernelI7__half2fLi8ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1734, %r1735}, [_ZN6kernel16SimulationKernelI7__half2fLi8ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1736, %r1737}, [_ZN6kernel16SimulationKernelI7__half2fLi8ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1738, %r1739}, [_ZN6kernel16SimulationKernelI7__half2fLi8ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1740, %r1741}, [_ZN6kernel16SimulationKernelI7__half2fLi8ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1742, %r1743}, [_ZN6kernel16SimulationKernelI7__half2fLi8ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1744, %r1745}, [_ZN6kernel16SimulationKernelI7__half2fLi8ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	mov.u32 	%r23, %tid.y;
	mov.u32 	%r24, %tid.z;
	mov.u32 	%r25, %ctaid.y;
	mov.u32 	%r26, %ctaid.z;
	mov.u32 	%r1746, 32;
	sub.s32 	%r27, %r1746, %r1739;
	mov.u32 	%r28, %tid.x;
	setp.le.s32 	%p12, %r27, %r28;
	add.s32 	%r1747, %r1745, -1;
	mad.lo.s32 	%r1748, %r1747, %r1744, %r1743;
	add.s32 	%r1749, %r1738, %r1737;
	add.s32 	%r1750, %r1749, %r1748;
	add.s32 	%r1751, %r1750, 1;
	mul.lo.s32 	%r1752, %r1732, %r1734;
	shl.b32 	%r29, %r1752, 1;
	shl.b32 	%r1753, %r1752, 2;
	div.s32 	%r1754, %r1751, %r1753;
	add.s32 	%r1755, %r1754, 1;
	mul.lo.s32 	%r1756, %r1755, %r1738;
	mul.lo.s32 	%r1757, %r1733, %r1735;
	shl.b32 	%r30, %r1757, 1;
	div.s32 	%r1758, %r1756, %r30;
	add.s32 	%r1759, %r1758, 1;
	mul.lo.s32 	%r31, %r1759, %r1737;
	@%p12 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f38, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f38;
  cvt.rn.f16.f32 high, %f38;
  mov.b32 %r7234, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f36, [%rd1+88];
	neg.f32 	%f35, %f36;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f35;
  mov.b32 %r7234, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd42, [%rd1+136];
	cvta.to.global.u64 	%rd2, %rd42;
	mad.lo.s32 	%r1762, %r1734, %r26, %r25;
	mad.lo.s32 	%r1763, %r1762, %r1733, %r24;
	mad.lo.s32 	%r1764, %r1763, %r1732, %r23;
	shl.b32 	%r35, %r1764, 5;
	add.s32 	%r7239, %r35, %r28;
	mul.lo.s32 	%r1765, %r1757, %r1752;
	shl.b32 	%r39, %r1765, 5;
	shl.b32 	%r1766, %r1739, 2;
	mov.u32 	%r1767, 128;
	sub.s32 	%r40, %r1767, %r1766;
	mul.lo.s32 	%r1768, %r1738, %r1737;
	mul.lo.s32 	%r1769, %r1768, %r1745;
	mul.lo.s32 	%r1770, %r1769, %r40;
	mul.lo.s32 	%r41, %r1770, 3;
	setp.ge.s32 	%p13, %r7239, %r41;
	@%p13 bra 	$L__BB0_10;

	not.b32 	%r1771, %r28;
	add.s32 	%r1772, %r41, %r1771;
	sub.s32 	%r1773, %r1772, %r35;
	mul.lo.s32 	%r1774, %r1757, %r1732;
	mul.lo.s32 	%r1775, %r1774, %r1734;
	shl.b32 	%r1776, %r1775, 5;
	div.u32 	%r42, %r1773, %r1776;
	add.s32 	%r1777, %r42, 1;
	and.b32  	%r7236, %r1777, 3;
	setp.eq.s32 	%p14, %r7236, 0;
	mov.u32 	%r7237, %r7239;
	@%p14 bra 	$L__BB0_7;

	mov.u32 	%r7237, %r7239;

$L__BB0_6:
	.pragma "nounroll";
	mul.wide.s32 	%rd43, %r7237, 4;
	add.s64 	%rd44, %rd2, %rd43;
	mov.u32 	%r1778, 0;
	st.global.u32 	[%rd44], %r1778;
	add.s32 	%r7237, %r7237, %r39;
	add.s32 	%r7236, %r7236, -1;
	setp.ne.s32 	%p15, %r7236, 0;
	@%p15 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p16, %r42, 3;
	@%p16 bra 	$L__BB0_10;

	mul.wide.s32 	%rd47, %r39, 4;

$L__BB0_9:
	mul.wide.s32 	%rd45, %r7237, 4;
	add.s64 	%rd46, %rd2, %rd45;
	mov.u32 	%r1779, 0;
	st.global.u32 	[%rd46], %r1779;
	add.s64 	%rd48, %rd46, %rd47;
	st.global.u32 	[%rd48], %r1779;
	add.s32 	%r1780, %r7237, %r39;
	add.s32 	%r1781, %r1780, %r39;
	add.s64 	%rd49, %rd48, %rd47;
	st.global.u32 	[%rd49], %r1779;
	add.s32 	%r1782, %r1781, %r39;
	add.s64 	%rd50, %rd49, %rd47;
	st.global.u32 	[%rd50], %r1779;
	add.s32 	%r7237, %r1782, %r39;
	setp.lt.s32 	%p17, %r7237, %r41;
	@%p17 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd51, [%rd1+56];
	cvta.to.global.u64 	%rd3, %rd51;
	sub.s32 	%r1783, %r1738, %r29;
	div.s32 	%r1784, %r1783, %r30;
	mul.lo.s32 	%r1785, %r1784, %r1737;
	sub.s32 	%r51, %r1785, %r29;
	sub.s32 	%r1786, %r1737, %r30;
	mul.lo.s32 	%r1787, %r1786, %r1734;
	mul.lo.s32 	%r52, %r1732, 384;
	add.s32 	%r1788, %r52, %r52;
	add.s32 	%r1789, %r1788, 128;
	mul.lo.s32 	%r1791, %r1757, %r51;
	mul.lo.s32 	%r53, %r1791, 768;
	mad.lo.s32 	%r54, %r1787, %r1789, %r53;
	bra.uni 	$L__BB0_11;

$L__BB0_737:
	mov.f32 	%f540, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f540;
  cvt.rn.f16.f32 high, %f540;
  mov.b32 %r7220, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd546, %r7239, 4;
	add.s64 	%rd547, %rd3, %rd546;
	st.global.u32 	[%rd547], %r7220;
	add.s32 	%r7239, %r7239, %r39;

$L__BB0_11:
	setp.lt.s32 	%p18, %r7239, %r54;
	@%p18 bra 	$L__BB0_737;

	ld.param.u64 	%rd52, [%rd1+96];
	cvta.to.global.u64 	%rd5, %rd52;
	ld.param.u64 	%rd53, [%rd1+64];
	cvta.to.global.u64 	%rd6, %rd53;
	mad.lo.s32 	%r7281, %r1732, %r25, %r23;
	mul.lo.s32 	%r58, %r1733, %r26;
	add.s32 	%r59, %r58, %r24;
	setp.ge.s32 	%p19, %r7281, %r1737;
	@%p19 bra 	$L__BB0_36;

	setp.gt.s32 	%p20, %r27, %r28;
	mov.u32 	%r1792, 31;
	sub.s32 	%r1793, %r1792, %r28;
	selp.b32 	%r1794, %r28, %r1793, %p20;
	shl.b32 	%r1795, %r1794, 2;
	mov.u32 	%r1796, 2;
	sub.s32 	%r60, %r1795, %r1740;
	sub.s32 	%r1797, %r1796, %r1740;
	add.s32 	%r61, %r1797, %r1795;
	shl.b32 	%r62, %r1768, 6;
	add.s32 	%r63, %r1737, -1;
	add.s32 	%r64, %r60, 1;
	add.s32 	%r65, %r61, 1;
	shl.b32 	%r66, %r28, 1;
	or.b32  	%r67, %r66, 1;
	shr.u32 	%r1799, %r67, 31;
	add.s32 	%r1800, %r67, %r1799;
	shr.s32 	%r69, %r1800, 1;
	and.b32  	%r1801, %r1800, -2;
	sub.s32 	%r1802, %r67, %r1801;
	add.s32 	%r68, %r1802, %r62;
	rem.s32 	%r1837, %r64, %r40;
	add.s32 	%r1838, %r1837, %r40;
	rem.s32 	%r92, %r1838, %r40;
	rem.s32 	%r1839, %r65, %r40;
	add.s32 	%r1840, %r1839, %r40;
	rem.s32 	%r93, %r1840, %r40;
	mov.u32 	%r7240, %r7281;

$L__BB0_14:
	setp.ge.s32 	%p21, %r59, %r1738;
	@%p21 bra 	$L__BB0_35;

	add.s32 	%r71, %r63, %r7240;
	rem.s32 	%r1803, %r60, %r40;
	add.s32 	%r1804, %r1803, %r40;
	rem.s32 	%r72, %r1804, %r40;
	rem.s32 	%r1805, %r61, %r40;
	add.s32 	%r1806, %r1805, %r40;
	rem.s32 	%r73, %r1806, %r40;
	mul.lo.s32 	%r74, %r7240, %r1738;
	add.s32 	%r1807, %r1737, %r7240;
	mul.lo.s32 	%r75, %r1807, %r1738;
	add.s32 	%r1808, %r1807, %r1737;
	mul.lo.s32 	%r76, %r1808, %r1738;
	mov.u32 	%r7241, %r59;

$L__BB0_16:
	mul.lo.s32 	%r78, %r7241, %r1737;
	add.s32 	%r79, %r78, %r7240;
	shl.b32 	%r80, %r79, 6;
	@%p20 bra 	$L__BB0_18;
	bra.uni 	$L__BB0_17;

$L__BB0_18:
	add.s32 	%r1811, %r74, %r7241;
	mul.lo.s32 	%r1812, %r1811, %r40;
	add.s32 	%r1813, %r1812, %r72;
	mul.wide.s32 	%rd54, %r1813, 4;
	add.s64 	%rd55, %rd5, %rd54;
	ld.global.f32 	%f41, [%rd55];
	add.s32 	%r1814, %r1812, %r73;
	mul.wide.s32 	%rd56, %r1814, 4;
	add.s64 	%rd57, %rd5, %rd56;
	ld.global.f32 	%f42, [%rd57];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f41;
  cvt.rn.f16.f32 high, %f42;
  mov.b32 %r7242, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_19;

$L__BB0_17:
	mov.f32 	%f40, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f40;
  cvt.rn.f16.f32 high, %f40;
  mov.b32 %r7242, {low,high};}

	// end inline asm

$L__BB0_19:
	shl.b32 	%r84, %r79, 5;
	add.s32 	%r1815, %r84, %r28;
	shl.b32 	%r1816, %r1815, 2;
	add.s32 	%r1817, %r62, %r1816;
	mul.wide.s32 	%rd58, %r1817, 4;
	add.s64 	%rd59, %rd6, %rd58;
	st.global.u32 	[%rd59], %r7242;
	@%p20 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_20;

$L__BB0_21:
	add.s32 	%r1820, %r75, %r7241;
	mul.lo.s32 	%r1821, %r1820, %r40;
	add.s32 	%r1822, %r1821, %r72;
	mul.wide.s32 	%rd60, %r1822, 4;
	add.s64 	%rd61, %rd5, %rd60;
	ld.global.f32 	%f45, [%rd61];
	add.s32 	%r1823, %r1821, %r73;
	mul.wide.s32 	%rd62, %r1823, 4;
	add.s64 	%rd63, %rd5, %rd62;
	ld.global.f32 	%f46, [%rd63];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f45;
  cvt.rn.f16.f32 high, %f46;
  mov.b32 %r7243, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_22;

$L__BB0_20:
	mov.f32 	%f44, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f44;
  cvt.rn.f16.f32 high, %f44;
  mov.b32 %r7243, {low,high};}

	// end inline asm

$L__BB0_22:
	add.s32 	%r1824, %r66, %r80;
	mul.wide.s32 	%rd64, %r1824, 4;
	add.s64 	%rd65, %rd6, %rd64;
	st.global.u32 	[%rd65], %r7243;
	@%p20 bra 	$L__BB0_24;
	bra.uni 	$L__BB0_23;

$L__BB0_24:
	add.s32 	%r1827, %r76, %r7241;
	mul.lo.s32 	%r1828, %r1827, %r40;
	add.s32 	%r1829, %r1828, %r72;
	mul.wide.s32 	%rd66, %r1829, 4;
	add.s64 	%rd67, %rd5, %rd66;
	ld.global.f32 	%f49, [%rd67];
	add.s32 	%r1830, %r1828, %r73;
	mul.wide.s32 	%rd68, %r1830, 4;
	add.s64 	%rd69, %rd5, %rd68;
	ld.global.f32 	%f50, [%rd69];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f49;
  cvt.rn.f16.f32 high, %f50;
  mov.b32 %r7244, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_25;

$L__BB0_23:
	mov.f32 	%f48, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f48;
  cvt.rn.f16.f32 high, %f48;
  mov.b32 %r7244, {low,high};}

	// end inline asm

$L__BB0_25:
	rem.s32 	%r1831, %r71, %r1737;
	add.s32 	%r1832, %r1831, %r78;
	shl.b32 	%r91, %r1832, 5;
	add.s32 	%r1833, %r91, %r28;
	shl.b32 	%r1834, %r1833, 2;
	add.s32 	%r1835, %r62, %r1834;
	add.s32 	%r1836, %r1835, 2;
	mul.wide.s32 	%rd70, %r1836, 4;
	add.s64 	%rd71, %rd6, %rd70;
	st.global.u32 	[%rd71], %r7244;
	@%p20 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1843, %r74, %r7241;
	mul.lo.s32 	%r1844, %r1843, %r40;
	add.s32 	%r1845, %r1844, %r92;
	mul.wide.s32 	%rd72, %r1845, 4;
	add.s64 	%rd73, %rd5, %rd72;
	ld.global.f32 	%f53, [%rd73];
	add.s32 	%r1846, %r1844, %r93;
	mul.wide.s32 	%rd74, %r1846, 4;
	add.s64 	%rd75, %rd5, %rd74;
	ld.global.f32 	%f54, [%rd75];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f53;
  cvt.rn.f16.f32 high, %f54;
  mov.b32 %r7245, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	mov.f32 	%f52, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f52;
  cvt.rn.f16.f32 high, %f52;
  mov.b32 %r7245, {low,high};}

	// end inline asm

$L__BB0_28:
	add.s32 	%r1847, %r84, %r69;
	shl.b32 	%r1848, %r1847, 2;
	add.s32 	%r1849, %r68, %r1848;
	mul.wide.s32 	%rd76, %r1849, 4;
	add.s64 	%rd77, %rd6, %rd76;
	st.global.u32 	[%rd77], %r7245;
	@%p20 bra 	$L__BB0_30;
	bra.uni 	$L__BB0_29;

$L__BB0_30:
	add.s32 	%r1852, %r75, %r7241;
	mul.lo.s32 	%r1853, %r1852, %r40;
	add.s32 	%r1854, %r1853, %r92;
	mul.wide.s32 	%rd78, %r1854, 4;
	add.s64 	%rd79, %rd5, %rd78;
	ld.global.f32 	%f57, [%rd79];
	add.s32 	%r1855, %r1853, %r93;
	mul.wide.s32 	%rd80, %r1855, 4;
	add.s64 	%rd81, %rd5, %rd80;
	ld.global.f32 	%f58, [%rd81];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f57;
  cvt.rn.f16.f32 high, %f58;
  mov.b32 %r7246, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_31;

$L__BB0_29:
	mov.f32 	%f56, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f56;
  cvt.rn.f16.f32 high, %f56;
  mov.b32 %r7246, {low,high};}

	// end inline asm

$L__BB0_31:
	add.s32 	%r1856, %r67, %r80;
	mul.wide.s32 	%rd82, %r1856, 4;
	add.s64 	%rd83, %rd6, %rd82;
	st.global.u32 	[%rd83], %r7246;
	@%p20 bra 	$L__BB0_33;
	bra.uni 	$L__BB0_32;

$L__BB0_33:
	add.s32 	%r1859, %r76, %r7241;
	mul.lo.s32 	%r1860, %r1859, %r40;
	add.s32 	%r1861, %r1860, %r92;
	mul.wide.s32 	%rd84, %r1861, 4;
	add.s64 	%rd85, %rd5, %rd84;
	ld.global.f32 	%f61, [%rd85];
	add.s32 	%r1862, %r1860, %r93;
	mul.wide.s32 	%rd86, %r1862, 4;
	add.s64 	%rd87, %rd5, %rd86;
	ld.global.f32 	%f62, [%rd87];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f61;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r7247, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_34;

$L__BB0_32:
	mov.f32 	%f60, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r7247, {low,high};}

	// end inline asm

$L__BB0_34:
	add.s32 	%r1863, %r91, %r69;
	shl.b32 	%r1864, %r1863, 2;
	add.s32 	%r1865, %r68, %r1864;
	add.s32 	%r1866, %r1865, 2;
	mul.wide.s32 	%rd88, %r1866, 4;
	add.s64 	%rd89, %rd6, %rd88;
	st.global.u32 	[%rd89], %r7247;
	add.s32 	%r7241, %r7241, %r1757;
	setp.lt.s32 	%p28, %r7241, %r1738;
	@%p28 bra 	$L__BB0_16;

$L__BB0_35:
	add.s32 	%r7240, %r7240, %r1752;
	setp.lt.s32 	%p29, %r7240, %r1737;
	@%p29 bra 	$L__BB0_14;

$L__BB0_36:
	ld.param.u64 	%rd90, [%rd1+104];
	cvta.to.global.u64 	%rd7, %rd90;
	ld.param.u64 	%rd91, [%rd1+72];
	cvta.to.global.u64 	%rd8, %rd91;
	@%p19 bra 	$L__BB0_120;

	shl.b32 	%r105, %r59, 1;
	mov.u64 	%rd92, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	mov.u32 	%r7248, %r7281;

$L__BB0_38:
	setp.ge.s32 	%p31, %r105, %r1738;
	@%p31 bra 	$L__BB0_119;

	mov.u32 	%r7249, %r105;

$L__BB0_40:
	setp.ne.s32 	%p32, %r28, 0;
	@%p32 bra 	$L__BB0_118;

	shr.u32 	%r1868, %r7249, 31;
	add.s32 	%r1869, %r7249, %r1868;
	shr.s32 	%r1870, %r1869, 1;
	mad.lo.s32 	%r1871, %r1870, %r1737, %r7248;
	shl.b32 	%r109, %r1871, 5;
	add.s32 	%r110, %r7249, -2;
	mul.lo.s32 	%r111, %r110, %r1737;
	add.s32 	%r1872, %r1738, %r110;
	mul.lo.s32 	%r112, %r1872, %r1737;
	add.s32 	%r1873, %r1872, %r1738;
	mul.lo.s32 	%r113, %r1873, %r1737;
	add.s32 	%r114, %r111, %r1737;
	add.s32 	%r115, %r7249, -1;
	add.s32 	%r1874, %r1738, %r115;
	mul.lo.s32 	%r116, %r1874, %r1737;
	add.s32 	%r1875, %r1874, %r1738;
	mul.lo.s32 	%r117, %r1875, %r1737;
	add.s32 	%r1876, %r1738, %r7249;
	mul.lo.s32 	%r118, %r1876, %r1737;
	add.s32 	%r1877, %r1876, %r1738;
	mul.lo.s32 	%r119, %r1877, %r1737;
	mul.lo.s32 	%r120, %r7249, %r1737;
	add.s32 	%r121, %r120, %r1737;
	add.s32 	%r122, %r7249, 1;
	add.s32 	%r1878, %r1738, %r122;
	mul.lo.s32 	%r123, %r1878, %r1737;
	add.s32 	%r1879, %r1878, %r1738;
	mul.lo.s32 	%r124, %r1879, %r1737;
	add.s32 	%r125, %r121, %r1737;
	add.s32 	%r126, %r7249, 2;
	add.s32 	%r1880, %r1738, %r126;
	mul.lo.s32 	%r127, %r1880, %r1737;
	add.s32 	%r1881, %r1880, %r1738;
	mul.lo.s32 	%r128, %r1881, %r1737;
	mov.u32 	%r7252, 0;
	mov.u64 	%rd558, %rd92;

$L__BB0_42:
	ld.global.nc.u32 	%r1882, [%rd558];
	cvt.rn.f64.s32 	%fd1, %r1882;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r130, %r1882, %r7248;
	setp.lt.s32 	%p33, %r130, %r1737;
	or.b32  	%r1883, %r110, %r130;
	setp.gt.s32 	%p34, %r1883, -1;
	and.pred  	%p35, %p33, %p34;
	setp.lt.s32 	%p36, %r110, %r1738;
	and.pred  	%p1, %p36, %p35;
	cvt.rn.f32.f64 	%f63, %fd3;
	add.f32 	%f64, %f63, 0f3E800000;
	abs.f32 	%f1, %f64;
	add.f32 	%f65, %f1, 0f40200000;
	setp.geu.f32 	%p37, %f65, 0f40000000;
	@%p37 bra 	$L__BB0_47;

	@%p1 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_44;

$L__BB0_45:
	add.s32 	%r1886, %r111, %r130;
	mul.wide.s32 	%rd93, %r1886, 4;
	add.s64 	%rd94, %rd7, %rd93;
	ld.global.f32 	%f68, [%rd94];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f68;
  mov.b32 %r7251, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_46;

$L__BB0_44:
	mov.f32 	%f67, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f67;
  cvt.rn.f16.f32 high, %f67;
  mov.b32 %r7251, {low,high};}

	// end inline asm

$L__BB0_46:
	add.s32 	%r1887, %r7252, %r109;
	mul.wide.s32 	%rd95, %r1887, 4;
	add.s64 	%rd96, %rd8, %rd95;
	st.global.u32 	[%rd96], %r7251;
	add.s32 	%r7252, %r7252, 1;

$L__BB0_47:
	cvt.rn.f32.f64 	%f69, %fd1;
	add.f32 	%f70, %f69, 0f3E800000;
	abs.f32 	%f2, %f70;
	add.f32 	%f3, %f2, 0f40000000;
	setp.geu.f32 	%p38, %f3, 0f40000000;
	@%p38 bra 	$L__BB0_52;

	@%p1 bra 	$L__BB0_50;
	bra.uni 	$L__BB0_49;

$L__BB0_50:
	add.s32 	%r1890, %r112, %r130;
	mul.wide.s32 	%rd97, %r1890, 4;
	add.s64 	%rd98, %rd7, %rd97;
	ld.global.f32 	%f73, [%rd98];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f73;
  mov.b32 %r7253, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_51;

$L__BB0_49:
	mov.f32 	%f72, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f72;
  cvt.rn.f16.f32 high, %f72;
  mov.b32 %r7253, {low,high};}

	// end inline asm

$L__BB0_51:
	add.s32 	%r1891, %r7252, %r109;
	mul.wide.s32 	%rd99, %r1891, 4;
	add.s64 	%rd100, %rd8, %rd99;
	st.global.u32 	[%rd100], %r7253;
	add.s32 	%r7252, %r7252, 1;

$L__BB0_52:
	add.f32 	%f74, %f2, 0f40200000;
	setp.geu.f32 	%p39, %f74, 0f40000000;
	@%p39 bra 	$L__BB0_57;

	@%p1 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1894, %r113, %r130;
	mul.wide.s32 	%rd101, %r1894, 4;
	add.s64 	%rd102, %rd7, %rd101;
	ld.global.f32 	%f77, [%rd102];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f77;
  mov.b32 %r7255, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	mov.f32 	%f76, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f76;
  cvt.rn.f16.f32 high, %f76;
  mov.b32 %r7255, {low,high};}

	// end inline asm

$L__BB0_56:
	add.s32 	%r1895, %r7252, %r109;
	mul.wide.s32 	%rd103, %r1895, 4;
	add.s64 	%rd104, %rd8, %rd103;
	st.global.u32 	[%rd104], %r7255;
	add.s32 	%r7252, %r7252, 1;

$L__BB0_57:
	or.b32  	%r1896, %r115, %r130;
	setp.gt.s32 	%p40, %r1896, -1;
	and.pred  	%p42, %p33, %p40;
	setp.le.s32 	%p43, %r7249, %r1738;
	and.pred  	%p2, %p43, %p42;
	add.f32 	%f4, %f1, 0f3FC00000;
	setp.geu.f32 	%p44, %f4, 0f40000000;
	@%p44 bra 	$L__BB0_62;

	@%p2 bra 	$L__BB0_60;
	bra.uni 	$L__BB0_59;

$L__BB0_60:
	add.s32 	%r1899, %r114, %r130;
	mul.wide.s32 	%rd105, %r1899, 4;
	add.s64 	%rd106, %rd7, %rd105;
	ld.global.f32 	%f80, [%rd106];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f80;
  mov.b32 %r7257, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_61;

$L__BB0_59:
	mov.f32 	%f79, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f79;
  cvt.rn.f16.f32 high, %f79;
  mov.b32 %r7257, {low,high};}

	// end inline asm

$L__BB0_61:
	add.s32 	%r1900, %r7252, %r109;
	mul.wide.s32 	%rd107, %r1900, 4;
	add.s64 	%rd108, %rd8, %rd107;
	st.global.u32 	[%rd108], %r7257;
	add.s32 	%r7252, %r7252, 1;

$L__BB0_62:
	add.f32 	%f5, %f2, 0f3F800000;
	setp.geu.f32 	%p45, %f5, 0f40000000;
	@%p45 bra 	$L__BB0_67;

	@%p2 bra 	$L__BB0_65;
	bra.uni 	$L__BB0_64;

$L__BB0_65:
	add.s32 	%r1903, %r116, %r130;
	mul.wide.s32 	%rd109, %r1903, 4;
	add.s64 	%rd110, %rd7, %rd109;
	ld.global.f32 	%f83, [%rd110];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f83;
  mov.b32 %r7259, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_66;

$L__BB0_64:
	mov.f32 	%f82, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f82;
  cvt.rn.f16.f32 high, %f82;
  mov.b32 %r7259, {low,high};}

	// end inline asm

$L__BB0_66:
	add.s32 	%r1904, %r7252, %r109;
	mul.wide.s32 	%rd111, %r1904, 4;
	add.s64 	%rd112, %rd8, %rd111;
	st.global.u32 	[%rd112], %r7259;
	add.s32 	%r7252, %r7252, 1;

$L__BB0_67:
	add.f32 	%f6, %f2, 0f3FC00000;
	setp.geu.f32 	%p46, %f6, 0f40000000;
	@%p46 bra 	$L__BB0_72;

	@%p2 bra 	$L__BB0_70;
	bra.uni 	$L__BB0_69;

$L__BB0_70:
	add.s32 	%r1907, %r117, %r130;
	mul.wide.s32 	%rd113, %r1907, 4;
	add.s64 	%rd114, %rd7, %rd113;
	ld.global.f32 	%f86, [%rd114];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f86;
  mov.b32 %r7261, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_71;

$L__BB0_69:
	mov.f32 	%f85, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f85;
  cvt.rn.f16.f32 high, %f85;
  mov.b32 %r7261, {low,high};}

	// end inline asm

$L__BB0_71:
	add.s32 	%r1908, %r7252, %r109;
	mul.wide.s32 	%rd115, %r1908, 4;
	add.s64 	%rd116, %rd8, %rd115;
	st.global.u32 	[%rd116], %r7261;
	add.s32 	%r7252, %r7252, 1;

$L__BB0_72:
	or.b32  	%r1909, %r7249, %r130;
	setp.gt.s32 	%p47, %r1909, -1;
	and.pred  	%p49, %p33, %p47;
	setp.lt.s32 	%p50, %r7249, %r1738;
	and.pred  	%p3, %p50, %p49;
	add.f32 	%f7, %f1, 0f3F000000;
	setp.geu.f32 	%p51, %f7, 0f40000000;
	@%p51 bra 	$L__BB0_77;

	@%p3 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1912, %r120, %r130;
	mul.wide.s32 	%rd117, %r1912, 4;
	add.s64 	%rd118, %rd7, %rd117;
	ld.global.f32 	%f89, [%rd118];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f89;
  mov.b32 %r7263, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f88, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f88;
  cvt.rn.f16.f32 high, %f88;
  mov.b32 %r7263, {low,high};}

	// end inline asm

$L__BB0_76:
	add.s32 	%r1913, %r7252, %r109;
	mul.wide.s32 	%rd119, %r1913, 4;
	add.s64 	%rd120, %rd8, %rd119;
	st.global.u32 	[%rd120], %r7263;
	add.s32 	%r7252, %r7252, 1;

$L__BB0_77:
	add.f32 	%f90, %f2, 0f00000000;
	setp.geu.f32 	%p52, %f90, 0f40000000;
	@%p52 bra 	$L__BB0_82;

	@%p3 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1916, %r118, %r130;
	mul.wide.s32 	%rd121, %r1916, 4;
	add.s64 	%rd122, %rd7, %rd121;
	ld.global.f32 	%f93, [%rd122];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f93;
  mov.b32 %r7265, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f92, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f92;
  cvt.rn.f16.f32 high, %f92;
  mov.b32 %r7265, {low,high};}

	// end inline asm

$L__BB0_81:
	add.s32 	%r1917, %r7252, %r109;
	mul.wide.s32 	%rd123, %r1917, 4;
	add.s64 	%rd124, %rd8, %rd123;
	st.global.u32 	[%rd124], %r7265;
	add.s32 	%r7252, %r7252, 1;

$L__BB0_82:
	add.f32 	%f8, %f2, 0f3F000000;
	setp.geu.f32 	%p53, %f8, 0f40000000;
	@%p53 bra 	$L__BB0_87;

	@%p3 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r1920, %r119, %r130;
	mul.wide.s32 	%rd125, %r1920, 4;
	add.s64 	%rd126, %rd7, %rd125;
	ld.global.f32 	%f96, [%rd126];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f96;
  mov.b32 %r7267, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f95, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f95;
  cvt.rn.f16.f32 high, %f95;
  mov.b32 %r7267, {low,high};}

	// end inline asm

$L__BB0_86:
	add.s32 	%r1921, %r7252, %r109;
	mul.wide.s32 	%rd127, %r1921, 4;
	add.s64 	%rd128, %rd8, %rd127;
	st.global.u32 	[%rd128], %r7267;
	add.s32 	%r7252, %r7252, 1;

$L__BB0_87:
	or.b32  	%r1922, %r122, %r130;
	setp.gt.s32 	%p54, %r1922, -1;
	and.pred  	%p56, %p33, %p54;
	setp.lt.s32 	%p57, %r122, %r1738;
	and.pred  	%p4, %p57, %p56;
	@%p51 bra 	$L__BB0_92;

	@%p4 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r1925, %r121, %r130;
	mul.wide.s32 	%rd129, %r1925, 4;
	add.s64 	%rd130, %rd7, %rd129;
	ld.global.f32 	%f99, [%rd130];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f99;
  mov.b32 %r7269, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f98, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f98;
  cvt.rn.f16.f32 high, %f98;
  mov.b32 %r7269, {low,high};}

	// end inline asm

$L__BB0_91:
	add.s32 	%r1926, %r7252, %r109;
	mul.wide.s32 	%rd131, %r1926, 4;
	add.s64 	%rd132, %rd8, %rd131;
	st.global.u32 	[%rd132], %r7269;
	add.s32 	%r7252, %r7252, 1;

$L__BB0_92:
	@%p45 bra 	$L__BB0_97;

	@%p4 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r1929, %r123, %r130;
	mul.wide.s32 	%rd133, %r1929, 4;
	add.s64 	%rd134, %rd7, %rd133;
	ld.global.f32 	%f102, [%rd134];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f102;
  mov.b32 %r7271, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f101, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f101;
  cvt.rn.f16.f32 high, %f101;
  mov.b32 %r7271, {low,high};}

	// end inline asm

$L__BB0_96:
	add.s32 	%r1930, %r7252, %r109;
	mul.wide.s32 	%rd135, %r1930, 4;
	add.s64 	%rd136, %rd8, %rd135;
	st.global.u32 	[%rd136], %r7271;
	add.s32 	%r7252, %r7252, 1;

$L__BB0_97:
	@%p53 bra 	$L__BB0_102;

	@%p4 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r1933, %r124, %r130;
	mul.wide.s32 	%rd137, %r1933, 4;
	add.s64 	%rd138, %rd7, %rd137;
	ld.global.f32 	%f105, [%rd138];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f105;
  mov.b32 %r7273, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f104, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f104;
  cvt.rn.f16.f32 high, %f104;
  mov.b32 %r7273, {low,high};}

	// end inline asm

$L__BB0_101:
	add.s32 	%r1934, %r7252, %r109;
	mul.wide.s32 	%rd139, %r1934, 4;
	add.s64 	%rd140, %rd8, %rd139;
	st.global.u32 	[%rd140], %r7273;
	add.s32 	%r7252, %r7252, 1;

$L__BB0_102:
	or.b32  	%r1935, %r126, %r130;
	setp.gt.s32 	%p61, %r1935, -1;
	and.pred  	%p63, %p33, %p61;
	setp.lt.s32 	%p64, %r126, %r1738;
	and.pred  	%p5, %p64, %p63;
	@%p44 bra 	$L__BB0_107;

	@%p5 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r1938, %r125, %r130;
	mul.wide.s32 	%rd141, %r1938, 4;
	add.s64 	%rd142, %rd7, %rd141;
	ld.global.f32 	%f108, [%rd142];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f108;
  mov.b32 %r7275, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f107, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f107;
  cvt.rn.f16.f32 high, %f107;
  mov.b32 %r7275, {low,high};}

	// end inline asm

$L__BB0_106:
	add.s32 	%r1939, %r7252, %r109;
	mul.wide.s32 	%rd143, %r1939, 4;
	add.s64 	%rd144, %rd8, %rd143;
	st.global.u32 	[%rd144], %r7275;
	add.s32 	%r7252, %r7252, 1;

$L__BB0_107:
	@%p38 bra 	$L__BB0_112;

	@%p5 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r1942, %r127, %r130;
	mul.wide.s32 	%rd145, %r1942, 4;
	add.s64 	%rd146, %rd7, %rd145;
	ld.global.f32 	%f111, [%rd146];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f111;
  mov.b32 %r7277, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f110, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f110;
  cvt.rn.f16.f32 high, %f110;
  mov.b32 %r7277, {low,high};}

	// end inline asm

$L__BB0_111:
	add.s32 	%r1943, %r7252, %r109;
	mul.wide.s32 	%rd147, %r1943, 4;
	add.s64 	%rd148, %rd8, %rd147;
	st.global.u32 	[%rd148], %r7277;
	add.s32 	%r7252, %r7252, 1;

$L__BB0_112:
	@%p46 bra 	$L__BB0_117;

	@%p5 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r1946, %r128, %r130;
	mul.wide.s32 	%rd149, %r1946, 4;
	add.s64 	%rd150, %rd7, %rd149;
	ld.global.f32 	%f114, [%rd150];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f114;
  mov.b32 %r7279, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f113, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f113;
  cvt.rn.f16.f32 high, %f113;
  mov.b32 %r7279, {low,high};}

	// end inline asm

$L__BB0_116:
	add.s32 	%r1947, %r7252, %r109;
	mul.wide.s32 	%rd151, %r1947, 4;
	add.s64 	%rd152, %rd8, %rd151;
	st.global.u32 	[%rd152], %r7279;
	add.s32 	%r7252, %r7252, 1;

$L__BB0_117:
	add.s64 	%rd558, %rd558, 4;
	mov.u64 	%rd153, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd154, %rd153, 24;
	setp.ne.s64 	%p68, %rd558, %rd154;
	@%p68 bra 	$L__BB0_42;

$L__BB0_118:
	add.s32 	%r7249, %r7249, %r30;
	setp.lt.s32 	%p69, %r7249, %r1738;
	@%p69 bra 	$L__BB0_40;

$L__BB0_119:
	add.s32 	%r7248, %r7248, %r1752;
	setp.lt.s32 	%p70, %r7248, %r1737;
	@%p70 bra 	$L__BB0_38;

$L__BB0_120:
	setp.eq.s32 	%p71, %r1741, 1;
	ld.param.u64 	%rd155, [%rd1+112];
	cvta.to.global.u64 	%rd11, %rd155;
	ld.param.u64 	%rd156, [%rd1+80];
	cvta.to.global.u64 	%rd12, %rd156;
	@%p71 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_121;

$L__BB0_138:
	@%p19 bra 	$L__BB0_267;

	shl.b32 	%r233, %r59, 1;
	shr.u32 	%r1993, %r1742, 31;
	add.s32 	%r1994, %r1742, %r1993;
	bfe.u32 	%r234, %r1994, 1, 1;
	mov.u64 	%rd176, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;

$L__BB0_140:
	setp.ge.s32 	%p81, %r233, %r1738;
	@%p81 bra 	$L__BB0_266;

	mov.u32 	%r7287, %r233;

$L__BB0_142:
	setp.ne.s32 	%p82, %r28, 0;
	@%p82 bra 	$L__BB0_265;

	shr.u32 	%r1996, %r7287, 31;
	add.s32 	%r1997, %r7287, %r1996;
	shr.s32 	%r1998, %r1997, 1;
	mad.lo.s32 	%r1999, %r1998, %r1737, %r7281;
	shl.b32 	%r238, %r1999, 5;
	add.s32 	%r239, %r7287, -2;
	mul.lo.s32 	%r240, %r239, %r1737;
	add.s32 	%r2000, %r1738, %r239;
	mul.lo.s32 	%r241, %r2000, %r1737;
	add.s32 	%r242, %r240, %r1737;
	add.s32 	%r243, %r7287, -1;
	add.s32 	%r2001, %r1738, %r243;
	mul.lo.s32 	%r244, %r2001, %r1737;
	add.s32 	%r2002, %r1738, %r7287;
	mul.lo.s32 	%r245, %r2002, %r1737;
	mul.lo.s32 	%r246, %r7287, %r1737;
	add.s32 	%r247, %r246, %r1737;
	add.s32 	%r248, %r7287, 1;
	add.s32 	%r2003, %r1738, %r248;
	mul.lo.s32 	%r249, %r2003, %r1737;
	add.s32 	%r250, %r247, %r1737;
	add.s32 	%r251, %r7287, 2;
	add.s32 	%r2004, %r1738, %r251;
	mul.lo.s32 	%r252, %r2004, %r1737;
	mov.u32 	%r7291, 0;
	mov.u64 	%rd559, 24;
	mov.u64 	%rd560, %rd176;

$L__BB0_144:
	ld.global.nc.u32 	%r2005, [%rd560];
	cvt.rn.f64.s32 	%fd2, %r2005;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r254, %r2005, %r7281;
	setp.lt.s32 	%p83, %r254, %r1737;
	or.b32  	%r2006, %r239, %r254;
	setp.gt.s32 	%p84, %r2006, -1;
	and.pred  	%p85, %p83, %p84;
	setp.lt.s32 	%p86, %r239, %r1738;
	and.pred  	%p6, %p86, %p85;
	cvt.rn.f32.f64 	%f131, %fd4;
	add.f32 	%f132, %f131, 0f3E800000;
	abs.f32 	%f9, %f132;
	add.f32 	%f133, %f9, 0f40200000;
	setp.geu.f32 	%p87, %f133, 0f40000000;
	@%p87 bra 	$L__BB0_156;

	@%p6 bra 	$L__BB0_147;
	bra.uni 	$L__BB0_146;

$L__BB0_147:
	setp.eq.s32 	%p88, %r234, 0;
	add.s32 	%r2008, %r240, %r254;
	shl.b32 	%r2009, %r2008, 1;
	mul.wide.s32 	%rd177, %r2009, 4;
	add.s64 	%rd178, %rd11, %rd177;
	ld.global.f32 	%f10, [%rd178];
	@%p88 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_148;

$L__BB0_149:
	mov.f32 	%f139, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f10;
  cvt.rn.f16.f32 high, %f139;
  mov.b32 %r7289, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_146:
	mov.f32 	%f135, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f135;
  cvt.rn.f16.f32 high, %f135;
  mov.b32 %r7289, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_148:
	mov.f32 	%f136, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f136;
  cvt.rn.f16.f32 high, %f10;
  mov.b32 %r7289, {low,high};}

	// end inline asm

$L__BB0_150:
	add.s32 	%r259, %r7291, %r238;
	mul.wide.s32 	%rd179, %r259, 4;
	add.s64 	%rd180, %rd12, %rd179;
	st.global.u32 	[%rd180], %r7289;
	@%p6 bra 	$L__BB0_152;
	bra.uni 	$L__BB0_151;

$L__BB0_152:
	setp.eq.s32 	%p89, %r234, 0;
	add.s32 	%r2013, %r241, %r254;
	shl.b32 	%r2014, %r2013, 1;
	mul.wide.s32 	%rd181, %r2014, 4;
	add.s64 	%rd182, %rd11, %rd181;
	ld.global.f32 	%f11, [%rd182];
	@%p89 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_153;

$L__BB0_154:
	mov.f32 	%f145, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f11;
  cvt.rn.f16.f32 high, %f145;
  mov.b32 %r7290, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_151:
	mov.f32 	%f141, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f141;
  cvt.rn.f16.f32 high, %f141;
  mov.b32 %r7290, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_153:
	mov.f32 	%f142, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f142;
  cvt.rn.f16.f32 high, %f11;
  mov.b32 %r7290, {low,high};}

	// end inline asm

$L__BB0_155:
	add.s32 	%r2017, %r259, 1;
	mul.wide.s32 	%rd183, %r2017, 4;
	add.s64 	%rd184, %rd12, %rd183;
	st.global.u32 	[%rd184], %r7290;
	add.s32 	%r7291, %r7291, 2;

$L__BB0_156:
	cvt.rn.f32.f64 	%f146, %fd2;
	add.f32 	%f147, %f146, 0f3E800000;
	abs.f32 	%f12, %f147;
	add.f32 	%f13, %f12, 0f40000000;
	setp.geu.f32 	%p90, %f13, 0f40000000;
	@%p90 bra 	$L__BB0_168;

	@%p6 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	setp.eq.s32 	%p91, %r234, 0;
	add.s32 	%r2019, %r240, %r254;
	shl.b32 	%r2020, %r2019, 1;
	or.b32  	%r2021, %r2020, 1;
	mul.wide.s32 	%rd185, %r2021, 4;
	add.s64 	%rd186, %rd11, %rd185;
	ld.global.f32 	%f14, [%rd186];
	@%p91 bra 	$L__BB0_161;
	bra.uni 	$L__BB0_160;

$L__BB0_161:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f14;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r7292, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_158:
	mov.f32 	%f149, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f149;
  cvt.rn.f16.f32 high, %f149;
  mov.b32 %r7292, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_160:
	mov.f32 	%f150, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f150;
  cvt.rn.f16.f32 high, %f14;
  mov.b32 %r7292, {low,high};}

	// end inline asm

$L__BB0_162:
	add.s32 	%r270, %r7291, %r238;
	mul.wide.s32 	%rd187, %r270, 4;
	add.s64 	%rd188, %rd12, %rd187;
	st.global.u32 	[%rd188], %r7292;
	@%p6 bra 	$L__BB0_164;
	bra.uni 	$L__BB0_163;

$L__BB0_164:
	setp.eq.s32 	%p92, %r234, 0;
	add.s32 	%r2025, %r241, %r254;
	shl.b32 	%r2026, %r2025, 1;
	or.b32  	%r2027, %r2026, 1;
	mul.wide.s32 	%rd189, %r2027, 4;
	add.s64 	%rd190, %rd11, %rd189;
	ld.global.f32 	%f15, [%rd190];
	@%p92 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_165;

$L__BB0_166:
	mov.f32 	%f159, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f15;
  cvt.rn.f16.f32 high, %f159;
  mov.b32 %r7293, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_163:
	mov.f32 	%f155, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f155;
  cvt.rn.f16.f32 high, %f155;
  mov.b32 %r7293, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_165:
	mov.f32 	%f156, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f156;
  cvt.rn.f16.f32 high, %f15;
  mov.b32 %r7293, {low,high};}

	// end inline asm

$L__BB0_167:
	add.s32 	%r2030, %r270, 1;
	mul.wide.s32 	%rd191, %r2030, 4;
	add.s64 	%rd192, %rd12, %rd191;
	st.global.u32 	[%rd192], %r7293;
	add.s32 	%r7291, %r7291, 2;

$L__BB0_168:
	or.b32  	%r2031, %r243, %r254;
	setp.gt.s32 	%p93, %r2031, -1;
	and.pred  	%p95, %p83, %p93;
	setp.le.s32 	%p96, %r7287, %r1738;
	and.pred  	%p7, %p96, %p95;
	add.f32 	%f16, %f9, 0f3FC00000;
	setp.geu.f32 	%p97, %f16, 0f40000000;
	@%p97 bra 	$L__BB0_180;

	@%p7 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_170;

$L__BB0_171:
	setp.eq.s32 	%p98, %r234, 0;
	add.s32 	%r2033, %r242, %r254;
	shl.b32 	%r2034, %r2033, 1;
	mul.wide.s32 	%rd193, %r2034, 4;
	add.s64 	%rd194, %rd11, %rd193;
	ld.global.f32 	%f17, [%rd194];
	@%p98 bra 	$L__BB0_173;
	bra.uni 	$L__BB0_172;

$L__BB0_173:
	mov.f32 	%f165, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f17;
  cvt.rn.f16.f32 high, %f165;
  mov.b32 %r7295, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_170:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f161;
  mov.b32 %r7295, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_172:
	mov.f32 	%f162, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f162;
  cvt.rn.f16.f32 high, %f17;
  mov.b32 %r7295, {low,high};}

	// end inline asm

$L__BB0_174:
	add.s32 	%r281, %r7291, %r238;
	mul.wide.s32 	%rd195, %r281, 4;
	add.s64 	%rd196, %rd12, %rd195;
	st.global.u32 	[%rd196], %r7295;
	@%p7 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_175;

$L__BB0_176:
	setp.eq.s32 	%p99, %r234, 0;
	add.s32 	%r2038, %r244, %r254;
	shl.b32 	%r2039, %r2038, 1;
	mul.wide.s32 	%rd197, %r2039, 4;
	add.s64 	%rd198, %rd11, %rd197;
	ld.global.f32 	%f18, [%rd198];
	@%p99 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_177;

$L__BB0_178:
	mov.f32 	%f171, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f18;
  cvt.rn.f16.f32 high, %f171;
  mov.b32 %r7296, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_175:
	mov.f32 	%f167, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f167;
  cvt.rn.f16.f32 high, %f167;
  mov.b32 %r7296, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_177:
	mov.f32 	%f168, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f168;
  cvt.rn.f16.f32 high, %f18;
  mov.b32 %r7296, {low,high};}

	// end inline asm

$L__BB0_179:
	add.s32 	%r2042, %r281, 1;
	mul.wide.s32 	%rd199, %r2042, 4;
	add.s64 	%rd200, %rd12, %rd199;
	st.global.u32 	[%rd200], %r7296;
	add.s32 	%r7291, %r7291, 2;

$L__BB0_180:
	add.f32 	%f19, %f12, 0f3F800000;
	setp.geu.f32 	%p100, %f19, 0f40000000;
	@%p100 bra 	$L__BB0_192;

	@%p7 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_182;

$L__BB0_183:
	setp.eq.s32 	%p101, %r234, 0;
	add.s32 	%r2044, %r242, %r254;
	shl.b32 	%r2045, %r2044, 1;
	or.b32  	%r2046, %r2045, 1;
	mul.wide.s32 	%rd201, %r2046, 4;
	add.s64 	%rd202, %rd11, %rd201;
	ld.global.f32 	%f20, [%rd202];
	@%p101 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_184;

$L__BB0_185:
	mov.f32 	%f177, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f20;
  cvt.rn.f16.f32 high, %f177;
  mov.b32 %r7298, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_182:
	mov.f32 	%f173, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f173;
  cvt.rn.f16.f32 high, %f173;
  mov.b32 %r7298, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_184:
	mov.f32 	%f174, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f174;
  cvt.rn.f16.f32 high, %f20;
  mov.b32 %r7298, {low,high};}

	// end inline asm

$L__BB0_186:
	add.s32 	%r292, %r7291, %r238;
	mul.wide.s32 	%rd203, %r292, 4;
	add.s64 	%rd204, %rd12, %rd203;
	st.global.u32 	[%rd204], %r7298;
	@%p7 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_187;

$L__BB0_188:
	setp.eq.s32 	%p102, %r234, 0;
	add.s32 	%r2050, %r244, %r254;
	shl.b32 	%r2051, %r2050, 1;
	or.b32  	%r2052, %r2051, 1;
	mul.wide.s32 	%rd205, %r2052, 4;
	add.s64 	%rd206, %rd11, %rd205;
	ld.global.f32 	%f21, [%rd206];
	@%p102 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_189;

$L__BB0_190:
	mov.f32 	%f183, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f21;
  cvt.rn.f16.f32 high, %f183;
  mov.b32 %r7299, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_187:
	mov.f32 	%f179, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f179;
  cvt.rn.f16.f32 high, %f179;
  mov.b32 %r7299, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_189:
	mov.f32 	%f180, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f180;
  cvt.rn.f16.f32 high, %f21;
  mov.b32 %r7299, {low,high};}

	// end inline asm

$L__BB0_191:
	add.s32 	%r2055, %r292, 1;
	mul.wide.s32 	%rd207, %r2055, 4;
	add.s64 	%rd208, %rd12, %rd207;
	st.global.u32 	[%rd208], %r7299;
	add.s32 	%r7291, %r7291, 2;

$L__BB0_192:
	or.b32  	%r2056, %r7287, %r254;
	setp.gt.s32 	%p103, %r2056, -1;
	and.pred  	%p105, %p83, %p103;
	setp.lt.s32 	%p106, %r7287, %r1738;
	and.pred  	%p8, %p106, %p105;
	add.f32 	%f22, %f9, 0f3F000000;
	setp.geu.f32 	%p107, %f22, 0f40000000;
	@%p107 bra 	$L__BB0_204;

	@%p8 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_194;

$L__BB0_195:
	setp.eq.s32 	%p108, %r234, 0;
	add.s32 	%r2058, %r246, %r254;
	shl.b32 	%r2059, %r2058, 1;
	mul.wide.s32 	%rd209, %r2059, 4;
	add.s64 	%rd210, %rd11, %rd209;
	ld.global.f32 	%f23, [%rd210];
	@%p108 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_196;

$L__BB0_197:
	mov.f32 	%f189, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f23;
  cvt.rn.f16.f32 high, %f189;
  mov.b32 %r7301, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_194:
	mov.f32 	%f185, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f185;
  cvt.rn.f16.f32 high, %f185;
  mov.b32 %r7301, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_196:
	mov.f32 	%f186, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f186;
  cvt.rn.f16.f32 high, %f23;
  mov.b32 %r7301, {low,high};}

	// end inline asm

$L__BB0_198:
	add.s32 	%r303, %r7291, %r238;
	mul.wide.s32 	%rd211, %r303, 4;
	add.s64 	%rd212, %rd12, %rd211;
	st.global.u32 	[%rd212], %r7301;
	@%p8 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_199;

$L__BB0_200:
	setp.eq.s32 	%p109, %r234, 0;
	add.s32 	%r2063, %r245, %r254;
	shl.b32 	%r2064, %r2063, 1;
	mul.wide.s32 	%rd213, %r2064, 4;
	add.s64 	%rd214, %rd11, %rd213;
	ld.global.f32 	%f24, [%rd214];
	@%p109 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_201;

$L__BB0_202:
	mov.f32 	%f195, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f24;
  cvt.rn.f16.f32 high, %f195;
  mov.b32 %r7302, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_199:
	mov.f32 	%f191, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f191;
  cvt.rn.f16.f32 high, %f191;
  mov.b32 %r7302, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_201:
	mov.f32 	%f192, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f192;
  cvt.rn.f16.f32 high, %f24;
  mov.b32 %r7302, {low,high};}

	// end inline asm

$L__BB0_203:
	add.s32 	%r2067, %r303, 1;
	mul.wide.s32 	%rd215, %r2067, 4;
	add.s64 	%rd216, %rd12, %rd215;
	st.global.u32 	[%rd216], %r7302;
	add.s32 	%r7291, %r7291, 2;

$L__BB0_204:
	add.f32 	%f196, %f12, 0f00000000;
	setp.geu.f32 	%p110, %f196, 0f40000000;
	@%p110 bra 	$L__BB0_216;

	@%p8 bra 	$L__BB0_207;
	bra.uni 	$L__BB0_206;

$L__BB0_207:
	setp.eq.s32 	%p111, %r234, 0;
	add.s32 	%r2069, %r246, %r254;
	shl.b32 	%r2070, %r2069, 1;
	or.b32  	%r2071, %r2070, 1;
	mul.wide.s32 	%rd217, %r2071, 4;
	add.s64 	%rd218, %rd11, %rd217;
	ld.global.f32 	%f25, [%rd218];
	@%p111 bra 	$L__BB0_209;
	bra.uni 	$L__BB0_208;

$L__BB0_209:
	mov.f32 	%f202, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f25;
  cvt.rn.f16.f32 high, %f202;
  mov.b32 %r7304, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_206:
	mov.f32 	%f198, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f198;
  cvt.rn.f16.f32 high, %f198;
  mov.b32 %r7304, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_208:
	mov.f32 	%f199, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f199;
  cvt.rn.f16.f32 high, %f25;
  mov.b32 %r7304, {low,high};}

	// end inline asm

$L__BB0_210:
	add.s32 	%r314, %r7291, %r238;
	mul.wide.s32 	%rd219, %r314, 4;
	add.s64 	%rd220, %rd12, %rd219;
	st.global.u32 	[%rd220], %r7304;
	@%p8 bra 	$L__BB0_212;
	bra.uni 	$L__BB0_211;

$L__BB0_212:
	setp.eq.s32 	%p112, %r234, 0;
	add.s32 	%r2075, %r245, %r254;
	shl.b32 	%r2076, %r2075, 1;
	or.b32  	%r2077, %r2076, 1;
	mul.wide.s32 	%rd221, %r2077, 4;
	add.s64 	%rd222, %rd11, %rd221;
	ld.global.f32 	%f26, [%rd222];
	@%p112 bra 	$L__BB0_214;
	bra.uni 	$L__BB0_213;

$L__BB0_214:
	mov.f32 	%f208, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f26;
  cvt.rn.f16.f32 high, %f208;
  mov.b32 %r7305, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_211:
	mov.f32 	%f204, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f204;
  cvt.rn.f16.f32 high, %f204;
  mov.b32 %r7305, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_213:
	mov.f32 	%f205, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f205;
  cvt.rn.f16.f32 high, %f26;
  mov.b32 %r7305, {low,high};}

	// end inline asm

$L__BB0_215:
	add.s32 	%r2080, %r314, 1;
	mul.wide.s32 	%rd223, %r2080, 4;
	add.s64 	%rd224, %rd12, %rd223;
	st.global.u32 	[%rd224], %r7305;
	add.s32 	%r7291, %r7291, 2;

$L__BB0_216:
	or.b32  	%r2081, %r248, %r254;
	setp.gt.s32 	%p113, %r2081, -1;
	and.pred  	%p115, %p83, %p113;
	setp.lt.s32 	%p116, %r248, %r1738;
	and.pred  	%p9, %p116, %p115;
	@%p107 bra 	$L__BB0_228;

	@%p9 bra 	$L__BB0_219;
	bra.uni 	$L__BB0_218;

$L__BB0_219:
	setp.eq.s32 	%p118, %r234, 0;
	add.s32 	%r2083, %r247, %r254;
	shl.b32 	%r2084, %r2083, 1;
	mul.wide.s32 	%rd225, %r2084, 4;
	add.s64 	%rd226, %rd11, %rd225;
	ld.global.f32 	%f27, [%rd226];
	@%p118 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_220;

$L__BB0_221:
	mov.f32 	%f214, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f27;
  cvt.rn.f16.f32 high, %f214;
  mov.b32 %r7307, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_218:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r7307, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_220:
	mov.f32 	%f211, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f211;
  cvt.rn.f16.f32 high, %f27;
  mov.b32 %r7307, {low,high};}

	// end inline asm

$L__BB0_222:
	add.s32 	%r325, %r7291, %r238;
	mul.wide.s32 	%rd227, %r325, 4;
	add.s64 	%rd228, %rd12, %rd227;
	st.global.u32 	[%rd228], %r7307;
	@%p9 bra 	$L__BB0_224;
	bra.uni 	$L__BB0_223;

$L__BB0_224:
	setp.eq.s32 	%p119, %r234, 0;
	add.s32 	%r2088, %r249, %r254;
	shl.b32 	%r2089, %r2088, 1;
	mul.wide.s32 	%rd229, %r2089, 4;
	add.s64 	%rd230, %rd11, %rd229;
	ld.global.f32 	%f28, [%rd230];
	@%p119 bra 	$L__BB0_226;
	bra.uni 	$L__BB0_225;

$L__BB0_226:
	mov.f32 	%f220, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f28;
  cvt.rn.f16.f32 high, %f220;
  mov.b32 %r7308, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_223:
	mov.f32 	%f216, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f216;
  cvt.rn.f16.f32 high, %f216;
  mov.b32 %r7308, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_225:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f28;
  mov.b32 %r7308, {low,high};}

	// end inline asm

$L__BB0_227:
	add.s32 	%r2092, %r325, 1;
	mul.wide.s32 	%rd231, %r2092, 4;
	add.s64 	%rd232, %rd12, %rd231;
	st.global.u32 	[%rd232], %r7308;
	add.s32 	%r7291, %r7291, 2;

$L__BB0_228:
	@%p100 bra 	$L__BB0_240;

	@%p9 bra 	$L__BB0_231;
	bra.uni 	$L__BB0_230;

$L__BB0_231:
	setp.eq.s32 	%p121, %r234, 0;
	add.s32 	%r2094, %r247, %r254;
	shl.b32 	%r2095, %r2094, 1;
	or.b32  	%r2096, %r2095, 1;
	mul.wide.s32 	%rd233, %r2096, 4;
	add.s64 	%rd234, %rd11, %rd233;
	ld.global.f32 	%f29, [%rd234];
	@%p121 bra 	$L__BB0_233;
	bra.uni 	$L__BB0_232;

$L__BB0_233:
	mov.f32 	%f226, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f29;
  cvt.rn.f16.f32 high, %f226;
  mov.b32 %r7310, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_230:
	mov.f32 	%f222, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f222;
  cvt.rn.f16.f32 high, %f222;
  mov.b32 %r7310, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_232:
	mov.f32 	%f223, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f223;
  cvt.rn.f16.f32 high, %f29;
  mov.b32 %r7310, {low,high};}

	// end inline asm

$L__BB0_234:
	add.s32 	%r336, %r7291, %r238;
	mul.wide.s32 	%rd235, %r336, 4;
	add.s64 	%rd236, %rd12, %rd235;
	st.global.u32 	[%rd236], %r7310;
	@%p9 bra 	$L__BB0_236;
	bra.uni 	$L__BB0_235;

$L__BB0_236:
	setp.eq.s32 	%p122, %r234, 0;
	add.s32 	%r2100, %r249, %r254;
	shl.b32 	%r2101, %r2100, 1;
	or.b32  	%r2102, %r2101, 1;
	mul.wide.s32 	%rd237, %r2102, 4;
	add.s64 	%rd238, %rd11, %rd237;
	ld.global.f32 	%f30, [%rd238];
	@%p122 bra 	$L__BB0_238;
	bra.uni 	$L__BB0_237;

$L__BB0_238:
	mov.f32 	%f232, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f30;
  cvt.rn.f16.f32 high, %f232;
  mov.b32 %r7311, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_235:
	mov.f32 	%f228, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f228;
  cvt.rn.f16.f32 high, %f228;
  mov.b32 %r7311, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_237:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f30;
  mov.b32 %r7311, {low,high};}

	// end inline asm

$L__BB0_239:
	add.s32 	%r2105, %r336, 1;
	mul.wide.s32 	%rd239, %r2105, 4;
	add.s64 	%rd240, %rd12, %rd239;
	st.global.u32 	[%rd240], %r7311;
	add.s32 	%r7291, %r7291, 2;

$L__BB0_240:
	or.b32  	%r2106, %r251, %r254;
	setp.gt.s32 	%p123, %r2106, -1;
	and.pred  	%p125, %p83, %p123;
	setp.lt.s32 	%p126, %r251, %r1738;
	and.pred  	%p10, %p126, %p125;
	@%p97 bra 	$L__BB0_252;

	@%p10 bra 	$L__BB0_243;
	bra.uni 	$L__BB0_242;

$L__BB0_243:
	setp.eq.s32 	%p128, %r234, 0;
	add.s32 	%r2108, %r250, %r254;
	shl.b32 	%r2109, %r2108, 1;
	mul.wide.s32 	%rd241, %r2109, 4;
	add.s64 	%rd242, %rd11, %rd241;
	ld.global.f32 	%f31, [%rd242];
	@%p128 bra 	$L__BB0_245;
	bra.uni 	$L__BB0_244;

$L__BB0_245:
	mov.f32 	%f238, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f31;
  cvt.rn.f16.f32 high, %f238;
  mov.b32 %r7313, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_242:
	mov.f32 	%f234, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f234;
  cvt.rn.f16.f32 high, %f234;
  mov.b32 %r7313, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_244:
	mov.f32 	%f235, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f235;
  cvt.rn.f16.f32 high, %f31;
  mov.b32 %r7313, {low,high};}

	// end inline asm

$L__BB0_246:
	add.s32 	%r347, %r7291, %r238;
	mul.wide.s32 	%rd243, %r347, 4;
	add.s64 	%rd244, %rd12, %rd243;
	st.global.u32 	[%rd244], %r7313;
	@%p10 bra 	$L__BB0_248;
	bra.uni 	$L__BB0_247;

$L__BB0_248:
	setp.eq.s32 	%p129, %r234, 0;
	add.s32 	%r2113, %r252, %r254;
	shl.b32 	%r2114, %r2113, 1;
	mul.wide.s32 	%rd245, %r2114, 4;
	add.s64 	%rd246, %rd11, %rd245;
	ld.global.f32 	%f32, [%rd246];
	@%p129 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_249;

$L__BB0_250:
	mov.f32 	%f244, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f32;
  cvt.rn.f16.f32 high, %f244;
  mov.b32 %r7314, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_247:
	mov.f32 	%f240, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f240;
  cvt.rn.f16.f32 high, %f240;
  mov.b32 %r7314, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_249:
	mov.f32 	%f241, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f241;
  cvt.rn.f16.f32 high, %f32;
  mov.b32 %r7314, {low,high};}

	// end inline asm

$L__BB0_251:
	add.s32 	%r2117, %r347, 1;
	mul.wide.s32 	%rd247, %r2117, 4;
	add.s64 	%rd248, %rd12, %rd247;
	st.global.u32 	[%rd248], %r7314;
	add.s32 	%r7291, %r7291, 2;

$L__BB0_252:
	@%p90 bra 	$L__BB0_264;

	@%p10 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_254;

$L__BB0_255:
	setp.eq.s32 	%p131, %r234, 0;
	add.s32 	%r2119, %r250, %r254;
	shl.b32 	%r2120, %r2119, 1;
	or.b32  	%r2121, %r2120, 1;
	mul.wide.s32 	%rd249, %r2121, 4;
	add.s64 	%rd250, %rd11, %rd249;
	ld.global.f32 	%f33, [%rd250];
	@%p131 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_256;

$L__BB0_257:
	mov.f32 	%f250, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f33;
  cvt.rn.f16.f32 high, %f250;
  mov.b32 %r7316, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_254:
	mov.f32 	%f246, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f246;
  cvt.rn.f16.f32 high, %f246;
  mov.b32 %r7316, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_256:
	mov.f32 	%f247, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f247;
  cvt.rn.f16.f32 high, %f33;
  mov.b32 %r7316, {low,high};}

	// end inline asm

$L__BB0_258:
	add.s32 	%r358, %r7291, %r238;
	mul.wide.s32 	%rd251, %r358, 4;
	add.s64 	%rd252, %rd12, %rd251;
	st.global.u32 	[%rd252], %r7316;
	@%p10 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_259;

$L__BB0_260:
	setp.eq.s32 	%p132, %r234, 0;
	add.s32 	%r2125, %r252, %r254;
	shl.b32 	%r2126, %r2125, 1;
	or.b32  	%r2127, %r2126, 1;
	mul.wide.s32 	%rd253, %r2127, 4;
	add.s64 	%rd254, %rd11, %rd253;
	ld.global.f32 	%f34, [%rd254];
	@%p132 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_261;

$L__BB0_262:
	mov.f32 	%f256, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f34;
  cvt.rn.f16.f32 high, %f256;
  mov.b32 %r7317, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_259:
	mov.f32 	%f252, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f252;
  cvt.rn.f16.f32 high, %f252;
  mov.b32 %r7317, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_261:
	mov.f32 	%f253, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f253;
  cvt.rn.f16.f32 high, %f34;
  mov.b32 %r7317, {low,high};}

	// end inline asm

$L__BB0_263:
	add.s32 	%r2130, %r358, 1;
	mul.wide.s32 	%rd255, %r2130, 4;
	add.s64 	%rd256, %rd12, %rd255;
	st.global.u32 	[%rd256], %r7317;
	add.s32 	%r7291, %r7291, 2;

$L__BB0_264:
	add.s64 	%rd560, %rd560, 4;
	add.s64 	%rd559, %rd559, -4;
	setp.ne.s64 	%p133, %rd559, 0;
	@%p133 bra 	$L__BB0_144;

$L__BB0_265:
	add.s32 	%r7287, %r7287, %r30;
	setp.lt.s32 	%p134, %r7287, %r1738;
	@%p134 bra 	$L__BB0_142;

$L__BB0_266:
	add.s32 	%r7281, %r7281, %r1752;
	setp.lt.s32 	%p135, %r7281, %r1737;
	@%p135 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_267;

$L__BB0_121:
	@%p19 bra 	$L__BB0_267;

	neg.s32 	%r208, %r58;
	mov.u32 	%r1948, 31;
	sub.s32 	%r1949, %r1948, %r28;
	setp.gt.s32 	%p73, %r27, %r28;
	selp.b32 	%r1950, %r28, %r1949, %p73;
	shl.b32 	%r1951, %r1950, 2;
	mov.u32 	%r1952, 2;
	sub.s32 	%r209, %r1951, %r1740;
	sub.s32 	%r1953, %r1952, %r1740;
	add.s32 	%r210, %r1953, %r1951;
	add.s32 	%r211, %r1737, -1;
	add.s32 	%r212, %r209, 1;
	add.s32 	%r213, %r210, 1;
	rem.s32 	%r1978, %r212, %r40;
	add.s32 	%r1979, %r1978, %r40;
	rem.s32 	%r224, %r1979, %r40;
	rem.s32 	%r1980, %r213, %r40;
	add.s32 	%r1981, %r1980, %r40;
	rem.s32 	%r225, %r1981, %r40;

$L__BB0_123:
	setp.ne.s32 	%p74, %r24, %r208;
	@%p74 bra 	$L__BB0_137;

	shl.b32 	%r215, %r7281, 1;
	rem.s32 	%r1954, %r209, %r40;
	add.s32 	%r1955, %r1954, %r40;
	rem.s32 	%r216, %r1955, %r40;
	rem.s32 	%r1956, %r210, %r40;
	add.s32 	%r1957, %r1956, %r40;
	rem.s32 	%r217, %r1957, %r40;
	@%p73 bra 	$L__BB0_126;
	bra.uni 	$L__BB0_125;

$L__BB0_126:
	mul.lo.s32 	%r1960, %r215, %r40;
	add.s32 	%r1961, %r1960, %r216;
	mul.wide.s32 	%rd157, %r1961, 4;
	add.s64 	%rd158, %rd11, %rd157;
	ld.global.f32 	%f117, [%rd158];
	add.s32 	%r1962, %r1960, %r217;
	mul.wide.s32 	%rd159, %r1962, 4;
	add.s64 	%rd160, %rd11, %rd159;
	ld.global.f32 	%f118, [%rd160];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f117;
  cvt.rn.f16.f32 high, %f118;
  mov.b32 %r7282, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_127;

$L__BB0_125:
	mov.f32 	%f116, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f116;
  cvt.rn.f16.f32 high, %f116;
  mov.b32 %r7282, {low,high};}

	// end inline asm

$L__BB0_127:
	shl.b32 	%r1963, %r7281, 5;
	add.s32 	%r1964, %r1963, %r28;
	shl.b32 	%r1965, %r1964, 2;
	mul.wide.s32 	%rd161, %r1965, 4;
	add.s64 	%rd13, %rd12, %rd161;
	st.global.u32 	[%rd13], %r7282;
	@%p73 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_128;

$L__BB0_129:
	add.s32 	%r1968, %r215, 1;
	mul.lo.s32 	%r1969, %r1968, %r40;
	add.s32 	%r1970, %r1969, %r216;
	mul.wide.s32 	%rd162, %r1970, 4;
	add.s64 	%rd163, %rd11, %rd162;
	ld.global.f32 	%f121, [%rd163];
	add.s32 	%r1971, %r1969, %r217;
	mul.wide.s32 	%rd164, %r1971, 4;
	add.s64 	%rd165, %rd11, %rd164;
	ld.global.f32 	%f122, [%rd165];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f121;
  cvt.rn.f16.f32 high, %f122;
  mov.b32 %r7283, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_130;

$L__BB0_128:
	mov.f32 	%f120, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f120;
  cvt.rn.f16.f32 high, %f120;
  mov.b32 %r7283, {low,high};}

	// end inline asm

$L__BB0_130:
	add.s32 	%r1972, %r211, %r7281;
	rem.s32 	%r1973, %r1972, %r1737;
	shl.b32 	%r1974, %r1973, 5;
	add.s32 	%r1975, %r1974, %r28;
	shl.b32 	%r1976, %r1975, 2;
	or.b32  	%r1977, %r1976, 2;
	mul.wide.s32 	%rd166, %r1977, 4;
	add.s64 	%rd14, %rd12, %rd166;
	st.global.u32 	[%rd14], %r7283;
	@%p73 bra 	$L__BB0_132;
	bra.uni 	$L__BB0_131;

$L__BB0_132:
	mul.lo.s32 	%r1984, %r215, %r40;
	add.s32 	%r1985, %r1984, %r224;
	mul.wide.s32 	%rd167, %r1985, 4;
	add.s64 	%rd168, %rd11, %rd167;
	ld.global.f32 	%f125, [%rd168];
	add.s32 	%r1986, %r1984, %r225;
	mul.wide.s32 	%rd169, %r1986, 4;
	add.s64 	%rd170, %rd11, %rd169;
	ld.global.f32 	%f126, [%rd170];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f125;
  cvt.rn.f16.f32 high, %f126;
  mov.b32 %r7284, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_133;

$L__BB0_131:
	mov.f32 	%f124, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f124;
  cvt.rn.f16.f32 high, %f124;
  mov.b32 %r7284, {low,high};}

	// end inline asm

$L__BB0_133:
	st.global.u32 	[%rd13+4], %r7284;
	@%p73 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r1989, %r215, 1;
	mul.lo.s32 	%r1990, %r1989, %r40;
	add.s32 	%r1991, %r1990, %r224;
	mul.wide.s32 	%rd171, %r1991, 4;
	add.s64 	%rd172, %rd11, %rd171;
	ld.global.f32 	%f129, [%rd172];
	add.s32 	%r1992, %r1990, %r225;
	mul.wide.s32 	%rd173, %r1992, 4;
	add.s64 	%rd174, %rd11, %rd173;
	ld.global.f32 	%f130, [%rd174];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f129;
  cvt.rn.f16.f32 high, %f130;
  mov.b32 %r7285, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f128, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f128;
  cvt.rn.f16.f32 high, %f128;
  mov.b32 %r7285, {low,high};}

	// end inline asm

$L__BB0_136:
	st.global.u32 	[%rd14+4], %r7285;

$L__BB0_137:
	add.s32 	%r7281, %r7281, %r1752;
	setp.lt.s32 	%p79, %r7281, %r1737;
	@%p79 bra 	$L__BB0_123;

$L__BB0_267:
	add.s32 	%r2132, %r1732, -1;
	mad.lo.s32 	%r2133, %r1733, 576, 128;
	mul.lo.s32 	%r2134, %r2133, %r2132;
	add.s32 	%r2135, %r52, -64;
	add.s32 	%r2136, %r2135, %r52;
	add.s32 	%r2137, %r1733, -1;
	mad.lo.s32 	%r2138, %r2136, %r2137, %r2134;
	mul.lo.s32 	%r2139, %r2132, %r1733;
	mul.lo.s32 	%r2140, %r2139, 320;
	mad.lo.s32 	%r2141, %r2135, %r2137, %r2140;
	add.s32 	%r367, %r2141, %r2138;
	setp.lt.s32 	%p136, %r367, 1;
	mov.f32 	%f258, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r7496, {low,high};}

	// end inline asm
	@%p136 bra 	$L__BB0_270;

	mov.u32 	%r7321, 0;
	mov.u32 	%r7319, _ZN6kernel5shmemE;

$L__BB0_269:
	st.shared.u32 	[%r7319], %r7496;
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2144, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7319+4], %r2144;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2145, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7319+8], %r2145;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2146, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7319+12], %r2146;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r7496, {low,high};}

	// end inline asm
	add.s32 	%r7319, %r7319, 16;
	add.s32 	%r7321, %r7321, 4;
	setp.lt.s32 	%p137, %r7321, %r367;
	@%p137 bra 	$L__BB0_269;

$L__BB0_270:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r7497, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r2149, {low,high};}

	// end inline asm
	ld.param.u64 	%rd257, [%rd1+128];
	cvta.to.global.u64 	%rd19, %rd257;
	mov.u32 	%r2150, 31;
	sub.s32 	%r2151, %r2150, %r28;
	setp.gt.s32 	%p138, %r27, %r28;
	selp.b32 	%r2152, %r28, %r2151, %p138;
	shl.b32 	%r2153, %r2152, 2;
	sub.s32 	%r378, %r2153, %r1740;
	rem.s32 	%r2154, %r378, %r40;
	add.s32 	%r2155, %r2154, %r40;
	rem.s32 	%r379, %r2155, %r40;
	add.s32 	%r2156, %r378, 2;
	rem.s32 	%r2157, %r2156, %r40;
	add.s32 	%r2158, %r2157, %r40;
	rem.s32 	%r380, %r2158, %r40;
	mul.lo.s32 	%r2159, %r379, 6;
	mul.lo.s32 	%r2160, %r380, 6;
	mul.wide.s32 	%rd258, %r2159, 4;
	add.s64 	%rd20, %rd19, %rd258;
	mul.wide.s32 	%rd259, %r2160, 4;
	add.s64 	%rd21, %rd19, %rd259;
	@%p12 bra 	$L__BB0_272;
	bra.uni 	$L__BB0_271;

$L__BB0_272:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r7323, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_273;

$L__BB0_271:
	ld.global.f32 	%f273, [%rd20];
	ld.global.f32 	%f274, [%rd20+8];
	add.f32 	%f271, %f273, %f274;
	ld.global.f32 	%f275, [%rd21+8];
	ld.global.f32 	%f276, [%rd21];
	add.f32 	%f272, %f276, %f275;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f271;
  cvt.rn.f16.f32 high, %f272;
  mov.b32 %r7323, {low,high};}

	// end inline asm

$L__BB0_273:
	@%p12 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	ld.global.f32 	%f281, [%rd20+4];
	ld.global.f32 	%f282, [%rd21+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f281;
  cvt.rn.f16.f32 high, %f282;
  mov.b32 %r7324, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	ld.global.f32 	%f279, [%rd20];
	ld.global.f32 	%f280, [%rd21];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f279;
  cvt.rn.f16.f32 high, %f280;
  mov.b32 %r7324, {low,high};}

	// end inline asm

$L__BB0_276:
	@%p12 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	mov.f32 	%f290, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f290;
  cvt.rn.f16.f32 high, %f290;
  mov.b32 %r7325, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_279;

$L__BB0_277:
	ld.global.f32 	%f285, [%rd20+20];
	ld.global.f32 	%f286, [%rd20+12];
	add.f32 	%f283, %f286, %f285;
	ld.global.f32 	%f287, [%rd21+20];
	ld.global.f32 	%f288, [%rd21+12];
	add.f32 	%f284, %f288, %f287;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f284;
  mov.b32 %r7325, {low,high};}

	// end inline asm

$L__BB0_279:
	@%p12 bra 	$L__BB0_281;
	bra.uni 	$L__BB0_280;

$L__BB0_281:
	ld.global.f32 	%f293, [%rd20+16];
	ld.global.f32 	%f294, [%rd21+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f293;
  cvt.rn.f16.f32 high, %f294;
  mov.b32 %r7326, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_282;

$L__BB0_280:
	ld.global.f32 	%f291, [%rd20+12];
	ld.global.f32 	%f292, [%rd21+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f292;
  mov.b32 %r7326, {low,high};}

	// end inline asm

$L__BB0_282:
	add.s32 	%r2169, %r378, 1;
	rem.s32 	%r2170, %r2169, %r40;
	add.s32 	%r2171, %r2170, %r40;
	rem.s32 	%r393, %r2171, %r40;
	add.s32 	%r2172, %r378, 3;
	rem.s32 	%r2173, %r2172, %r40;
	add.s32 	%r2174, %r2173, %r40;
	rem.s32 	%r394, %r2174, %r40;
	mul.lo.s32 	%r2175, %r393, 6;
	mul.lo.s32 	%r2176, %r394, 6;
	mul.wide.s32 	%rd260, %r2175, 4;
	add.s64 	%rd22, %rd19, %rd260;
	mul.wide.s32 	%rd261, %r2176, 4;
	add.s64 	%rd23, %rd19, %rd261;
	@%p12 bra 	$L__BB0_284;
	bra.uni 	$L__BB0_283;

$L__BB0_284:
	mov.f32 	%f302, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f302;
  cvt.rn.f16.f32 high, %f302;
  mov.b32 %r7327, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_285;

$L__BB0_283:
	ld.global.f32 	%f297, [%rd22];
	ld.global.f32 	%f298, [%rd22+8];
	add.f32 	%f295, %f297, %f298;
	ld.global.f32 	%f299, [%rd23+8];
	ld.global.f32 	%f300, [%rd23];
	add.f32 	%f296, %f300, %f299;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f295;
  cvt.rn.f16.f32 high, %f296;
  mov.b32 %r7327, {low,high};}

	// end inline asm

$L__BB0_285:
	@%p12 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	ld.global.f32 	%f305, [%rd22+4];
	ld.global.f32 	%f306, [%rd23+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f305;
  cvt.rn.f16.f32 high, %f306;
  mov.b32 %r7328, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	ld.global.f32 	%f303, [%rd22];
	ld.global.f32 	%f304, [%rd23];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f303;
  cvt.rn.f16.f32 high, %f304;
  mov.b32 %r7328, {low,high};}

	// end inline asm

$L__BB0_288:
	@%p12 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	mov.f32 	%f314, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f314;
  cvt.rn.f16.f32 high, %f314;
  mov.b32 %r7329, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_291;

$L__BB0_289:
	ld.global.f32 	%f309, [%rd22+20];
	ld.global.f32 	%f310, [%rd22+12];
	add.f32 	%f307, %f310, %f309;
	ld.global.f32 	%f311, [%rd23+20];
	ld.global.f32 	%f312, [%rd23+12];
	add.f32 	%f308, %f312, %f311;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f307;
  cvt.rn.f16.f32 high, %f308;
  mov.b32 %r7329, {low,high};}

	// end inline asm

$L__BB0_291:
	@%p12 bra 	$L__BB0_293;
	bra.uni 	$L__BB0_292;

$L__BB0_293:
	ld.global.f32 	%f317, [%rd22+16];
	ld.global.f32 	%f318, [%rd23+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f317;
  cvt.rn.f16.f32 high, %f318;
  mov.b32 %r7330, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_294;

$L__BB0_292:
	ld.global.f32 	%f315, [%rd22+12];
	ld.global.f32 	%f316, [%rd23+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f315;
  cvt.rn.f16.f32 high, %f316;
  mov.b32 %r7330, {low,high};}

	// end inline asm

$L__BB0_294:
	// begin inline asm
	mov.u32 %r2185, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd262, %r2185;
	// begin inline asm
	mov.u32 %r2186, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd263, %r2186;
	bfi.b64 	%rd24, %rd263, %rd262, 32, 32;
	setp.ne.s64 	%p147, %rd24, 0;
	@%p147 bra 	$L__BB0_296;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_296:
	mov.u32 	%r2187, %nctaid.x;
	mov.u32 	%r2188, %nctaid.y;
	mul.lo.s32 	%r2189, %r2187, %r2188;
	mov.u32 	%r2190, %nctaid.z;
	mul.lo.s32 	%r407, %r2189, %r2190;
	neg.s32 	%r2191, %r24;
	add.s32 	%r2192, %r28, %r23;
	setp.ne.s32 	%p148, %r2192, %r2191;
	mov.u32 	%r2193, %ctaid.x;
	add.s32 	%r408, %r2193, %r25;
	neg.s32 	%r409, %r26;
	bar.sync 	0;
	@%p148 bra 	$L__BB0_300;

	setp.eq.s32 	%p149, %r408, %r409;
	mov.u32 	%r2194, -2147483647;
	sub.s32 	%r2195, %r2194, %r407;
	selp.b32 	%r2196, %r2195, 1, %p149;
	membar.gl;
	add.s64 	%rd264, %rd24, 4;
	atom.add.u32 	%r410, [%rd264], %r2196;

$L__BB0_298:
	ld.volatile.u32 	%r2197, [%rd24+4];
	xor.b32  	%r2198, %r2197, %r410;
	setp.gt.s32 	%p150, %r2198, -1;
	@%p150 bra 	$L__BB0_298;

	membar.gl;

$L__BB0_300:
	bar.sync 	0;
	setp.lt.s32 	%p151, %r31, 1;
	@%p151 bra 	$L__BB0_736;

	not.b32 	%r2212, %r23;
	add.s32 	%r2213, %r1732, %r2212;
	shr.s32 	%r2214, %r1742, 31;
	shr.u32 	%r2215, %r2214, 30;
	add.s32 	%r2216, %r1742, %r2215;
	shr.s32 	%r411, %r2216, 2;
	mul.lo.s32 	%r2217, %r2213, 384;
	add.s32 	%r2218, %r2217, %r53;
	add.s32 	%r2219, %r28, 23;
	mul.hi.s32 	%r2220, %r2219, 715827883;
	shr.u32 	%r2221, %r2220, 31;
	shr.s32 	%r2222, %r2220, 2;
	add.s32 	%r2223, %r2222, %r2221;
	mul.lo.s32 	%r2224, %r2223, 24;
	sub.s32 	%r2225, %r2219, %r2224;
	add.s32 	%r412, %r2218, -64;
	add.s32 	%r2226, %r28, 25;
	mul.hi.s32 	%r2227, %r2226, 715827883;
	shr.u32 	%r2228, %r2227, 31;
	shr.s32 	%r2229, %r2227, 2;
	add.s32 	%r2230, %r2229, %r2228;
	mul.lo.s32 	%r2231, %r2230, 24;
	sub.s32 	%r2232, %r2226, %r2231;
	add.s32 	%r2233, %r2217, %r52;
	add.s32 	%r413, %r53, %r2233;
	shr.u32 	%r2234, %r1742, 31;
	add.s32 	%r2235, %r1742, %r2234;
	and.b32  	%r2236, %r2235, -2;
	sub.s32 	%r414, %r1742, %r2236;
	setp.lt.s32 	%p152, %r28, 24;
	selp.b32 	%r415, %r2225, %r28, %p152;
	selp.b32 	%r416, %r2232, %r28, %p152;
	mov.u32 	%r2211, 0;
	// begin inline asm
	{mov.u32 %r2237, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2563, %r2237, 8;
	add.s32 	%r2564, %r2563, -8192;
	or.b32  	%r2241, %r2564, 31;
	mul.wide.s32 	%rd273, %r28, 16;
	mul.wide.s32 	%rd275, %r28, 8;
	mov.u32 	%r7608, %r2149;
	mov.u32 	%r7638, %r2149;
	mov.u32 	%r7609, %r2149;
	mov.u32 	%r7639, %r2149;
	mov.u32 	%r7610, %r2149;
	mov.u32 	%r7336, %r2149;
	mov.u32 	%r7337, %r2149;
	mov.u32 	%r7651, %r2149;
	mov.u32 	%r7640, %r2149;
	mov.u32 	%r7641, %r2149;
	mov.u32 	%r7611, %r2149;
	mov.u32 	%r7612, %r2149;
	mov.u32 	%r7613, %r2149;
	mov.u32 	%r7344, %r2149;
	mov.u32 	%r7345, %r2149;
	mov.u32 	%r7650, %r2149;
	mov.u32 	%r7642, %r2149;
	mov.u32 	%r7643, %r2149;
	mov.u32 	%r7620, %r2149;
	mov.u32 	%r7350, %r2149;
	mov.u32 	%r7351, %r2149;
	mov.u32 	%r7352, %r2149;
	mov.u32 	%r7661, %r2149;
	mov.u32 	%r7647, %r2149;
	mov.u32 	%r7652, %r2149;
	mov.u32 	%r7621, %r2149;
	mov.u32 	%r7357, %r2149;
	mov.u32 	%r7358, %r2149;
	mov.u32 	%r7359, %r2149;
	mov.u32 	%r7655, %r2149;
	mov.u32 	%r7644, %r2149;
	mov.u32 	%r7653, %r2149;
	mov.u32 	%r7622, %r2149;
	mov.u32 	%r7623, %r2149;
	mov.u32 	%r7365, %r2149;
	mov.u32 	%r7656, %r2149;
	mov.u32 	%r7657, %r2149;
	mov.u32 	%r7368, %r2149;
	mov.u32 	%r7624, %r2149;
	mov.u32 	%r7625, %r2149;
	mov.u32 	%r7626, %r2149;
	mov.u32 	%r7372, %r2149;
	mov.u32 	%r7658, %r2149;
	mov.u32 	%r7659, %r2149;
	mov.u32 	%r7627, %r2149;
	mov.u32 	%r7628, %r2149;
	mov.u32 	%r7629, %r2149;
	mov.u32 	%r7614, %r2149;
	mov.u32 	%r7379, %r2149;
	mov.u32 	%r7645, %r2149;
	mov.u32 	%r7646, %r2149;
	mov.u32 	%r7615, %r2149;
	mov.u32 	%r7383, %r2149;
	mov.u32 	%r7648, %r2149;
	mov.u32 	%r7649, %r2149;
	mov.u32 	%r7678, %r2149;
	mov.u32 	%r7387, %r2149;
	mov.u32 	%r7388, %r2149;
	mov.u32 	%r7389, %r2149;
	mov.u32 	%r7534, %r2149;
	mov.u32 	%r7679, %r2149;
	mov.u32 	%r7392, %r2149;
	mov.u32 	%r7393, %r2149;
	mov.u32 	%r7394, %r2149;
	mov.u32 	%r7535, %r2149;
	mov.u32 	%r7680, %r2149;
	mov.u32 	%r7681, %r2149;
	mov.u32 	%r7398, %r2149;
	mov.u32 	%r7399, %r2149;
	mov.u32 	%r7400, %r2149;
	mov.u32 	%r7536, %r2149;
	mov.u32 	%r7402, %r2149;
	mov.u32 	%r7682, %r2149;
	mov.u32 	%r7683, %r2149;
	mov.u32 	%r7405, %r2149;
	mov.u32 	%r7406, %r2149;
	mov.u32 	%r7407, %r2149;
	mov.u32 	%r7538, %r2149;
	mov.u32 	%r7409, %r2149;
	mov.u32 	%r7410, %r2149;
	mov.u32 	%r7411, %r2149;
	mov.u32 	%r7412, %r2149;
	mov.u32 	%r7662, %r2149;
	mov.u32 	%r7414, %r2149;
	mov.u32 	%r7415, %r2149;
	mov.u32 	%r7416, %r2149;
	mov.u32 	%r7417, %r2149;
	mov.u32 	%r7663, %r2149;
	mov.u32 	%r7630, %r2149;
	mov.u32 	%r7631, %r2149;
	mov.u32 	%r7632, %r2149;
	mov.u32 	%r7633, %r2149;
	mov.u32 	%r7423, %r2149;
	mov.u32 	%r7424, %r2149;
	mov.u32 	%r7687, %r2149;
	mov.u32 	%r7426, %r2149;
	mov.u32 	%r7427, %r2149;
	mov.u32 	%r7542, %r2149;
	mov.u32 	%r7429, %r2149;
	mov.u32 	%r7430, %r2149;
	mov.u32 	%r7431, %r2149;
	mov.u32 	%r7432, %r2149;
	mov.u32 	%r7689, %r2149;
	mov.u32 	%r7434, %r2149;
	mov.u32 	%r7435, %r2149;
	mov.u32 	%r7545, %r2149;
	mov.u32 	%r7437, %r2149;
	mov.u32 	%r7438, %r2149;
	mov.u32 	%r7439, %r2149;
	mov.u32 	%r7440, %r2149;
	mov.u32 	%r7690, %r2149;
	mov.u32 	%r7442, %r2149;
	mov.u32 	%r7443, %r2149;
	mov.u32 	%r7444, %r2149;
	mov.u32 	%r7548, %r2149;
	mov.u32 	%r7446, %r2149;
	mov.u32 	%r7447, %r2149;
	mov.u32 	%r7448, %r2149;
	mov.u32 	%r7449, %r2149;
	mov.u32 	%r7691, %r2149;
	mov.u32 	%r7451, %r2149;
	mov.u32 	%r7452, %r2149;
	mov.u32 	%r7453, %r2149;
	mov.u32 	%r7551, %r2149;
	mov.u32 	%r7455, %r2149;
	mov.u32 	%r7456, %r2149;
	mov.u32 	%r7457, %r2149;
	mov.u32 	%r7458, %r2149;
	mov.u32 	%r7459, %r2149;
	mov.u32 	%r7460, %r2149;
	mov.u32 	%r7461, %r2149;
	mov.u32 	%r7462, %r2149;
	mov.u32 	%r7463, %r2149;
	mov.u32 	%r7464, %r2149;
	mov.u32 	%r7465, %r2149;
	mov.u32 	%r7466, %r2149;
	mov.u32 	%r7467, %r2149;
	mov.u32 	%r7468, %r2149;
	mov.u32 	%r7469, %r2149;
	mov.u32 	%r7470, %r2149;
	mov.u32 	%r7471, %r2149;
	mov.u32 	%r7472, %r2149;
	mov.u32 	%r7473, %r2149;
	mov.u32 	%r7474, %r2149;
	mov.u32 	%r7475, %r2149;
	mov.u32 	%r7476, %r2149;
	mov.u32 	%r7477, %r2211;
	mov.u32 	%r7478, %r2211;
	mov.u32 	%r7479, %r2211;
	mov.u32 	%r7480, %r2211;
	mov.u32 	%r7481, %r2211;
	mov.u32 	%r7482, %r2211;
	mov.u32 	%r7483, %r2211;
	mov.u32 	%r7484, %r2211;
	mov.u32 	%r7485, %r2211;
	mov.u32 	%r7486, %r2211;
	mov.u32 	%r7487, %r2211;
	mov.u32 	%r7488, %r2211;
	mov.u32 	%r7616, %r2149;
	mov.u32 	%r7617, %r2149;
	mov.u32 	%r7618, %r2149;
	mov.u32 	%r7619, %r2149;
	mov.u32 	%r7634, %r2149;
	mov.u32 	%r7635, %r2149;
	mov.u32 	%r7495, %r2211;

$L__BB0_302:
	mov.u32 	%r554, %r7691;
	mov.u32 	%r553, %r7449;
	mov.u32 	%r545, %r7690;
	mov.u32 	%r544, %r7440;
	mov.u32 	%r537, %r7689;
	mov.u32 	%r529, %r7687;
	mov.u32 	%r7449, %r7683;
	mov.u32 	%r499, %r7682;
	mov.u32 	%r7440, %r7681;
	mov.u32 	%r491, %r7680;
	mov.u32 	%r484, %r7679;
	mov.u32 	%r477, %r7678;
	sub.s32 	%r7231, %r1737, %r30;
	mov.u32 	%r2252, 1;
	not.b32 	%r2526, %r25;
	mov.u32 	%r2518, -1;
	add.s32 	%r2527, %r1734, %r2526;
	mul.lo.s32 	%r2528, %r2527, %r1736;
	add.s32 	%r2529, %r7495, %r2528;
	not.b32 	%r2531, %r26;
	add.s32 	%r2532, %r1735, %r2531;
	mul.lo.s32 	%r2533, %r2532, %r1736;
	add.s32 	%r2534, %r7495, %r2533;
	add.s32 	%r2535, %r2528, %r2533;
	add.s32 	%r2536, %r2535, %r1737;
	mad.lo.s32 	%r2539, %r2527, %r1732, %r2213;
	not.b32 	%r2540, %r24;
	add.s32 	%r2541, %r1733, %r2540;
	mad.lo.s32 	%r2542, %r2532, %r1733, %r2541;
	add.s32 	%r2543, %r2539, %r2542;
	shl.b32 	%r2544, %r2543, 1;
	add.s32 	%r2545, %r2536, %r2544;
	add.s32 	%r2546, %r7495, %r2545;
	add.s32 	%r2547, %r7495, %r2535;
	div.s32 	%r2548, %r2546, %r1737;
	neg.s32 	%r2549, %r1737;
	sub.s32 	%r2552, %r30, %r1737;
	sub.s32 	%r2553, %r2539, %r2542;
	shl.b32 	%r2554, %r2553, 1;
	add.s32 	%r2555, %r2554, %r1738;
	mad.lo.s32 	%r2556, %r2548, %r30, %r2555;
	mad.lo.s32 	%r2557, %r2548, %r2552, %r2547;
	div.s32 	%r2558, %r2556, %r1738;
	mul.lo.s32 	%r2559, %r2558, %r1738;
	sub.s32 	%r2562, %r1753, %r1738;
	mov.u32 	%r2336, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r2238,%r7497,%r2211,%r2241,%r2518;
}
	// end inline asm
	selp.b32 	%r2244, %r7324, %r2238, %p12;
	// begin inline asm
	{mul.f16x2 %r7581,%r2244,%r7476;
}
	// end inline asm
	selp.b32 	%r2247, %r7328, %r2238, %p12;
	// begin inline asm
	{mul.f16x2 %r7579,%r2247,%r7471;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2250,%r7497,%r2252,%r2241,%r2518;
}
	// end inline asm
	selp.b32 	%r2256, %r7324, %r2250, %p12;
	// begin inline asm
	{mul.f16x2 %r7580,%r2256,%r7475;
}
	// end inline asm
	selp.b32 	%r2259, %r7328, %r2250, %p12;
	// begin inline asm
	{mul.f16x2 %r7578,%r2259,%r7470;
}
	// end inline asm
	mov.u32 	%r2264, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r2262,%r7497,%r2264,%r2241,%r2518;
}
	// end inline asm
	selp.b32 	%r2268, %r7324, %r2262, %p12;
	// begin inline asm
	{mul.f16x2 %r7577,%r2268,%r7466;
}
	// end inline asm
	selp.b32 	%r2271, %r7328, %r2262, %p12;
	// begin inline asm
	{mul.f16x2 %r7576,%r2271,%r7464;
}
	// end inline asm
	mov.u32 	%r2276, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2274,%r7497,%r2276,%r2241,%r2518;
}
	// end inline asm
	selp.b32 	%r2280, %r7324, %r2274, %p12;
	// begin inline asm
	{mul.f16x2 %r7575,%r2280,%r7663;
}
	// end inline asm
	selp.b32 	%r2283, %r7328, %r2274, %p12;
	// begin inline asm
	{mul.f16x2 %r7573,%r2283,%r7662;
}
	// end inline asm
	mov.u32 	%r2288, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r2286,%r7497,%r2288,%r2241,%r2518;
}
	// end inline asm
	selp.b32 	%r2292, %r7324, %r2286, %p12;
	// begin inline asm
	{mul.f16x2 %r7574,%r2292,%r7462;
}
	// end inline asm
	selp.b32 	%r2295, %r7328, %r2286, %p12;
	// begin inline asm
	{mul.f16x2 %r7572,%r2295,%r7459;
}
	// end inline asm
	mov.u32 	%r2300, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2298,%r7497,%r2300,%r2241,%r2518;
}
	// end inline asm
	selp.b32 	%r2304, %r7324, %r2298, %p12;
	// begin inline asm
	{mul.f16x2 %r7571,%r2304,%r7456;
}
	// end inline asm
	selp.b32 	%r2307, %r7328, %r2298, %p12;
	// begin inline asm
	{mul.f16x2 %r7568,%r2307,%r7447;
}
	// end inline asm
	mov.u32 	%r2312, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r2310,%r7497,%r2312,%r2241,%r2518;
}
	// end inline asm
	selp.b32 	%r2316, %r7324, %r2310, %p12;
	// begin inline asm
	{mul.f16x2 %r7570,%r2316,%r7455;
}
	// end inline asm
	selp.b32 	%r2319, %r7328, %r2310, %p12;
	// begin inline asm
	{mul.f16x2 %r7567,%r2319,%r7446;
}
	// end inline asm
	mov.u32 	%r2324, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2322,%r7497,%r2324,%r2241,%r2518;
}
	// end inline asm
	selp.b32 	%r2328, %r7324, %r2322, %p12;
	// begin inline asm
	{mul.f16x2 %r7569,%r2328,%r7551;
}
	// end inline asm
	selp.b32 	%r2331, %r7328, %r2322, %p12;
	// begin inline asm
	{mul.f16x2 %r7566,%r2331,%r7548;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2334,%r7497,%r2336,%r2241,%r2518;
}
	// end inline asm
	selp.b32 	%r2340, %r7324, %r2334, %p12;
	// begin inline asm
	{mul.f16x2 %r7565,%r2340,%r7438;
}
	// end inline asm
	selp.b32 	%r2343, %r7328, %r2334, %p12;
	// begin inline asm
	{mul.f16x2 %r7562,%r2343,%r7430;
}
	// end inline asm
	mov.u32 	%r2348, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2346,%r7497,%r2348,%r2241,%r2518;
}
	// end inline asm
	selp.b32 	%r2352, %r7324, %r2346, %p12;
	// begin inline asm
	{mul.f16x2 %r7564,%r2352,%r7437;
}
	// end inline asm
	selp.b32 	%r2355, %r7328, %r2346, %p12;
	// begin inline asm
	{mul.f16x2 %r7561,%r2355,%r7429;
}
	// end inline asm
	mov.u32 	%r2360, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r2358,%r7497,%r2360,%r2241,%r2518;
}
	// end inline asm
	selp.b32 	%r2364, %r7324, %r2358, %p12;
	// begin inline asm
	{mul.f16x2 %r7563,%r2364,%r7545;
}
	// end inline asm
	selp.b32 	%r2367, %r7328, %r2358, %p12;
	// begin inline asm
	{mul.f16x2 %r7560,%r2367,%r7542;
}
	// end inline asm
	mov.u32 	%r2372, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2370,%r7497,%r2372,%r2241,%r2518;
}
	// end inline asm
	selp.b32 	%r2376, %r7324, %r2370, %p12;
	// begin inline asm
	{mul.f16x2 %r7559,%r2376,%r7649;
}
	// end inline asm
	selp.b32 	%r2379, %r7328, %r2370, %p12;
	// begin inline asm
	{mul.f16x2 %r7558,%r2379,%r7646;
}
	// end inline asm
	mov.u32 	%r2384, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r2382,%r7497,%r2384,%r2241,%r2518;
}
	// end inline asm
	selp.b32 	%r2388, %r7324, %r2382, %p12;
	// begin inline asm
	{mul.f16x2 %r7557,%r2388,%r7659;
}
	// end inline asm
	selp.b32 	%r2391, %r7328, %r2382, %p12;
	// begin inline asm
	{mul.f16x2 %r7555,%r2391,%r7657;
}
	// end inline asm
	mov.u32 	%r2396, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2394,%r7497,%r2396,%r2241,%r2518;
}
	// end inline asm
	selp.b32 	%r2400, %r7324, %r2394, %p12;
	// begin inline asm
	{mul.f16x2 %r7556,%r2400,%r7658;
}
	// end inline asm
	selp.b32 	%r2403, %r7328, %r2394, %p12;
	// begin inline asm
	{mul.f16x2 %r7554,%r2403,%r7656;
}
	// end inline asm
	mov.u32 	%r2408, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r2406,%r7497,%r2408,%r2241,%r2518;
}
	// end inline asm
	selp.b32 	%r2412, %r7324, %r2406, %p12;
	// begin inline asm
	{mul.f16x2 %r7553,%r2412,%r7653;
}
	// end inline asm
	selp.b32 	%r2415, %r7328, %r2406, %p12;
	// begin inline asm
	{mul.f16x2 %r7550,%r2415,%r7652;
}
	// end inline asm
	mov.u32 	%r2420, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2418,%r7497,%r2420,%r2241,%r2518;
}
	// end inline asm
	selp.b32 	%r2424, %r7324, %r2418, %p12;
	// begin inline asm
	{mul.f16x2 %r7552,%r2424,%r7409;
}
	// end inline asm
	selp.b32 	%r2427, %r7328, %r2418, %p12;
	// begin inline asm
	{mul.f16x2 %r7549,%r2427,%r7402;
}
	// end inline asm
	mov.u32 	%r2432, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r2430,%r7497,%r2432,%r2241,%r2518;
}
	// end inline asm
	selp.b32 	%r2436, %r7324, %r2430, %p12;
	// begin inline asm
	{mul.f16x2 %r7551,%r2436,%r7538;
}
	// end inline asm
	selp.b32 	%r2439, %r7328, %r2430, %p12;
	// begin inline asm
	{mul.f16x2 %r7548,%r2439,%r7536;
}
	// end inline asm
	mov.u32 	%r2444, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2442,%r7497,%r2444,%r2241,%r2518;
}
	// end inline asm
	selp.b32 	%r2448, %r7324, %r2442, %p12;
	// begin inline asm
	{mul.f16x2 %r7547,%r2448,%r7643;
}
	// end inline asm
	selp.b32 	%r2451, %r7328, %r2442, %p12;
	// begin inline asm
	{mul.f16x2 %r7544,%r2451,%r7641;
}
	// end inline asm
	mov.u32 	%r2456, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2454,%r7497,%r2456,%r2241,%r2518;
}
	// end inline asm
	selp.b32 	%r2460, %r7324, %r2454, %p12;
	// begin inline asm
	{mul.f16x2 %r7546,%r2460,%r7642;
}
	// end inline asm
	selp.b32 	%r2463, %r7328, %r2454, %p12;
	// begin inline asm
	{mul.f16x2 %r7543,%r2463,%r7640;
}
	// end inline asm
	mov.u32 	%r2468, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2466,%r7497,%r2468,%r2241,%r2518;
}
	// end inline asm
	selp.b32 	%r2472, %r7324, %r2466, %p12;
	// begin inline asm
	{mul.f16x2 %r7545,%r2472,%r7535;
}
	// end inline asm
	selp.b32 	%r2475, %r7328, %r2466, %p12;
	// begin inline asm
	{mul.f16x2 %r7542,%r2475,%r7534;
}
	// end inline asm
	mov.u32 	%r2480, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2478,%r7497,%r2480,%r2241,%r2518;
}
	// end inline asm
	selp.b32 	%r2484, %r7324, %r2478, %p12;
	// begin inline asm
	{mul.f16x2 %r7541,%r2484,%r7638;
}
	// end inline asm
	selp.b32 	%r2487, %r7328, %r2478, %p12;
	// begin inline asm
	{mul.f16x2 %r7540,%r2487,%r7639;
}
	// end inline asm
	mov.u32 	%r2492, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2490,%r7497,%r2492,%r2241,%r2518;
}
	// end inline asm
	selp.b32 	%r2496, %r7324, %r2490, %p12;
	// begin inline asm
	{mul.f16x2 %r7539,%r2496,%r7644;
}
	// end inline asm
	selp.b32 	%r2499, %r7328, %r2490, %p12;
	// begin inline asm
	{mul.f16x2 %r7537,%r2499,%r7647;
}
	// end inline asm
	mov.u32 	%r2504, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2502,%r7497,%r2504,%r2241,%r2518;
}
	// end inline asm
	selp.b32 	%r2508, %r7324, %r2502, %p12;
	// begin inline asm
	{mul.f16x2 %r7538,%r2508,%r7655;
}
	// end inline asm
	selp.b32 	%r2511, %r7328, %r2502, %p12;
	// begin inline asm
	{mul.f16x2 %r7536,%r2511,%r7661;
}
	// end inline asm
	mov.u32 	%r2516, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2514,%r7497,%r2516,%r2241,%r2518;
}
	// end inline asm
	selp.b32 	%r2520, %r7324, %r2514, %p12;
	// begin inline asm
	{mul.f16x2 %r7535,%r2520,%r7650;
}
	// end inline asm
	selp.b32 	%r2523, %r7328, %r2514, %p12;
	// begin inline asm
	{mul.f16x2 %r7534,%r2523,%r7651;
}
	// end inline asm
	rem.s32 	%r654, %r2529, %r51;
	rem.s32 	%r655, %r2534, %r7231;
	mad.lo.s32 	%r656, %r2548, %r2549, %r2546;
	sub.s32 	%r657, %r2556, %r2559;
	mad.lo.s32 	%r658, %r2558, %r2562, %r2557;
	ld.param.u64 	%rd266, [%rd1+120];
	cvta.to.global.u64 	%rd267, %rd266;
	shl.b32 	%r2612, %r658, 1;
	mul.wide.s32 	%rd268, %r2612, 4;
	add.s64 	%rd25, %rd267, %rd268;
	@%p71 bra 	$L__BB0_310;
	bra.uni 	$L__BB0_303;

$L__BB0_310:
	add.s32 	%r2815, %r1748, 1;
	setp.lt.s32 	%p160, %r658, %r2815;
	setp.eq.s32 	%p161, %r411, %r28;
	setp.gt.s32 	%p162, %r658, -1;
	and.pred  	%p163, %p161, %p162;
	and.pred  	%p164, %p160, %p163;
	@%p164 bra 	$L__BB0_312;
	bra.uni 	$L__BB0_311;

$L__BB0_312:
	ld.global.f32 	%f329, [%rd25];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f329;
  mov.b32 %r7500, {low,low};}

	// end inline asm
	ld.global.f32 	%f330, [%rd25+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f330;
  mov.b32 %r7501, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_313;

$L__BB0_303:
	add.s32 	%r2615, %r1748, 1;
	setp.lt.s32 	%p155, %r658, %r2615;
	setp.gt.s32 	%p156, %r658, -1;
	and.pred  	%p157, %p156, %p155;
	@%p157 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f323, [%rd25];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f323;
  mov.b32 %r7498, {low,low};}

	// end inline asm
	ld.global.f32 	%f324, [%rd25+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f324;
  mov.b32 %r7499, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_311:
	mov.f32 	%f328, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7500, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7501, {low,high};}

	// end inline asm

$L__BB0_313:
	mov.u32 	%r2823, 0;
	mov.u32 	%r2834, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2821,%r7496,%r2823,%r2241,%r2834;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2826,%r7500,%r2821;
}
	// end inline asm
	mov.u32 	%r2832, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2830,%r7496,%r2832,%r2241,%r2834;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2835,%r7501,%r2830;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7503,%r2826,%r2835;
}
	// end inline asm
	setp.eq.s32 	%p165, %r414, 0;
	mov.u32 	%r7502, %r7503;
	@%p165 bra 	$L__BB0_315;

	mov.f32 	%f332, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f332;
  cvt.rn.f16.f32 high, %f332;
  mov.b32 %r7502, {low,high};}

	// end inline asm

$L__BB0_315:
	// begin inline asm
	{add.f16x2 %r7581,%r7581,%r7502;
}
	// end inline asm
	setp.eq.s32 	%p166, %r414, 1;
	@%p166 bra 	$L__BB0_317;

	mov.f32 	%f334, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f334;
  cvt.rn.f16.f32 high, %f334;
  mov.b32 %r7503, {low,high};}

	// end inline asm

$L__BB0_317:
	// begin inline asm
	{add.f16x2 %r7579,%r7579,%r7503;
}
	// end inline asm
	mov.u32 	%r2856, 2;
	mov.u32 	%r2867, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2854,%r7496,%r2856,%r2241,%r2867;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2859,%r7500,%r2854;
}
	// end inline asm
	mov.u32 	%r2865, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2863,%r7496,%r2865,%r2241,%r2867;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2868,%r7501,%r2863;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7505,%r2859,%r2868;
}
	// end inline asm
	mov.u32 	%r7504, %r7505;
	@%p165 bra 	$L__BB0_319;

	mov.f32 	%f336, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f336;
  cvt.rn.f16.f32 high, %f336;
  mov.b32 %r7504, {low,high};}

	// end inline asm

$L__BB0_319:
	// begin inline asm
	{add.f16x2 %r7580,%r7580,%r7504;
}
	// end inline asm
	@%p166 bra 	$L__BB0_321;

	mov.f32 	%f338, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f338;
  cvt.rn.f16.f32 high, %f338;
  mov.b32 %r7505, {low,high};}

	// end inline asm

$L__BB0_321:
	// begin inline asm
	{add.f16x2 %r7578,%r7578,%r7505;
}
	// end inline asm
	mov.u32 	%r2889, 4;
	mov.u32 	%r2900, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2887,%r7496,%r2889,%r2241,%r2900;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2892,%r7500,%r2887;
}
	// end inline asm
	mov.u32 	%r2898, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2896,%r7496,%r2898,%r2241,%r2900;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2901,%r7501,%r2896;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7507,%r2892,%r2901;
}
	// end inline asm
	mov.u32 	%r7506, %r7507;
	@%p165 bra 	$L__BB0_323;

	mov.f32 	%f340, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f340;
  mov.b32 %r7506, {low,high};}

	// end inline asm

$L__BB0_323:
	// begin inline asm
	{add.f16x2 %r7577,%r7577,%r7506;
}
	// end inline asm
	@%p166 bra 	$L__BB0_325;

	mov.f32 	%f342, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f342;
  cvt.rn.f16.f32 high, %f342;
  mov.b32 %r7507, {low,high};}

	// end inline asm

$L__BB0_325:
	// begin inline asm
	{add.f16x2 %r7576,%r7576,%r7507;
}
	// end inline asm
	mov.u32 	%r2922, 6;
	mov.u32 	%r2933, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2920,%r7496,%r2922,%r2241,%r2933;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2925,%r7500,%r2920;
}
	// end inline asm
	mov.u32 	%r2931, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2929,%r7496,%r2931,%r2241,%r2933;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2934,%r7501,%r2929;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7509,%r2925,%r2934;
}
	// end inline asm
	mov.u32 	%r7508, %r7509;
	@%p165 bra 	$L__BB0_327;

	mov.f32 	%f344, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f344;
  cvt.rn.f16.f32 high, %f344;
  mov.b32 %r7508, {low,high};}

	// end inline asm

$L__BB0_327:
	// begin inline asm
	{add.f16x2 %r7575,%r7575,%r7508;
}
	// end inline asm
	@%p166 bra 	$L__BB0_329;

	mov.f32 	%f346, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f346;
  cvt.rn.f16.f32 high, %f346;
  mov.b32 %r7509, {low,high};}

	// end inline asm

$L__BB0_329:
	// begin inline asm
	{add.f16x2 %r7573,%r7573,%r7509;
}
	// end inline asm
	mov.u32 	%r2955, 8;
	mov.u32 	%r2966, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2953,%r7496,%r2955,%r2241,%r2966;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2958,%r7500,%r2953;
}
	// end inline asm
	mov.u32 	%r2964, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2962,%r7496,%r2964,%r2241,%r2966;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2967,%r7501,%r2962;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7511,%r2958,%r2967;
}
	// end inline asm
	mov.u32 	%r7510, %r7511;
	@%p165 bra 	$L__BB0_331;

	mov.f32 	%f348, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f348;
  cvt.rn.f16.f32 high, %f348;
  mov.b32 %r7510, {low,high};}

	// end inline asm

$L__BB0_331:
	// begin inline asm
	{add.f16x2 %r7574,%r7574,%r7510;
}
	// end inline asm
	@%p166 bra 	$L__BB0_333;

	mov.f32 	%f350, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f350;
  cvt.rn.f16.f32 high, %f350;
  mov.b32 %r7511, {low,high};}

	// end inline asm

$L__BB0_333:
	// begin inline asm
	{add.f16x2 %r7572,%r7572,%r7511;
}
	// end inline asm
	mov.u32 	%r2988, 10;
	mov.u32 	%r2999, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2986,%r7496,%r2988,%r2241,%r2999;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2991,%r7500,%r2986;
}
	// end inline asm
	mov.u32 	%r2997, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2995,%r7496,%r2997,%r2241,%r2999;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3000,%r7501,%r2995;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7513,%r2991,%r3000;
}
	// end inline asm
	mov.u32 	%r7512, %r7513;
	@%p165 bra 	$L__BB0_335;

	mov.f32 	%f352, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f352;
  cvt.rn.f16.f32 high, %f352;
  mov.b32 %r7512, {low,high};}

	// end inline asm

$L__BB0_335:
	// begin inline asm
	{add.f16x2 %r7571,%r7571,%r7512;
}
	// end inline asm
	@%p166 bra 	$L__BB0_337;

	mov.f32 	%f354, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f354;
  cvt.rn.f16.f32 high, %f354;
  mov.b32 %r7513, {low,high};}

	// end inline asm

$L__BB0_337:
	// begin inline asm
	{add.f16x2 %r7568,%r7568,%r7513;
}
	// end inline asm
	mov.u32 	%r3021, 12;
	mov.u32 	%r3032, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3019,%r7496,%r3021,%r2241,%r3032;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3024,%r7500,%r3019;
}
	// end inline asm
	mov.u32 	%r3030, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r3028,%r7496,%r3030,%r2241,%r3032;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3033,%r7501,%r3028;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7515,%r3024,%r3033;
}
	// end inline asm
	mov.u32 	%r7514, %r7515;
	@%p165 bra 	$L__BB0_339;

	mov.f32 	%f356, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f356;
  cvt.rn.f16.f32 high, %f356;
  mov.b32 %r7514, {low,high};}

	// end inline asm

$L__BB0_339:
	// begin inline asm
	{add.f16x2 %r7570,%r7570,%r7514;
}
	// end inline asm
	@%p166 bra 	$L__BB0_341;

	mov.f32 	%f358, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f358;
  cvt.rn.f16.f32 high, %f358;
  mov.b32 %r7515, {low,high};}

	// end inline asm

$L__BB0_341:
	// begin inline asm
	{add.f16x2 %r7567,%r7567,%r7515;
}
	// end inline asm
	mov.u32 	%r3054, 14;
	mov.u32 	%r3065, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3052,%r7496,%r3054,%r2241,%r3065;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3057,%r7500,%r3052;
}
	// end inline asm
	mov.u32 	%r3063, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r3061,%r7496,%r3063,%r2241,%r3065;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3066,%r7501,%r3061;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7517,%r3057,%r3066;
}
	// end inline asm
	mov.u32 	%r7516, %r7517;
	@%p165 bra 	$L__BB0_343;

	mov.f32 	%f360, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f360;
  cvt.rn.f16.f32 high, %f360;
  mov.b32 %r7516, {low,high};}

	// end inline asm

$L__BB0_343:
	// begin inline asm
	{add.f16x2 %r7565,%r7565,%r7516;
}
	// end inline asm
	@%p166 bra 	$L__BB0_345;

	mov.f32 	%f362, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f362;
  cvt.rn.f16.f32 high, %f362;
  mov.b32 %r7517, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r7562,%r7562,%r7517;
}
	// end inline asm
	mov.u32 	%r3087, 16;
	mov.u32 	%r3098, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3085,%r7496,%r3087,%r2241,%r3098;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3090,%r7500,%r3085;
}
	// end inline asm
	mov.u32 	%r3096, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r3094,%r7496,%r3096,%r2241,%r3098;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3099,%r7501,%r3094;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7519,%r3090,%r3099;
}
	// end inline asm
	mov.u32 	%r7518, %r7519;
	@%p165 bra 	$L__BB0_347;

	mov.f32 	%f364, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f364;
  cvt.rn.f16.f32 high, %f364;
  mov.b32 %r7518, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r7564,%r7564,%r7518;
}
	// end inline asm
	@%p166 bra 	$L__BB0_349;

	mov.f32 	%f366, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f366;
  cvt.rn.f16.f32 high, %f366;
  mov.b32 %r7519, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r7561,%r7561,%r7519;
}
	// end inline asm
	mov.u32 	%r3120, 18;
	mov.u32 	%r3131, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3118,%r7496,%r3120,%r2241,%r3131;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3123,%r7500,%r3118;
}
	// end inline asm
	mov.u32 	%r3129, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r3127,%r7496,%r3129,%r2241,%r3131;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3132,%r7501,%r3127;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7521,%r3123,%r3132;
}
	// end inline asm
	mov.u32 	%r7520, %r7521;
	@%p165 bra 	$L__BB0_351;

	mov.f32 	%f368, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f368;
  cvt.rn.f16.f32 high, %f368;
  mov.b32 %r7520, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r7559,%r7559,%r7520;
}
	// end inline asm
	@%p166 bra 	$L__BB0_353;

	mov.f32 	%f370, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f370;
  cvt.rn.f16.f32 high, %f370;
  mov.b32 %r7521, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r7558,%r7558,%r7521;
}
	// end inline asm
	mov.u32 	%r3153, 20;
	mov.u32 	%r3164, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3151,%r7496,%r3153,%r2241,%r3164;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3156,%r7500,%r3151;
}
	// end inline asm
	mov.u32 	%r3162, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r3160,%r7496,%r3162,%r2241,%r3164;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3165,%r7501,%r3160;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7523,%r3156,%r3165;
}
	// end inline asm
	mov.u32 	%r7522, %r7523;
	@%p165 bra 	$L__BB0_355;

	mov.f32 	%f372, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f372;
  cvt.rn.f16.f32 high, %f372;
  mov.b32 %r7522, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r7557,%r7557,%r7522;
}
	// end inline asm
	@%p166 bra 	$L__BB0_357;

	mov.f32 	%f374, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f374;
  cvt.rn.f16.f32 high, %f374;
  mov.b32 %r7523, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r7555,%r7555,%r7523;
}
	// end inline asm
	mov.u32 	%r3186, 22;
	mov.u32 	%r3197, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3184,%r7496,%r3186,%r2241,%r3197;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3189,%r7500,%r3184;
}
	// end inline asm
	mov.u32 	%r3195, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r3193,%r7496,%r3195,%r2241,%r3197;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3198,%r7501,%r3193;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7525,%r3189,%r3198;
}
	// end inline asm
	mov.u32 	%r7524, %r7525;
	@%p165 bra 	$L__BB0_359;

	mov.f32 	%f376, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f376;
  cvt.rn.f16.f32 high, %f376;
  mov.b32 %r7524, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r7553,%r7553,%r7524;
}
	// end inline asm
	@%p166 bra 	$L__BB0_361;

	mov.f32 	%f378, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f378;
  cvt.rn.f16.f32 high, %f378;
  mov.b32 %r7525, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r7550,%r7550,%r7525;
}
	// end inline asm
	mov.u32 	%r3219, 24;
	mov.u32 	%r3230, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3217,%r7496,%r3219,%r2241,%r3230;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3222,%r7500,%r3217;
}
	// end inline asm
	mov.u32 	%r3228, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r3226,%r7496,%r3228,%r2241,%r3230;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3231,%r7501,%r3226;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7527,%r3222,%r3231;
}
	// end inline asm
	mov.u32 	%r7526, %r7527;
	@%p165 bra 	$L__BB0_363;

	mov.f32 	%f380, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f380;
  cvt.rn.f16.f32 high, %f380;
  mov.b32 %r7526, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r7552,%r7552,%r7526;
}
	// end inline asm
	@%p166 bra 	$L__BB0_365;

	mov.f32 	%f382, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f382;
  cvt.rn.f16.f32 high, %f382;
  mov.b32 %r7527, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r7549,%r7549,%r7527;
}
	// end inline asm
	mov.u32 	%r3252, 26;
	mov.u32 	%r3263, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3250,%r7496,%r3252,%r2241,%r3263;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3255,%r7500,%r3250;
}
	// end inline asm
	mov.u32 	%r3261, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r3259,%r7496,%r3261,%r2241,%r3263;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3264,%r7501,%r3259;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7529,%r3255,%r3264;
}
	// end inline asm
	mov.u32 	%r7528, %r7529;
	@%p165 bra 	$L__BB0_367;

	mov.f32 	%f384, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f384;
  cvt.rn.f16.f32 high, %f384;
  mov.b32 %r7528, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r7547,%r7547,%r7528;
}
	// end inline asm
	@%p166 bra 	$L__BB0_369;

	mov.f32 	%f386, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f386;
  cvt.rn.f16.f32 high, %f386;
  mov.b32 %r7529, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r7544,%r7544,%r7529;
}
	// end inline asm
	mov.u32 	%r3285, 28;
	mov.u32 	%r3296, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3283,%r7496,%r3285,%r2241,%r3296;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3288,%r7500,%r3283;
}
	// end inline asm
	mov.u32 	%r3294, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r3292,%r7496,%r3294,%r2241,%r3296;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3297,%r7501,%r3292;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7531,%r3288,%r3297;
}
	// end inline asm
	mov.u32 	%r7530, %r7531;
	@%p165 bra 	$L__BB0_371;

	mov.f32 	%f388, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f388;
  cvt.rn.f16.f32 high, %f388;
  mov.b32 %r7530, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r7546,%r7546,%r7530;
}
	// end inline asm
	@%p166 bra 	$L__BB0_373;

	mov.f32 	%f390, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f390;
  cvt.rn.f16.f32 high, %f390;
  mov.b32 %r7531, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r7543,%r7543,%r7531;
}
	// end inline asm
	mov.u32 	%r3327, 31;
	mov.u32 	%r3318, 30;
	mov.u32 	%r3329, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3316,%r7496,%r3318,%r2241,%r3329;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3321,%r7500,%r3316;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3325,%r7496,%r3327,%r2241,%r3329;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3330,%r7501,%r3325;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7533,%r3321,%r3330;
}
	// end inline asm
	mov.u32 	%r7532, %r7533;
	@%p165 bra 	$L__BB0_375;

	mov.f32 	%f392, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f392;
  cvt.rn.f16.f32 high, %f392;
  mov.b32 %r7532, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r7539,%r7539,%r7532;
}
	// end inline asm
	@%p166 bra 	$L__BB0_377;

	mov.f32 	%f394, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f394;
  cvt.rn.f16.f32 high, %f394;
  mov.b32 %r7533, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r7537,%r7537,%r7533;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_304:
	mov.f32 	%f322, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7498, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7499, {low,high};}

	// end inline asm

$L__BB0_306:
	setp.eq.s32 	%p158, %r657, %r1742;
	@%p158 bra 	$L__BB0_309;
	bra.uni 	$L__BB0_307;

$L__BB0_309:
	// begin inline asm
	{mul.f16x2 %r2717,%r7498,%r7480;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7581,%r7581,%r2717;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2723,%r7498,%r7478;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7569,%r7569,%r2723;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2729,%r7498,%r7484;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7571,%r7571,%r2729;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2735,%r7498,%r7482;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7551,%r7551,%r2735;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2741,%r7498,%r7488;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7553,%r7553,%r2741;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2747,%r7498,%r7486;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7538,%r7538,%r2747;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2753,%r7499,%r7484;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7575,%r7575,%r2753;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2759,%r7499,%r7482;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7556,%r7556,%r2759;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2765,%r7498,%r7479;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7579,%r7579,%r2765;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2771,%r7498,%r7477;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7566,%r7566,%r2771;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2777,%r7498,%r7483;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7568,%r7568,%r2777;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2783,%r7498,%r7481;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7548,%r7548,%r2783;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2789,%r7498,%r7487;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7550,%r7550,%r2789;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2795,%r7498,%r7485;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7536,%r7536,%r2795;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2801,%r7499,%r7483;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7573,%r7573,%r2801;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2807,%r7499,%r7481;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7554,%r7554,%r2807;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_307:
	add.s32 	%r2620, %r1742, -2;
	setp.ne.s32 	%p159, %r657, %r2620;
	@%p159 bra 	$L__BB0_378;

	// begin inline asm
	{mul.f16x2 %r2621,%r7498,%r7484;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7559,%r7559,%r2621;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2627,%r7498,%r7482;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7541,%r7541,%r2627;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2633,%r7499,%r7480;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7577,%r7577,%r2633;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2639,%r7499,%r7478;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7563,%r7563,%r2639;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2645,%r7499,%r7484;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7565,%r7565,%r2645;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2651,%r7499,%r7482;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7545,%r7545,%r2651;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2657,%r7499,%r7488;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7547,%r7547,%r2657;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2663,%r7499,%r7486;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7535,%r7535,%r2663;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2669,%r7498,%r7483;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7558,%r7558,%r2669;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2675,%r7498,%r7481;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7540,%r7540,%r2675;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2681,%r7499,%r7479;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7576,%r7576,%r2681;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2687,%r7499,%r7477;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7560,%r7560,%r2687;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2693,%r7499,%r7483;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7562,%r7562,%r2693;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2699,%r7499,%r7481;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7542,%r7542,%r2699;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2705,%r7499,%r7487;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7544,%r7544,%r2705;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2711,%r7499,%r7485;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7534,%r7534,%r2711;
}
	// end inline asm

$L__BB0_378:
	setp.lt.s32 	%p197, %r23, 1;
	mov.u32 	%r7678, %r2149;
	mov.u32 	%r7679, %r2149;
	mov.u32 	%r7684, %r2149;
	mov.u32 	%r7685, %r2149;
	mov.u32 	%r7686, %r2149;
	mov.u32 	%r7687, %r2149;
	mov.u32 	%r7688, %r2149;
	mov.u32 	%r7689, %r2149;
	mov.u32 	%r7696, %r2149;
	mov.u32 	%r7697, %r2149;
	@%p197 bra 	$L__BB0_380;

	mul.lo.s32 	%r3348, %r1733, 320;
	add.s32 	%r3349, %r23, -1;
	mul.lo.s32 	%r3350, %r24, 320;
	mad.lo.s32 	%r3351, %r3348, %r3349, %r3350;
	add.s32 	%r3354, %r1788, -64;
	mad.lo.s32 	%r3359, %r3354, %r2137, %r2134;
	add.s32 	%r3360, %r3351, %r3359;
	shl.b32 	%r3361, %r3360, 2;
	mov.u32 	%r3362, _ZN6kernel5shmemE;
	add.s32 	%r3363, %r3362, %r3361;
	shl.b32 	%r3364, %r28, 4;
	add.s32 	%r3365, %r3363, %r3364;
	ld.shared.v4.u32 	{%r7689, %r7687, %r7679, %r7678}, [%r3365];
	shl.b32 	%r3370, %r28, 3;
	add.s32 	%r3371, %r3363, %r3370;
	ld.shared.v2.u32 	{%r7688, %r7686}, [%r3371+512];
	ld.shared.v4.u32 	{%r7697, %r7696, %r7685, %r7684}, [%r3365+768];

$L__BB0_380:
	setp.lt.s32 	%p198, %r24, 1;
	mov.u32 	%r7680, %r2149;
	mov.u32 	%r7681, %r2149;
	mov.u32 	%r7682, %r2149;
	mov.u32 	%r7683, %r2149;
	mov.u32 	%r7690, %r2149;
	mov.u32 	%r7691, %r2149;
	mov.u32 	%r7692, %r2149;
	mov.u32 	%r7693, %r2149;
	mov.u32 	%r7694, %r2149;
	mov.u32 	%r7695, %r2149;
	mov.u32 	%r7698, %r2149;
	mov.u32 	%r7699, %r2149;
	@%p198 bra 	$L__BB0_383;

	mad.lo.s32 	%r3383, %r2213, 384, %r2140;
	add.s32 	%r3386, %r24, -1;
	mad.lo.s32 	%r3387, %r2135, %r3386, %r3383;
	add.s32 	%r3393, %r3387, %r2138;
	shl.b32 	%r3394, %r3393, 2;
	mov.u32 	%r3395, _ZN6kernel5shmemE;
	add.s32 	%r3396, %r3395, %r3394;
	shl.b32 	%r3397, %r28, 4;
	add.s32 	%r3398, %r3396, %r3397;
	ld.shared.v4.u32 	{%r7699, %r7698, %r7694, %r7692}, [%r3398];
	shl.b32 	%r3403, %r28, 3;
	add.s32 	%r3404, %r3396, %r3403;
	ld.shared.v2.u32 	{%r7695, %r7693}, [%r3404+512];
	ld.shared.v4.u32 	{%r7691, %r7690, %r7682, %r7680}, [%r3398+768];
	mov.u32 	%r7681, %r2149;
	mov.u32 	%r7683, %r2149;
	@%p197 bra 	$L__BB0_383;

	add.s32 	%r7221, %r3404, 512;
	ld.shared.v2.u32 	{%r7683, %r7681}, [%r7221+768];

$L__BB0_383:
	setp.eq.s32 	%p200, %r23, 0;
	@%p200 bra 	$L__BB0_388;

	setp.eq.s32 	%p201, %r24, %r2137;
	@%p201 bra 	$L__BB0_386;

	sub.s32 	%r3414, %r1732, %r23;
	mul.lo.s32 	%r3416, %r52, %r24;
	mad.lo.s32 	%r3417, %r3414, 384, %r3416;
	mad.lo.s32 	%r3420, %r2135, %r2137, %r3417;
	mad.lo.s32 	%r3423, %r2133, %r2132, %r3420;
	shl.b32 	%r3424, %r3423, 2;
	mov.u32 	%r3425, _ZN6kernel5shmemE;
	add.s32 	%r3426, %r3425, %r3424;
	shl.b32 	%r3427, %r28, 4;
	add.s32 	%r3428, %r3426, %r3427;
	ld.shared.v4.u32 	{%r7608, %r7611, %r7615, %r7614}, [%r3428];

$L__BB0_386:
	shl.b32 	%r3433, %r24, 8;
	shl.b32 	%r3437, %r1733, 8;
	or.b32  	%r3438, %r3437, 128;
	add.s32 	%r3439, %r23, -1;
	mad.lo.s32 	%r3440, %r3438, %r3439, %r2140;
	add.s32 	%r3441, %r3440, %r3433;
	shl.b32 	%r3442, %r3441, 2;
	mov.u32 	%r3443, _ZN6kernel5shmemE;
	add.s32 	%r3444, %r3443, %r3442;
	setp.ne.s32 	%p202, %r24, %r2137;
	shl.b32 	%r3446, %r28, 4;
	add.s32 	%r916, %r3444, %r3446;
	ld.shared.v4.u32 	{%r7617, %r7619, %r7616, %r7618}, [%r916];
	ld.shared.v4.u32 	{%r7613, %r7610, %r7609, %r7612}, [%r916+512];
	@%p202 bra 	$L__BB0_388;

	ld.shared.v4.u32 	{%r7608, %r7611, %r7615, %r7614}, [%r916+1024];

$L__BB0_388:
	setp.eq.s32 	%p203, %r24, 0;
	@%p203 bra 	$L__BB0_391;

	mul.lo.s32 	%r3460, %r52, %r24;
	sub.s32 	%r3461, %r3460, %r52;
	mad.lo.s32 	%r3464, %r2213, 384, %r3461;
	mad.lo.s32 	%r3467, %r2135, %r2137, %r3464;
	mad.lo.s32 	%r3470, %r2133, %r2132, %r3467;
	shl.b32 	%r3471, %r3470, 2;
	mov.u32 	%r3472, _ZN6kernel5shmemE;
	add.s32 	%r3473, %r3472, %r3471;
	shl.b32 	%r3474, %r28, 4;
	add.s32 	%r941, %r3473, %r3474;
	ld.shared.v4.u32 	{%r7628, %r7627, %r7632, %r7630}, [%r941];
	ld.shared.v4.u32 	{%r7626, %r7623, %r7620, %r7621}, [%r941+512];
	ld.shared.v4.u32 	{%r7625, %r7622, %r7624, %r7631}, [%r941+1024];
	@%p200 bra 	$L__BB0_391;

	ld.shared.v4.u32 	{%r7634, %r7635, %r7629, %r7633}, [%r941+1536];

$L__BB0_391:
	setp.ne.s32 	%p205, %r23, 0;
	@%p205 bra 	$L__BB0_396;

	ld.param.u64 	%rd549, [%rd1+56];
	cvta.to.global.u64 	%rd548, %rd549;
	mad.lo.s32 	%r3492, %r654, %r1735, %r26;
	mul.lo.s32 	%r3493, %r1733, %r3492;
	mul.lo.s32 	%r3494, %r3493, 768;
	mad.lo.s32 	%r3495, %r24, 384, %r3494;
	add.s32 	%r3496, %r3495, -64;
	mul.wide.s32 	%rd271, %r3496, 4;
	add.s64 	%rd272, %rd548, %rd271;
	add.s64 	%rd274, %rd272, %rd273;
	ld.global.v4.u32 	{%r7643, %r7641, %r7650, %r7651}, [%rd274+256];
	ld.global.v4.u32 	{%r7649, %r7646, %r7638, %r7639}, [%rd274+1024];
	add.s64 	%rd27, %rd272, %rd275;
	@%p203 bra 	$L__BB0_394;

	ld.global.v2.u32 	{%r7644, %r7647}, [%rd27];

$L__BB0_394:
	setp.ne.s32 	%p207, %r24, %r2137;
	ld.global.v2.u32 	{%r7642, %r7640}, [%rd27+768];
	@%p207 bra 	$L__BB0_396;

	ld.global.v2.u32 	{%r7648, %r7645}, [%rd27+1536];

$L__BB0_396:
	setp.ne.s32 	%p208, %r24, 0;
	@%p208 bra 	$L__BB0_398;

	ld.param.u64 	%rd551, [%rd1+56];
	cvta.to.global.u64 	%rd550, %rd551;
	mad.lo.s32 	%r3513, %r655, %r1734, %r25;
	mad.lo.s32 	%r3517, %r3513, %r1789, %r412;
	mul.wide.s32 	%rd276, %r3517, 4;
	add.s64 	%rd277, %rd550, %rd276;
	add.s64 	%rd279, %rd277, %rd273;
	ld.global.v4.u32 	{%r7663, %r7662, %r7658, %r7656}, [%rd279+256];
	ld.global.v4.u32 	{%r7653, %r7652, %r7655, %r7661}, [%rd279+1024];
	add.s64 	%rd281, %rd277, %rd275;
	ld.global.v2.u32 	{%r7659, %r7657}, [%rd281+768];
	ld.global.v2.u32 	{%r7644, %r7647}, [%rd281+1536];

$L__BB0_398:
	add.s32 	%r3530, %r1737, -1;
	setp.lt.s32 	%p209, %r656, %r3530;
	setp.gt.s32 	%p210, %r656, 1;
	and.pred  	%p211, %p210, %p209;
	setp.gt.s32 	%p212, %r657, 1;
	and.pred  	%p213, %p211, %p212;
	add.s32 	%r3531, %r1738, -2;
	setp.lt.s32 	%p214, %r657, %r3531;
	and.pred  	%p11, %p214, %p213;
	not.pred 	%p215, %p11;
	@%p215 bra 	$L__BB0_409;

	ld.param.u64 	%rd553, [%rd1+64];
	cvta.to.global.u64 	%rd552, %rd553;
	mad.lo.s32 	%r1036, %r657, %r1737, %r656;
	shl.b32 	%r3532, %r1036, 6;
	mul.wide.s32 	%rd284, %r3532, 4;
	add.s64 	%rd29, %rd552, %rd284;
	and.pred  	%p218, %p205, %p208;
	@%p218 bra 	$L__BB0_401;

	add.s64 	%rd286, %rd29, %rd275;
	ld.global.v2.u32 	{%r7683, %r7681}, [%rd286+256];

$L__BB0_401:
	@%p205 bra 	$L__BB0_403;

	shl.b32 	%r3535, %r1737, 5;
	cvt.s64.s32 	%rd287, %r3535;
	cvt.s64.s32 	%rd288, %r28;
	add.s64 	%rd289, %rd287, %rd288;
	shl.b64 	%rd290, %rd289, 3;
	add.s64 	%rd291, %rd29, %rd290;
	ld.global.v2.u32 	{%r7688, %r7686}, [%rd291];

$L__BB0_403:
	@%p208 bra 	$L__BB0_405;

	shl.b32 	%r3538, %r1737, 5;
	neg.s32 	%r3539, %r3538;
	cvt.s64.s32 	%rd292, %r3539;
	cvt.s64.s32 	%rd293, %r28;
	add.s64 	%rd294, %rd292, %rd293;
	shl.b64 	%rd295, %rd294, 3;
	add.s64 	%rd296, %rd29, %rd295;
	ld.global.v2.u32 	{%r7695, %r7693}, [%rd296];

$L__BB0_405:
	mad.lo.s32 	%r7232, %r657, %r1737, %r656;
	ld.param.u64 	%rd555, [%rd1+64];
	cvta.to.global.u64 	%rd554, %rd555;
	shl.b32 	%r3542, %r1738, 6;
	shl.b32 	%r3543, %r7232, 7;
	mad.lo.s32 	%r3544, %r3542, %r1737, %r3543;
	mul.wide.s32 	%rd297, %r3544, 4;
	add.s64 	%rd30, %rd554, %rd297;
	@%p205 bra 	$L__BB0_407;

	shl.b32 	%r3545, %r1737, 5;
	cvt.s64.s32 	%rd298, %r3545;
	cvt.s64.s32 	%rd299, %r28;
	add.s64 	%rd300, %rd298, %rd299;
	shl.b64 	%rd301, %rd300, 4;
	add.s64 	%rd302, %rd30, %rd301;
	ld.global.v4.u32 	{%r7689, %r7687, %r7679, %r7678}, [%rd302];
	shl.b32 	%r3550, %r1737, 6;
	add.s32 	%r3551, %r3550, -32;
	cvt.s64.s32 	%rd303, %r3551;
	add.s64 	%rd304, %rd303, %rd299;
	shl.b64 	%rd305, %rd304, 4;
	add.s64 	%rd306, %rd30, %rd305;
	ld.global.v4.u32 	{%r7697, %r7696, %r7685, %r7684}, [%rd306];

$L__BB0_407:
	@%p208 bra 	$L__BB0_409;

	shl.b32 	%r3556, %r1737, 5;
	xor.b32  	%r3557, %r3556, -32;
	cvt.s64.s32 	%rd307, %r3557;
	cvt.s64.s32 	%rd308, %r28;
	add.s64 	%rd309, %rd307, %rd308;
	shl.b64 	%rd310, %rd309, 4;
	add.s64 	%rd311, %rd30, %rd310;
	ld.global.v4.u32 	{%r7699, %r7698, %r7694, %r7692}, [%rd311];
	add.s64 	%rd313, %rd30, %rd273;
	ld.global.v4.u32 	{%r7691, %r7690, %r7682, %r7680}, [%rd313];

$L__BB0_409:
	mov.u32 	%r3571, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3567,%r7443,%r415,%r2241,%r3571;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3567;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7443;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3574, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3575,%r7452,%r3574;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3578,%r7323,%r3575;
}
	// end inline asm
	@%p12 bra 	$L__BB0_411;
	bra.uni 	$L__BB0_410;

$L__BB0_411:
	// begin inline asm
	{neg.f16x2 %r7700,%r7581;
}
	// end inline asm
	bra.uni 	$L__BB0_412;

$L__BB0_410:
	// begin inline asm
	{mul.f16x2 %r7700,%r7324,%r3575;
}
	// end inline asm

$L__BB0_412:
	mov.u32 	%r3591, 31;
	mov.u32 	%r3614, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3589,%r7700,%r3591,%r2241,%r3614;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3594,%r3578,%r3589;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3597,%r7451,%r7461;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3600,%r3597,%r3594;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3603,%r7473,%r3600;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3606,%r7581,%r3603;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3610,%r7444,%r415,%r2241,%r3614;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3610;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7444;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3617, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3618,%r7453,%r3617;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3621,%r7323,%r3618;
}
	// end inline asm
	mov.u32 	%r7701, %r7580;
	@%p12 bra 	$L__BB0_414;

	// begin inline asm
	{mul.f16x2 %r7701,%r7324,%r3618;
}
	// end inline asm

$L__BB0_414:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3632,%r7701,%r3591,%r2241,%r3614;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3637,%r3621,%r3632;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3640,%r7451,%r7474;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3643,%r3637,%r3640;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3646,%r7472,%r3643;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3649,%r7580,%r3646;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3652,%r7443,%r7452;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3655,%r7327,%r3652;
}
	// end inline asm
	@%p12 bra 	$L__BB0_416;
	bra.uni 	$L__BB0_415;

$L__BB0_416:
	// begin inline asm
	{neg.f16x2 %r7702,%r7579;
}
	// end inline asm
	bra.uni 	$L__BB0_417;

$L__BB0_415:
	// begin inline asm
	{mul.f16x2 %r7702,%r7328,%r3652;
}
	// end inline asm

$L__BB0_417:
	mov.u32 	%r3668, 31;
	mov.u32 	%r3670, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3666,%r7702,%r3668,%r2241,%r3670;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3671,%r3655,%r3666;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3674,%r7442,%r7458;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3677,%r3674,%r3671;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3680,%r7468,%r3677;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3683,%r7579,%r3680;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3686,%r7444,%r7453;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3689,%r7327,%r3686;
}
	// end inline asm
	mov.u32 	%r7703, %r7578;
	@%p12 bra 	$L__BB0_419;

	// begin inline asm
	{mul.f16x2 %r7703,%r7328,%r3686;
}
	// end inline asm

$L__BB0_419:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3698,%r7703,%r3668,%r2241,%r3670;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3703,%r3689,%r3698;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3706,%r7442,%r7469;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3709,%r3703,%r3706;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3712,%r7467,%r3709;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3715,%r7578,%r3712;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3719,%r7427,%r415,%r2241,%r3670;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3719;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7427;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3726, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3727,%r7435,%r3726;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3730,%r7323,%r3727;
}
	// end inline asm
	@%p12 bra 	$L__BB0_421;
	bra.uni 	$L__BB0_420;

$L__BB0_421:
	// begin inline asm
	{neg.f16x2 %r7704,%r7577;
}
	// end inline asm
	bra.uni 	$L__BB0_422;

$L__BB0_420:
	// begin inline asm
	{mul.f16x2 %r7704,%r7324,%r3727;
}
	// end inline asm

$L__BB0_422:
	mov.u32 	%r3745, 31;
	mov.u32 	%r3747, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3743,%r7704,%r3745,%r2241,%r3747;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3748,%r3730,%r3743;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3751,%r7434,%r7451;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3754,%r3751,%r3748;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3757,%r7465,%r3754;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3760,%r7577,%r3757;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3763,%r7427,%r7435;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3766,%r7327,%r3763;
}
	// end inline asm
	@%p12 bra 	$L__BB0_424;
	bra.uni 	$L__BB0_423;

$L__BB0_424:
	// begin inline asm
	{neg.f16x2 %r7705,%r7576;
}
	// end inline asm
	bra.uni 	$L__BB0_425;

$L__BB0_423:
	// begin inline asm
	{mul.f16x2 %r7705,%r7328,%r3763;
}
	// end inline asm

$L__BB0_425:
	mov.u32 	%r3779, 31;
	mov.u32 	%r3802, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3777,%r7705,%r3779,%r2241,%r3802;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3782,%r3766,%r3777;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3785,%r7426,%r7442;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3788,%r3785,%r3782;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3791,%r7463,%r3788;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3794,%r7576,%r3791;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3798,%r7411,%r415,%r2241,%r3802;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3798;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7411;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3805, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3806,%r7416,%r3805;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3809,%r7323,%r3806;
}
	// end inline asm
	@%p12 bra 	$L__BB0_427;
	bra.uni 	$L__BB0_426;

$L__BB0_427:
	// begin inline asm
	{neg.f16x2 %r7706,%r7575;
}
	// end inline asm
	bra.uni 	$L__BB0_428;

$L__BB0_426:
	// begin inline asm
	{mul.f16x2 %r7706,%r7324,%r3806;
}
	// end inline asm

$L__BB0_428:
	mov.u32 	%r3824, 31;
	mov.u32 	%r3847, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3822,%r7706,%r3824,%r2241,%r3847;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3827,%r3809,%r3822;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3830,%r7415,%r7632;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3833,%r3830,%r3827;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3836,%r7699,%r3833;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3839,%r7575,%r3836;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3843,%r7412,%r415,%r2241,%r3847;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3843;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7412;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3850, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3851,%r7417,%r3850;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3854,%r7323,%r3851;
}
	// end inline asm
	mov.u32 	%r7707, %r7574;
	@%p12 bra 	$L__BB0_430;

	// begin inline asm
	{mul.f16x2 %r7707,%r7324,%r3851;
}
	// end inline asm

$L__BB0_430:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3865,%r7707,%r3824,%r2241,%r3847;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3870,%r3854,%r3865;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3873,%r7415,%r7461;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3876,%r3870,%r3873;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3879,%r7460,%r3876;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3882,%r7574,%r3879;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3885,%r7411,%r7416;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3888,%r7327,%r3885;
}
	// end inline asm
	@%p12 bra 	$L__BB0_432;
	bra.uni 	$L__BB0_431;

$L__BB0_432:
	// begin inline asm
	{neg.f16x2 %r7708,%r7573;
}
	// end inline asm
	bra.uni 	$L__BB0_433;

$L__BB0_431:
	// begin inline asm
	{mul.f16x2 %r7708,%r7328,%r3885;
}
	// end inline asm

$L__BB0_433:
	mov.u32 	%r3901, 31;
	mov.u32 	%r3903, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3899,%r7708,%r3901,%r2241,%r3903;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3904,%r3888,%r3899;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3907,%r7410,%r7630;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3910,%r3907,%r3904;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3913,%r7698,%r3910;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3916,%r7573,%r3913;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3919,%r7412,%r7417;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3922,%r7327,%r3919;
}
	// end inline asm
	mov.u32 	%r7709, %r7572;
	@%p12 bra 	$L__BB0_435;

	// begin inline asm
	{mul.f16x2 %r7709,%r7328,%r3919;
}
	// end inline asm

$L__BB0_435:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3931,%r7709,%r3901,%r2241,%r3903;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3936,%r3922,%r3931;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3939,%r7410,%r7458;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3942,%r3936,%r3939;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3945,%r7457,%r3942;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3948,%r7572,%r3945;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3952,%r7399,%r415,%r2241,%r3903;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3952;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7399;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3959, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3960,%r7406,%r3959;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3963,%r7323,%r3960;
}
	// end inline asm
	@%p12 bra 	$L__BB0_437;
	bra.uni 	$L__BB0_436;

$L__BB0_437:
	// begin inline asm
	{neg.f16x2 %r7710,%r7571;
}
	// end inline asm
	bra.uni 	$L__BB0_438;

$L__BB0_436:
	// begin inline asm
	{mul.f16x2 %r7710,%r7324,%r3960;
}
	// end inline asm

$L__BB0_438:
	mov.u32 	%r3978, 31;
	mov.u32 	%r4001, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3976,%r7710,%r3978,%r2241,%r4001;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3981,%r3963,%r3976;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3984,%r7405,%r7415;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3987,%r3984,%r3981;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3990,%r554,%r3987;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7476,%r7571,%r3990;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3997,%r7400,%r415,%r2241,%r4001;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3997;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7400;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4004, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4005,%r7407,%r4004;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4008,%r7323,%r4005;
}
	// end inline asm
	mov.u32 	%r7711, %r7570;
	@%p12 bra 	$L__BB0_440;

	// begin inline asm
	{mul.f16x2 %r7711,%r7324,%r4005;
}
	// end inline asm

$L__BB0_440:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4019,%r7711,%r3978,%r2241,%r4001;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4024,%r4008,%r4019;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4027,%r7405,%r7451;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4030,%r4024,%r4027;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4033,%r553,%r4030;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7475,%r7570,%r4033;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4039,%r7406,%r7452;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4042,%r7407,%r7417;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4045,%r4039,%r4042;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4048,%r7448,%r4045;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4051,%r7569,%r4048;
}
	// end inline asm
	@%p12 bra 	$L__BB0_442;

	mov.u32 	%r7569, %r4051;

$L__BB0_442:
	// begin inline asm
	{sub.f16x2 %r4056,%r7399,%r7406;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4059,%r7327,%r4056;
}
	// end inline asm
	@%p12 bra 	$L__BB0_444;
	bra.uni 	$L__BB0_443;

$L__BB0_444:
	// begin inline asm
	{neg.f16x2 %r7713,%r7568;
}
	// end inline asm
	bra.uni 	$L__BB0_445;

$L__BB0_443:
	// begin inline asm
	{mul.f16x2 %r7713,%r7328,%r4056;
}
	// end inline asm

$L__BB0_445:
	mov.u32 	%r4070, 31;
	mov.u32 	%r4072, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4068,%r7713,%r4070,%r2241,%r4072;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4073,%r4059,%r4068;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4076,%r7398,%r7410;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4079,%r4076,%r4073;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4082,%r545,%r4079;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7471,%r7568,%r4082;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4088,%r7400,%r7407;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4091,%r7327,%r4088;
}
	// end inline asm
	mov.u32 	%r7714, %r7567;
	@%p12 bra 	$L__BB0_447;

	// begin inline asm
	{mul.f16x2 %r7714,%r7328,%r4088;
}
	// end inline asm

$L__BB0_447:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4100,%r7714,%r4070,%r2241,%r4072;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4105,%r4091,%r4100;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4108,%r7398,%r7442;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4111,%r4105,%r4108;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4114,%r544,%r4111;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7470,%r7567,%r4114;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4120,%r7399,%r7443;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4123,%r7400,%r7412;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4126,%r4120,%r4123;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4129,%r7439,%r4126;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4132,%r7566,%r4129;
}
	// end inline asm
	@%p12 bra 	$L__BB0_449;

	mov.u32 	%r7566, %r4132;

$L__BB0_449:
	mov.u32 	%r4142, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4138,%r7388,%r415,%r2241,%r4142;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4138;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7388;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4145, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4146,%r7393,%r4145;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4149,%r7323,%r4146;
}
	// end inline asm
	@%p12 bra 	$L__BB0_451;
	bra.uni 	$L__BB0_450;

$L__BB0_451:
	// begin inline asm
	{neg.f16x2 %r7716,%r7565;
}
	// end inline asm
	bra.uni 	$L__BB0_452;

$L__BB0_450:
	// begin inline asm
	{mul.f16x2 %r7716,%r7324,%r4146;
}
	// end inline asm

$L__BB0_452:
	mov.u32 	%r4162, 31;
	mov.u32 	%r4185, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4160,%r7716,%r4162,%r2241,%r4185;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4165,%r4149,%r4160;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4168,%r7392,%r7405;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4171,%r4168,%r4165;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4174,%r537,%r4171;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7466,%r7565,%r4174;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4181,%r7389,%r415,%r2241,%r4185;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4181;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7389;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4188, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4189,%r7394,%r4188;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4192,%r7323,%r4189;
}
	// end inline asm
	mov.u32 	%r7717, %r7564;
	@%p12 bra 	$L__BB0_454;

	// begin inline asm
	{mul.f16x2 %r7717,%r7324,%r4189;
}
	// end inline asm

$L__BB0_454:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4203,%r7717,%r4162,%r2241,%r4185;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4208,%r4192,%r4203;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4211,%r7392,%r7434;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4214,%r4208,%r4211;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4217,%r7432,%r4214;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4220,%r7564,%r4217;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4223,%r7393,%r7435;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4226,%r7394,%r7407;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4229,%r4223,%r4226;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4232,%r7431,%r4229;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4235,%r7563,%r4232;
}
	// end inline asm
	@%p12 bra 	$L__BB0_456;

	mov.u32 	%r7563, %r4235;

$L__BB0_456:
	// begin inline asm
	{sub.f16x2 %r4240,%r7388,%r7393;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4243,%r7327,%r4240;
}
	// end inline asm
	@%p12 bra 	$L__BB0_458;
	bra.uni 	$L__BB0_457;

$L__BB0_458:
	// begin inline asm
	{neg.f16x2 %r7719,%r7562;
}
	// end inline asm
	bra.uni 	$L__BB0_459;

$L__BB0_457:
	// begin inline asm
	{mul.f16x2 %r7719,%r7328,%r4240;
}
	// end inline asm

$L__BB0_459:
	mov.u32 	%r4254, 31;
	mov.u32 	%r4256, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4252,%r7719,%r4254,%r2241,%r4256;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4257,%r4243,%r4252;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4260,%r7387,%r7398;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4263,%r4260,%r4257;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4266,%r529,%r4263;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7464,%r7562,%r4266;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4272,%r7389,%r7394;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4275,%r7327,%r4272;
}
	// end inline asm
	mov.u32 	%r7720, %r7561;
	@%p12 bra 	$L__BB0_461;

	// begin inline asm
	{mul.f16x2 %r7720,%r7328,%r4272;
}
	// end inline asm

$L__BB0_461:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4284,%r7720,%r4254,%r2241,%r4256;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4289,%r4275,%r4284;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4292,%r7387,%r7426;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4295,%r4289,%r4292;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4298,%r7424,%r4295;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4301,%r7561,%r4298;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4304,%r7388,%r7427;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4307,%r7389,%r7400;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4310,%r4304,%r4307;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4313,%r7423,%r4310;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4316,%r7560,%r4313;
}
	// end inline asm
	@%p12 bra 	$L__BB0_463;

	mov.u32 	%r7560, %r4316;

$L__BB0_463:
	mov.u32 	%r4326, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4322,%r7379,%r415,%r2241,%r4326;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4322;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7379;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4329, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4330,%r7383,%r4329;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4333,%r7323,%r4330;
}
	// end inline asm
	@%p12 bra 	$L__BB0_465;
	bra.uni 	$L__BB0_464;

$L__BB0_465:
	// begin inline asm
	{neg.f16x2 %r7722,%r7559;
}
	// end inline asm
	bra.uni 	$L__BB0_466;

$L__BB0_464:
	// begin inline asm
	{mul.f16x2 %r7722,%r7324,%r4330;
}
	// end inline asm

$L__BB0_466:
	mov.u32 	%r4346, 31;
	mov.u32 	%r4348, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4344,%r7722,%r4346,%r2241,%r4348;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4349,%r4333,%r4344;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4352,%r7615,%r7392;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4355,%r4352,%r4349;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4358,%r7697,%r4355;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4361,%r7559,%r4358;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4364,%r7379,%r7383;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4367,%r7327,%r4364;
}
	// end inline asm
	@%p12 bra 	$L__BB0_468;
	bra.uni 	$L__BB0_467;

$L__BB0_468:
	// begin inline asm
	{neg.f16x2 %r7723,%r7558;
}
	// end inline asm
	bra.uni 	$L__BB0_469;

$L__BB0_467:
	// begin inline asm
	{mul.f16x2 %r7723,%r7328,%r4364;
}
	// end inline asm

$L__BB0_469:
	mov.u32 	%r4380, 31;
	mov.u32 	%r4403, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4378,%r7723,%r4380,%r2241,%r4403;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4383,%r4367,%r4378;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4386,%r7614,%r7387;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4389,%r4386,%r4383;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4392,%r7696,%r4389;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4395,%r7558,%r4392;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4399,%r7365,%r415,%r2241,%r4403;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4399;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7365;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4406, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4407,%r7372,%r4406;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4410,%r7323,%r4407;
}
	// end inline asm
	mov.u32 	%r7724, %r7557;
	@%p12 bra 	$L__BB0_471;

	// begin inline asm
	{mul.f16x2 %r7724,%r7324,%r4407;
}
	// end inline asm

$L__BB0_471:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4421,%r7724,%r4380,%r2241,%r4403;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4426,%r4410,%r4421;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4429,%r7625,%r7415;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4432,%r4426,%r4429;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4435,%r7695,%r4432;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7462,%r7557,%r4435;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4441,%r7626,%r7416;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4444,%r7372,%r7628;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4447,%r4441,%r4444;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4450,%r7694,%r4447;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4453,%r7556,%r4450;
}
	// end inline asm
	@%p12 bra 	$L__BB0_473;

	mov.u32 	%r7556, %r4453;

$L__BB0_473:
	// begin inline asm
	{sub.f16x2 %r4458,%r7365,%r7372;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4461,%r7327,%r4458;
}
	// end inline asm
	mov.u32 	%r7726, %r7555;
	@%p12 bra 	$L__BB0_475;

	// begin inline asm
	{mul.f16x2 %r7726,%r7328,%r4458;
}
	// end inline asm

$L__BB0_475:
	mov.u32 	%r4470, 31;
	mov.u32 	%r4472, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4468,%r7726,%r4470,%r2241,%r4472;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4473,%r4461,%r4468;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4476,%r7622,%r7410;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4479,%r4473,%r4476;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4482,%r7693,%r4479;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7459,%r7555,%r4482;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4488,%r7623,%r7411;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4491,%r7365,%r7627;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4494,%r4488,%r4491;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4497,%r7692,%r4494;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4500,%r7554,%r4497;
}
	// end inline asm
	@%p12 bra 	$L__BB0_477;

	mov.u32 	%r7554, %r4500;

$L__BB0_477:
	// begin inline asm
	{shfl.sync.idx.b32 %r4506,%r7351,%r415,%r2241,%r4472;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4506;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7351;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4513, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4514,%r7358,%r4513;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4517,%r7323,%r4514;
}
	// end inline asm
	@%p12 bra 	$L__BB0_479;
	bra.uni 	$L__BB0_478;

$L__BB0_479:
	// begin inline asm
	{neg.f16x2 %r7728,%r7553;
}
	// end inline asm
	bra.uni 	$L__BB0_480;

$L__BB0_478:
	// begin inline asm
	{mul.f16x2 %r7728,%r7324,%r4514;
}
	// end inline asm

$L__BB0_480:
	mov.u32 	%r4530, 31;
	mov.u32 	%r4553, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4528,%r7728,%r4530,%r2241,%r4553;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4533,%r4517,%r4528;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4536,%r7357,%r7625;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4539,%r4536,%r4533;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4542,%r7691,%r4539;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7456,%r7553,%r4542;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4549,%r7352,%r415,%r2241,%r4553;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4549;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7352;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4556, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4557,%r7359,%r4556;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4560,%r7323,%r4557;
}
	// end inline asm
	mov.u32 	%r7729, %r7552;
	@%p12 bra 	$L__BB0_482;

	// begin inline asm
	{mul.f16x2 %r7729,%r7324,%r4557;
}
	// end inline asm

$L__BB0_482:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4571,%r7729,%r4530,%r2241,%r4553;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4576,%r4560,%r4571;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4579,%r7357,%r7405;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4582,%r4576,%r4579;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4585,%r7449,%r4582;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7455,%r7552,%r4585;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4591,%r7358,%r7406;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4594,%r7359,%r7372;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4597,%r4591,%r4594;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4600,%r499,%r4597;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4603,%r7551,%r4600;
}
	// end inline asm
	@%p12 bra 	$L__BB0_484;

	mov.u32 	%r7551, %r4603;

$L__BB0_484:
	// begin inline asm
	{sub.f16x2 %r4608,%r7351,%r7358;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4611,%r7327,%r4608;
}
	// end inline asm
	@%p12 bra 	$L__BB0_486;
	bra.uni 	$L__BB0_485;

$L__BB0_486:
	// begin inline asm
	{neg.f16x2 %r7731,%r7550;
}
	// end inline asm
	bra.uni 	$L__BB0_487;

$L__BB0_485:
	// begin inline asm
	{mul.f16x2 %r7731,%r7328,%r4608;
}
	// end inline asm

$L__BB0_487:
	mov.u32 	%r4622, 31;
	mov.u32 	%r4624, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4620,%r7731,%r4622,%r2241,%r4624;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4625,%r4611,%r4620;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4628,%r7350,%r7622;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4631,%r4628,%r4625;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4634,%r7690,%r4631;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7447,%r7550,%r4634;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4640,%r7352,%r7359;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4643,%r7327,%r4640;
}
	// end inline asm
	mov.u32 	%r7732, %r7549;
	@%p12 bra 	$L__BB0_489;

	// begin inline asm
	{mul.f16x2 %r7732,%r7328,%r4640;
}
	// end inline asm

$L__BB0_489:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4652,%r7732,%r4622,%r2241,%r4624;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4657,%r4643,%r4652;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4660,%r7350,%r7398;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4663,%r4657,%r4660;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4666,%r7440,%r4663;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7446,%r7549,%r4666;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4672,%r7351,%r7399;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4675,%r7352,%r7365;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4678,%r4672,%r4675;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4681,%r491,%r4678;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4684,%r7548,%r4681;
}
	// end inline asm
	@%p12 bra 	$L__BB0_491;

	mov.u32 	%r7548, %r4684;

$L__BB0_491:
	mov.u32 	%r4694, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4690,%r7336,%r415,%r2241,%r4694;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4690;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7336;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4697, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4698,%r7344,%r4697;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4701,%r7323,%r4698;
}
	// end inline asm
	@%p12 bra 	$L__BB0_493;
	bra.uni 	$L__BB0_492;

$L__BB0_493:
	// begin inline asm
	{neg.f16x2 %r7734,%r7547;
}
	// end inline asm
	bra.uni 	$L__BB0_494;

$L__BB0_492:
	// begin inline asm
	{mul.f16x2 %r7734,%r7324,%r4698;
}
	// end inline asm

$L__BB0_494:
	mov.u32 	%r4714, 31;
	mov.u32 	%r4737, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4712,%r7734,%r4714,%r2241,%r4737;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4717,%r4701,%r4712;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4720,%r7613,%r7357;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4723,%r4720,%r4717;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4726,%r7689,%r4723;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7438,%r7547,%r4726;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4733,%r7337,%r415,%r2241,%r4737;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4733;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7337;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4740, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4741,%r7345,%r4740;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4744,%r7323,%r4741;
}
	// end inline asm
	mov.u32 	%r7735, %r7546;
	@%p12 bra 	$L__BB0_496;

	// begin inline asm
	{mul.f16x2 %r7735,%r7324,%r4741;
}
	// end inline asm

$L__BB0_496:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4755,%r7735,%r4714,%r2241,%r4737;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4760,%r4744,%r4755;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4763,%r7613,%r7392;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4766,%r4760,%r4763;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4769,%r7688,%r4766;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7437,%r7546,%r4769;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4775,%r7344,%r7393;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4778,%r7345,%r7359;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4781,%r4775,%r4778;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4784,%r484,%r4781;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4787,%r7545,%r4784;
}
	// end inline asm
	@%p12 bra 	$L__BB0_498;

	mov.u32 	%r7545, %r4787;

$L__BB0_498:
	// begin inline asm
	{sub.f16x2 %r4792,%r7336,%r7344;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4795,%r7327,%r4792;
}
	// end inline asm
	@%p12 bra 	$L__BB0_500;
	bra.uni 	$L__BB0_499;

$L__BB0_500:
	// begin inline asm
	{neg.f16x2 %r7737,%r7544;
}
	// end inline asm
	bra.uni 	$L__BB0_501;

$L__BB0_499:
	// begin inline asm
	{mul.f16x2 %r7737,%r7328,%r4792;
}
	// end inline asm

$L__BB0_501:
	mov.u32 	%r4806, 31;
	mov.u32 	%r4808, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4804,%r7737,%r4806,%r2241,%r4808;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4809,%r4795,%r4804;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4812,%r7610,%r7350;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4815,%r4812,%r4809;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4818,%r7687,%r4815;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7430,%r7544,%r4818;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4824,%r7337,%r7345;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4827,%r7327,%r4824;
}
	// end inline asm
	mov.u32 	%r7738, %r7543;
	@%p12 bra 	$L__BB0_503;

	// begin inline asm
	{mul.f16x2 %r7738,%r7328,%r4824;
}
	// end inline asm

$L__BB0_503:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4836,%r7738,%r4806,%r2241,%r4808;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4841,%r4827,%r4836;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4844,%r7610,%r7387;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4847,%r4841,%r4844;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4850,%r7686,%r4847;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7429,%r7543,%r4850;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4856,%r7336,%r7388;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4859,%r7337,%r7352;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4862,%r4856,%r4859;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4865,%r477,%r4862;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4868,%r7542,%r4865;
}
	// end inline asm
	@%p12 bra 	$L__BB0_505;

	mov.u32 	%r7542, %r4868;

$L__BB0_505:
	// begin inline asm
	{sub.f16x2 %r4873,%r7609,%r7383;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4876,%r7608,%r7345;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4879,%r4873,%r4876;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4882,%r7685,%r4879;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4885,%r7541,%r4882;
}
	// end inline asm
	@%p12 bra 	$L__BB0_507;

	mov.u32 	%r7541, %r4885;

$L__BB0_507:
	// begin inline asm
	{sub.f16x2 %r4888,%r7612,%r7379;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4891,%r7611,%r7337;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4894,%r4888,%r4891;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4897,%r7684,%r4894;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4900,%r7540,%r4897;
}
	// end inline asm
	@%p12 bra 	$L__BB0_509;

	mov.u32 	%r7540, %r4900;

$L__BB0_509:
	mov.u32 	%r4908, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4904,%r7414,%r415,%r2241,%r4908;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4904;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7414;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4911, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4912,%r7368,%r4911;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4915,%r7323,%r4912;
}
	// end inline asm
	mov.u32 	%r7742, %r7539;
	@%p12 bra 	$L__BB0_511;

	// begin inline asm
	{mul.f16x2 %r7742,%r7324,%r4912;
}
	// end inline asm

$L__BB0_511:
	mov.u32 	%r4926, 31;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4924,%r7742,%r4926,%r2241,%r4908;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4929,%r4915,%r4924;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4932,%r7629,%r7357;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4935,%r4929,%r4932;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4938,%r7683,%r4935;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7409,%r7539,%r4938;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4944,%r7624,%r7358;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4947,%r7368,%r7620;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4950,%r4944,%r4947;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4953,%r7682,%r4950;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4956,%r7538,%r4953;
}
	// end inline asm
	@%p12 bra 	$L__BB0_513;

	mov.u32 	%r7538, %r4956;

$L__BB0_513:
	// begin inline asm
	{sub.f16x2 %r4961,%r7414,%r7368;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4964,%r7327,%r4961;
}
	// end inline asm
	mov.u32 	%r7744, %r7537;
	@%p12 bra 	$L__BB0_515;

	// begin inline asm
	{mul.f16x2 %r7744,%r7328,%r4961;
}
	// end inline asm

$L__BB0_515:
	mov.u32 	%r4973, 31;
	mov.u32 	%r4975, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4971,%r7744,%r4973,%r2241,%r4975;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4976,%r4964,%r4971;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4979,%r7633,%r7350;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4982,%r4976,%r4979;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4985,%r7681,%r4982;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7402,%r7537,%r4985;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4991,%r7631,%r7351;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4994,%r7414,%r7621;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4997,%r4991,%r4994;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5000,%r7680,%r4997;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5003,%r7536,%r5000;
}
	// end inline asm
	@%p12 bra 	$L__BB0_517;

	mov.u32 	%r7536, %r5003;

$L__BB0_517:
	// begin inline asm
	{sub.f16x2 %r5008,%r7617,%r7344;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5011,%r7616,%r7368;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5014,%r5008,%r5011;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5017,%r7679,%r5014;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5020,%r7535,%r5017;
}
	// end inline asm
	@%p12 bra 	$L__BB0_519;

	mov.u32 	%r7535, %r5020;

$L__BB0_519:
	// begin inline asm
	{sub.f16x2 %r5023,%r7619,%r7336;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5026,%r7618,%r7414;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5029,%r5023,%r5026;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5032,%r7678,%r5029;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5035,%r7534,%r5032;
}
	// end inline asm
	@%p12 bra 	$L__BB0_521;

	mov.u32 	%r7534, %r5035;

$L__BB0_521:
	bar.sync 	0;
	ld.param.u64 	%rd314, [%rd1+136];
	cvta.to.global.u64 	%rd32, %rd314;
	setp.lt.s32 	%p271, %r658, %r1743;
	or.pred  	%p273, %p271, %p215;
	mad.lo.s32 	%r5038, %r1745, %r1744, %r1743;
	setp.ge.s32 	%p274, %r658, %r5038;
	or.pred  	%p275, %p273, %p274;
	@%p275 bra 	$L__BB0_571;

	sub.s32 	%r1303, %r658, %r1743;
	rem.s32 	%r5039, %r1303, %r1744;
	setp.ne.s32 	%p276, %r5039, 0;
	@%p276 bra 	$L__BB0_571;

	div.s32 	%r5040, %r1303, %r1744;
	mul.lo.s32 	%r5041, %r5040, %r1737;
	mul.lo.s32 	%r1304, %r5041, 3;
	add.s32 	%r1305, %r656, -2;
	add.s32 	%r5042, %r1304, %r1305;
	mul.lo.s32 	%r1306, %r5042, %r1738;
	@%p12 bra 	$L__BB0_525;

	add.s32 	%r5047, %r1306, %r657;
	mul.lo.s32 	%r5048, %r5047, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3606;
  cvt.f32.f16 %f395, low;}

	// end inline asm
	add.s32 	%r5049, %r379, %r5048;
	mul.wide.s32 	%rd315, %r5049, 4;
	add.s64 	%rd316, %rd32, %rd315;
	st.global.f32 	[%rd316], %f395;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3606;
  cvt.f32.f16 %f396, high;}

	// end inline asm
	add.s32 	%r5050, %r380, %r5048;
	mul.wide.s32 	%rd317, %r5050, 4;
	add.s64 	%rd318, %rd32, %rd317;
	st.global.f32 	[%rd318], %f396;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3683;
  cvt.f32.f16 %f397, low;}

	// end inline asm
	add.s32 	%r5051, %r393, %r5048;
	mul.wide.s32 	%rd319, %r5051, 4;
	add.s64 	%rd320, %rd32, %rd319;
	st.global.f32 	[%rd320], %f397;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3683;
  cvt.f32.f16 %f398, high;}

	// end inline asm
	add.s32 	%r5052, %r394, %r5048;
	mul.wide.s32 	%rd321, %r5052, 4;
	add.s64 	%rd322, %rd32, %rd321;
	st.global.f32 	[%rd322], %f398;

$L__BB0_525:
	add.s32 	%r1307, %r1304, %r1737;
	@%p12 bra 	$L__BB0_527;

	add.s32 	%r5057, %r1307, %r1305;
	mad.lo.s32 	%r5058, %r5057, %r1738, %r657;
	mul.lo.s32 	%r5059, %r5058, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3649;
  cvt.f32.f16 %f399, low;}

	// end inline asm
	add.s32 	%r5060, %r379, %r5059;
	mul.wide.s32 	%rd323, %r5060, 4;
	add.s64 	%rd324, %rd32, %rd323;
	st.global.f32 	[%rd324], %f399;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3649;
  cvt.f32.f16 %f400, high;}

	// end inline asm
	add.s32 	%r5061, %r380, %r5059;
	mul.wide.s32 	%rd325, %r5061, 4;
	add.s64 	%rd326, %rd32, %rd325;
	st.global.f32 	[%rd326], %f400;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3715;
  cvt.f32.f16 %f401, low;}

	// end inline asm
	add.s32 	%r5062, %r393, %r5059;
	mul.wide.s32 	%rd327, %r5062, 4;
	add.s64 	%rd328, %rd32, %rd327;
	st.global.f32 	[%rd328], %f401;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3715;
  cvt.f32.f16 %f402, high;}

	// end inline asm
	add.s32 	%r5063, %r394, %r5059;
	mul.wide.s32 	%rd329, %r5063, 4;
	add.s64 	%rd330, %rd32, %rd329;
	st.global.f32 	[%rd330], %f402;

$L__BB0_527:
	add.s32 	%r1308, %r657, 1;
	@%p12 bra 	$L__BB0_529;

	add.s32 	%r5068, %r1306, %r1308;
	mul.lo.s32 	%r5069, %r5068, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3760;
  cvt.f32.f16 %f403, low;}

	// end inline asm
	add.s32 	%r5070, %r379, %r5069;
	mul.wide.s32 	%rd331, %r5070, 4;
	add.s64 	%rd332, %rd32, %rd331;
	st.global.f32 	[%rd332], %f403;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3760;
  cvt.f32.f16 %f404, high;}

	// end inline asm
	add.s32 	%r5071, %r380, %r5069;
	mul.wide.s32 	%rd333, %r5071, 4;
	add.s64 	%rd334, %rd32, %rd333;
	st.global.f32 	[%rd334], %f404;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3794;
  cvt.f32.f16 %f405, low;}

	// end inline asm
	add.s32 	%r5072, %r393, %r5069;
	mul.wide.s32 	%rd335, %r5072, 4;
	add.s64 	%rd336, %rd32, %rd335;
	st.global.f32 	[%rd336], %f405;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3794;
  cvt.f32.f16 %f406, high;}

	// end inline asm
	add.s32 	%r5073, %r394, %r5069;
	mul.wide.s32 	%rd337, %r5073, 4;
	add.s64 	%rd338, %rd32, %rd337;
	st.global.f32 	[%rd338], %f406;

$L__BB0_529:
	add.s32 	%r1309, %r656, -1;
	add.s32 	%r5074, %r1304, %r1309;
	mul.lo.s32 	%r1310, %r5074, %r1738;
	add.s32 	%r1311, %r657, -1;
	@%p12 bra 	$L__BB0_531;

	add.s32 	%r5079, %r1310, %r1311;
	mul.lo.s32 	%r5080, %r5079, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3839;
  cvt.f32.f16 %f407, low;}

	// end inline asm
	add.s32 	%r5081, %r379, %r5080;
	mul.wide.s32 	%rd339, %r5081, 4;
	add.s64 	%rd340, %rd32, %rd339;
	st.global.f32 	[%rd340], %f407;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3839;
  cvt.f32.f16 %f408, high;}

	// end inline asm
	add.s32 	%r5082, %r380, %r5080;
	mul.wide.s32 	%rd341, %r5082, 4;
	add.s64 	%rd342, %rd32, %rd341;
	st.global.f32 	[%rd342], %f408;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3916;
  cvt.f32.f16 %f409, low;}

	// end inline asm
	add.s32 	%r5083, %r393, %r5080;
	mul.wide.s32 	%rd343, %r5083, 4;
	add.s64 	%rd344, %rd32, %rd343;
	st.global.f32 	[%rd344], %f409;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3916;
  cvt.f32.f16 %f410, high;}

	// end inline asm
	add.s32 	%r5084, %r394, %r5080;
	mul.wide.s32 	%rd345, %r5084, 4;
	add.s64 	%rd346, %rd32, %rd345;
	st.global.f32 	[%rd346], %f410;

$L__BB0_531:
	add.s32 	%r5085, %r1307, %r1309;
	mul.lo.s32 	%r1312, %r5085, %r1738;
	@%p12 bra 	$L__BB0_533;

	add.s32 	%r5090, %r1312, %r1311;
	mul.lo.s32 	%r5091, %r5090, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3882;
  cvt.f32.f16 %f411, low;}

	// end inline asm
	add.s32 	%r5092, %r379, %r5091;
	mul.wide.s32 	%rd347, %r5092, 4;
	add.s64 	%rd348, %rd32, %rd347;
	st.global.f32 	[%rd348], %f411;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3882;
  cvt.f32.f16 %f412, high;}

	// end inline asm
	add.s32 	%r5093, %r380, %r5091;
	mul.wide.s32 	%rd349, %r5093, 4;
	add.s64 	%rd350, %rd32, %rd349;
	st.global.f32 	[%rd350], %f412;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3948;
  cvt.f32.f16 %f413, low;}

	// end inline asm
	add.s32 	%r5094, %r393, %r5091;
	mul.wide.s32 	%rd351, %r5094, 4;
	add.s64 	%rd352, %rd32, %rd351;
	st.global.f32 	[%rd352], %f413;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3948;
  cvt.f32.f16 %f414, high;}

	// end inline asm
	add.s32 	%r5095, %r394, %r5091;
	mul.wide.s32 	%rd353, %r5095, 4;
	add.s64 	%rd354, %rd32, %rd353;
	st.global.f32 	[%rd354], %f414;

$L__BB0_533:
	@%p12 bra 	$L__BB0_535;

	add.s32 	%r5100, %r1310, %r657;
	mul.lo.s32 	%r5101, %r5100, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7476;
  cvt.f32.f16 %f415, low;}

	// end inline asm
	add.s32 	%r5102, %r379, %r5101;
	mul.wide.s32 	%rd355, %r5102, 4;
	add.s64 	%rd356, %rd32, %rd355;
	st.global.f32 	[%rd356], %f415;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7476;
  cvt.f32.f16 %f416, high;}

	// end inline asm
	add.s32 	%r5103, %r380, %r5101;
	mul.wide.s32 	%rd357, %r5103, 4;
	add.s64 	%rd358, %rd32, %rd357;
	st.global.f32 	[%rd358], %f416;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7471;
  cvt.f32.f16 %f417, low;}

	// end inline asm
	add.s32 	%r5104, %r393, %r5101;
	mul.wide.s32 	%rd359, %r5104, 4;
	add.s64 	%rd360, %rd32, %rd359;
	st.global.f32 	[%rd360], %f417;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7471;
  cvt.f32.f16 %f418, high;}

	// end inline asm
	add.s32 	%r5105, %r394, %r5101;
	mul.wide.s32 	%rd361, %r5105, 4;
	add.s64 	%rd362, %rd32, %rd361;
	st.global.f32 	[%rd362], %f418;

$L__BB0_535:
	@%p12 bra 	$L__BB0_537;

	add.s32 	%r5110, %r1312, %r657;
	mul.lo.s32 	%r5111, %r5110, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7475;
  cvt.f32.f16 %f419, low;}

	// end inline asm
	add.s32 	%r5112, %r379, %r5111;
	mul.wide.s32 	%rd363, %r5112, 4;
	add.s64 	%rd364, %rd32, %rd363;
	st.global.f32 	[%rd364], %f419;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7475;
  cvt.f32.f16 %f420, high;}

	// end inline asm
	add.s32 	%r5113, %r380, %r5111;
	mul.wide.s32 	%rd365, %r5113, 4;
	add.s64 	%rd366, %rd32, %rd365;
	st.global.f32 	[%rd366], %f420;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7470;
  cvt.f32.f16 %f421, low;}

	// end inline asm
	add.s32 	%r5114, %r393, %r5111;
	mul.wide.s32 	%rd367, %r5114, 4;
	add.s64 	%rd368, %rd32, %rd367;
	st.global.f32 	[%rd368], %f421;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7470;
  cvt.f32.f16 %f422, high;}

	// end inline asm
	add.s32 	%r5115, %r394, %r5111;
	mul.wide.s32 	%rd369, %r5115, 4;
	add.s64 	%rd370, %rd32, %rd369;
	st.global.f32 	[%rd370], %f422;

$L__BB0_537:
	add.s32 	%r1313, %r1307, %r1737;
	add.s32 	%r5116, %r1313, %r1309;
	mul.lo.s32 	%r1314, %r5116, %r1738;
	@%p12 bra 	$L__BB0_539;

	add.s32 	%r5121, %r1314, %r657;
	mul.lo.s32 	%r5122, %r5121, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7569;
  cvt.f32.f16 %f423, low;}

	// end inline asm
	add.s32 	%r5123, %r379, %r5122;
	mul.wide.s32 	%rd371, %r5123, 4;
	add.s64 	%rd372, %rd32, %rd371;
	st.global.f32 	[%rd372], %f423;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7569;
  cvt.f32.f16 %f424, high;}

	// end inline asm
	add.s32 	%r5124, %r380, %r5122;
	mul.wide.s32 	%rd373, %r5124, 4;
	add.s64 	%rd374, %rd32, %rd373;
	st.global.f32 	[%rd374], %f424;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7566;
  cvt.f32.f16 %f425, low;}

	// end inline asm
	add.s32 	%r5125, %r393, %r5122;
	mul.wide.s32 	%rd375, %r5125, 4;
	add.s64 	%rd376, %rd32, %rd375;
	st.global.f32 	[%rd376], %f425;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7566;
  cvt.f32.f16 %f426, high;}

	// end inline asm
	add.s32 	%r5126, %r394, %r5122;
	mul.wide.s32 	%rd377, %r5126, 4;
	add.s64 	%rd378, %rd32, %rd377;
	st.global.f32 	[%rd378], %f426;

$L__BB0_539:
	@%p12 bra 	$L__BB0_541;

	add.s32 	%r5131, %r1310, %r1308;
	mul.lo.s32 	%r5132, %r5131, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7466;
  cvt.f32.f16 %f427, low;}

	// end inline asm
	add.s32 	%r5133, %r379, %r5132;
	mul.wide.s32 	%rd379, %r5133, 4;
	add.s64 	%rd380, %rd32, %rd379;
	st.global.f32 	[%rd380], %f427;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7466;
  cvt.f32.f16 %f428, high;}

	// end inline asm
	add.s32 	%r5134, %r380, %r5132;
	mul.wide.s32 	%rd381, %r5134, 4;
	add.s64 	%rd382, %rd32, %rd381;
	st.global.f32 	[%rd382], %f428;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7464;
  cvt.f32.f16 %f429, low;}

	// end inline asm
	add.s32 	%r5135, %r393, %r5132;
	mul.wide.s32 	%rd383, %r5135, 4;
	add.s64 	%rd384, %rd32, %rd383;
	st.global.f32 	[%rd384], %f429;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7464;
  cvt.f32.f16 %f430, high;}

	// end inline asm
	add.s32 	%r5136, %r394, %r5132;
	mul.wide.s32 	%rd385, %r5136, 4;
	add.s64 	%rd386, %rd32, %rd385;
	st.global.f32 	[%rd386], %f430;

$L__BB0_541:
	@%p12 bra 	$L__BB0_543;

	add.s32 	%r5141, %r1312, %r1308;
	mul.lo.s32 	%r5142, %r5141, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4220;
  cvt.f32.f16 %f431, low;}

	// end inline asm
	add.s32 	%r5143, %r379, %r5142;
	mul.wide.s32 	%rd387, %r5143, 4;
	add.s64 	%rd388, %rd32, %rd387;
	st.global.f32 	[%rd388], %f431;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4220;
  cvt.f32.f16 %f432, high;}

	// end inline asm
	add.s32 	%r5144, %r380, %r5142;
	mul.wide.s32 	%rd389, %r5144, 4;
	add.s64 	%rd390, %rd32, %rd389;
	st.global.f32 	[%rd390], %f432;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4301;
  cvt.f32.f16 %f433, low;}

	// end inline asm
	add.s32 	%r5145, %r393, %r5142;
	mul.wide.s32 	%rd391, %r5145, 4;
	add.s64 	%rd392, %rd32, %rd391;
	st.global.f32 	[%rd392], %f433;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4301;
  cvt.f32.f16 %f434, high;}

	// end inline asm
	add.s32 	%r5146, %r394, %r5142;
	mul.wide.s32 	%rd393, %r5146, 4;
	add.s64 	%rd394, %rd32, %rd393;
	st.global.f32 	[%rd394], %f434;

$L__BB0_543:
	@%p12 bra 	$L__BB0_545;

	add.s32 	%r5151, %r1314, %r1308;
	mul.lo.s32 	%r5152, %r5151, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7563;
  cvt.f32.f16 %f435, low;}

	// end inline asm
	add.s32 	%r5153, %r379, %r5152;
	mul.wide.s32 	%rd395, %r5153, 4;
	add.s64 	%rd396, %rd32, %rd395;
	st.global.f32 	[%rd396], %f435;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7563;
  cvt.f32.f16 %f436, high;}

	// end inline asm
	add.s32 	%r5154, %r380, %r5152;
	mul.wide.s32 	%rd397, %r5154, 4;
	add.s64 	%rd398, %rd32, %rd397;
	st.global.f32 	[%rd398], %f436;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7560;
  cvt.f32.f16 %f437, low;}

	// end inline asm
	add.s32 	%r5155, %r393, %r5152;
	mul.wide.s32 	%rd399, %r5155, 4;
	add.s64 	%rd400, %rd32, %rd399;
	st.global.f32 	[%rd400], %f437;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7560;
  cvt.f32.f16 %f438, high;}

	// end inline asm
	add.s32 	%r5156, %r394, %r5152;
	mul.wide.s32 	%rd401, %r5156, 4;
	add.s64 	%rd402, %rd32, %rd401;
	st.global.f32 	[%rd402], %f438;

$L__BB0_545:
	add.s32 	%r1315, %r657, 2;
	@%p12 bra 	$L__BB0_547;

	add.s32 	%r5161, %r1310, %r1315;
	mul.lo.s32 	%r5162, %r5161, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4361;
  cvt.f32.f16 %f439, low;}

	// end inline asm
	add.s32 	%r5163, %r379, %r5162;
	mul.wide.s32 	%rd403, %r5163, 4;
	add.s64 	%rd404, %rd32, %rd403;
	st.global.f32 	[%rd404], %f439;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4361;
  cvt.f32.f16 %f440, high;}

	// end inline asm
	add.s32 	%r5164, %r380, %r5162;
	mul.wide.s32 	%rd405, %r5164, 4;
	add.s64 	%rd406, %rd32, %rd405;
	st.global.f32 	[%rd406], %f440;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4395;
  cvt.f32.f16 %f441, low;}

	// end inline asm
	add.s32 	%r5165, %r393, %r5162;
	mul.wide.s32 	%rd407, %r5165, 4;
	add.s64 	%rd408, %rd32, %rd407;
	st.global.f32 	[%rd408], %f441;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4395;
  cvt.f32.f16 %f442, high;}

	// end inline asm
	add.s32 	%r5166, %r394, %r5162;
	mul.wide.s32 	%rd409, %r5166, 4;
	add.s64 	%rd410, %rd32, %rd409;
	st.global.f32 	[%rd410], %f442;

$L__BB0_547:
	add.s32 	%r5167, %r1307, %r656;
	mul.lo.s32 	%r1316, %r5167, %r1738;
	@%p12 bra 	$L__BB0_549;

	add.s32 	%r5172, %r1316, %r1311;
	mul.lo.s32 	%r5173, %r5172, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7462;
  cvt.f32.f16 %f443, low;}

	// end inline asm
	add.s32 	%r5174, %r379, %r5173;
	mul.wide.s32 	%rd411, %r5174, 4;
	add.s64 	%rd412, %rd32, %rd411;
	st.global.f32 	[%rd412], %f443;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7462;
  cvt.f32.f16 %f444, high;}

	// end inline asm
	add.s32 	%r5175, %r380, %r5173;
	mul.wide.s32 	%rd413, %r5175, 4;
	add.s64 	%rd414, %rd32, %rd413;
	st.global.f32 	[%rd414], %f444;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7459;
  cvt.f32.f16 %f445, low;}

	// end inline asm
	add.s32 	%r5176, %r393, %r5173;
	mul.wide.s32 	%rd415, %r5176, 4;
	add.s64 	%rd416, %rd32, %rd415;
	st.global.f32 	[%rd416], %f445;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7459;
  cvt.f32.f16 %f446, high;}

	// end inline asm
	add.s32 	%r5177, %r394, %r5173;
	mul.wide.s32 	%rd417, %r5177, 4;
	add.s64 	%rd418, %rd32, %rd417;
	st.global.f32 	[%rd418], %f446;

$L__BB0_549:
	add.s32 	%r5178, %r1313, %r656;
	mul.lo.s32 	%r1317, %r5178, %r1738;
	@%p12 bra 	$L__BB0_551;

	add.s32 	%r5183, %r1317, %r1311;
	mul.lo.s32 	%r5184, %r5183, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7556;
  cvt.f32.f16 %f447, low;}

	// end inline asm
	add.s32 	%r5185, %r379, %r5184;
	mul.wide.s32 	%rd419, %r5185, 4;
	add.s64 	%rd420, %rd32, %rd419;
	st.global.f32 	[%rd420], %f447;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7556;
  cvt.f32.f16 %f448, high;}

	// end inline asm
	add.s32 	%r5186, %r380, %r5184;
	mul.wide.s32 	%rd421, %r5186, 4;
	add.s64 	%rd422, %rd32, %rd421;
	st.global.f32 	[%rd422], %f448;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7554;
  cvt.f32.f16 %f449, low;}

	// end inline asm
	add.s32 	%r5187, %r393, %r5184;
	mul.wide.s32 	%rd423, %r5187, 4;
	add.s64 	%rd424, %rd32, %rd423;
	st.global.f32 	[%rd424], %f449;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7554;
  cvt.f32.f16 %f450, high;}

	// end inline asm
	add.s32 	%r5188, %r394, %r5184;
	mul.wide.s32 	%rd425, %r5188, 4;
	add.s64 	%rd426, %rd32, %rd425;
	st.global.f32 	[%rd426], %f450;

$L__BB0_551:
	add.s32 	%r5189, %r1304, %r656;
	mul.lo.s32 	%r1318, %r5189, %r1738;
	@%p12 bra 	$L__BB0_553;

	add.s32 	%r5194, %r1318, %r657;
	mul.lo.s32 	%r5195, %r5194, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7456;
  cvt.f32.f16 %f451, low;}

	// end inline asm
	add.s32 	%r5196, %r379, %r5195;
	mul.wide.s32 	%rd427, %r5196, 4;
	add.s64 	%rd428, %rd32, %rd427;
	st.global.f32 	[%rd428], %f451;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7456;
  cvt.f32.f16 %f452, high;}

	// end inline asm
	add.s32 	%r5197, %r380, %r5195;
	mul.wide.s32 	%rd429, %r5197, 4;
	add.s64 	%rd430, %rd32, %rd429;
	st.global.f32 	[%rd430], %f452;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7447;
  cvt.f32.f16 %f453, low;}

	// end inline asm
	add.s32 	%r5198, %r393, %r5195;
	mul.wide.s32 	%rd431, %r5198, 4;
	add.s64 	%rd432, %rd32, %rd431;
	st.global.f32 	[%rd432], %f453;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7447;
  cvt.f32.f16 %f454, high;}

	// end inline asm
	add.s32 	%r5199, %r394, %r5195;
	mul.wide.s32 	%rd433, %r5199, 4;
	add.s64 	%rd434, %rd32, %rd433;
	st.global.f32 	[%rd434], %f454;

$L__BB0_553:
	@%p12 bra 	$L__BB0_555;

	add.s32 	%r5204, %r1316, %r657;
	mul.lo.s32 	%r5205, %r5204, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7455;
  cvt.f32.f16 %f455, low;}

	// end inline asm
	add.s32 	%r5206, %r379, %r5205;
	mul.wide.s32 	%rd435, %r5206, 4;
	add.s64 	%rd436, %rd32, %rd435;
	st.global.f32 	[%rd436], %f455;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7455;
  cvt.f32.f16 %f456, high;}

	// end inline asm
	add.s32 	%r5207, %r380, %r5205;
	mul.wide.s32 	%rd437, %r5207, 4;
	add.s64 	%rd438, %rd32, %rd437;
	st.global.f32 	[%rd438], %f456;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7446;
  cvt.f32.f16 %f457, low;}

	// end inline asm
	add.s32 	%r5208, %r393, %r5205;
	mul.wide.s32 	%rd439, %r5208, 4;
	add.s64 	%rd440, %rd32, %rd439;
	st.global.f32 	[%rd440], %f457;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7446;
  cvt.f32.f16 %f458, high;}

	// end inline asm
	add.s32 	%r5209, %r394, %r5205;
	mul.wide.s32 	%rd441, %r5209, 4;
	add.s64 	%rd442, %rd32, %rd441;
	st.global.f32 	[%rd442], %f458;

$L__BB0_555:
	@%p12 bra 	$L__BB0_557;

	add.s32 	%r5214, %r1317, %r657;
	mul.lo.s32 	%r5215, %r5214, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7551;
  cvt.f32.f16 %f459, low;}

	// end inline asm
	add.s32 	%r5216, %r379, %r5215;
	mul.wide.s32 	%rd443, %r5216, 4;
	add.s64 	%rd444, %rd32, %rd443;
	st.global.f32 	[%rd444], %f459;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7551;
  cvt.f32.f16 %f460, high;}

	// end inline asm
	add.s32 	%r5217, %r380, %r5215;
	mul.wide.s32 	%rd445, %r5217, 4;
	add.s64 	%rd446, %rd32, %rd445;
	st.global.f32 	[%rd446], %f460;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7548;
  cvt.f32.f16 %f461, low;}

	// end inline asm
	add.s32 	%r5218, %r393, %r5215;
	mul.wide.s32 	%rd447, %r5218, 4;
	add.s64 	%rd448, %rd32, %rd447;
	st.global.f32 	[%rd448], %f461;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7548;
  cvt.f32.f16 %f462, high;}

	// end inline asm
	add.s32 	%r5219, %r394, %r5215;
	mul.wide.s32 	%rd449, %r5219, 4;
	add.s64 	%rd450, %rd32, %rd449;
	st.global.f32 	[%rd450], %f462;

$L__BB0_557:
	@%p12 bra 	$L__BB0_559;

	add.s32 	%r5224, %r1318, %r1308;
	mul.lo.s32 	%r5225, %r5224, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7438;
  cvt.f32.f16 %f463, low;}

	// end inline asm
	add.s32 	%r5226, %r379, %r5225;
	mul.wide.s32 	%rd451, %r5226, 4;
	add.s64 	%rd452, %rd32, %rd451;
	st.global.f32 	[%rd452], %f463;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7438;
  cvt.f32.f16 %f464, high;}

	// end inline asm
	add.s32 	%r5227, %r380, %r5225;
	mul.wide.s32 	%rd453, %r5227, 4;
	add.s64 	%rd454, %rd32, %rd453;
	st.global.f32 	[%rd454], %f464;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7430;
  cvt.f32.f16 %f465, low;}

	// end inline asm
	add.s32 	%r5228, %r393, %r5225;
	mul.wide.s32 	%rd455, %r5228, 4;
	add.s64 	%rd456, %rd32, %rd455;
	st.global.f32 	[%rd456], %f465;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7430;
  cvt.f32.f16 %f466, high;}

	// end inline asm
	add.s32 	%r5229, %r394, %r5225;
	mul.wide.s32 	%rd457, %r5229, 4;
	add.s64 	%rd458, %rd32, %rd457;
	st.global.f32 	[%rd458], %f466;

$L__BB0_559:
	@%p12 bra 	$L__BB0_561;

	add.s32 	%r5234, %r1316, %r1308;
	mul.lo.s32 	%r5235, %r5234, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7437;
  cvt.f32.f16 %f467, low;}

	// end inline asm
	add.s32 	%r5236, %r379, %r5235;
	mul.wide.s32 	%rd459, %r5236, 4;
	add.s64 	%rd460, %rd32, %rd459;
	st.global.f32 	[%rd460], %f467;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7437;
  cvt.f32.f16 %f468, high;}

	// end inline asm
	add.s32 	%r5237, %r380, %r5235;
	mul.wide.s32 	%rd461, %r5237, 4;
	add.s64 	%rd462, %rd32, %rd461;
	st.global.f32 	[%rd462], %f468;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7429;
  cvt.f32.f16 %f469, low;}

	// end inline asm
	add.s32 	%r5238, %r393, %r5235;
	mul.wide.s32 	%rd463, %r5238, 4;
	add.s64 	%rd464, %rd32, %rd463;
	st.global.f32 	[%rd464], %f469;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7429;
  cvt.f32.f16 %f470, high;}

	// end inline asm
	add.s32 	%r5239, %r394, %r5235;
	mul.wide.s32 	%rd465, %r5239, 4;
	add.s64 	%rd466, %rd32, %rd465;
	st.global.f32 	[%rd466], %f470;

$L__BB0_561:
	@%p12 bra 	$L__BB0_563;

	add.s32 	%r5244, %r1317, %r1308;
	mul.lo.s32 	%r5245, %r5244, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7545;
  cvt.f32.f16 %f471, low;}

	// end inline asm
	add.s32 	%r5246, %r379, %r5245;
	mul.wide.s32 	%rd467, %r5246, 4;
	add.s64 	%rd468, %rd32, %rd467;
	st.global.f32 	[%rd468], %f471;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7545;
  cvt.f32.f16 %f472, high;}

	// end inline asm
	add.s32 	%r5247, %r380, %r5245;
	mul.wide.s32 	%rd469, %r5247, 4;
	add.s64 	%rd470, %rd32, %rd469;
	st.global.f32 	[%rd470], %f472;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7542;
  cvt.f32.f16 %f473, low;}

	// end inline asm
	add.s32 	%r5248, %r393, %r5245;
	mul.wide.s32 	%rd471, %r5248, 4;
	add.s64 	%rd472, %rd32, %rd471;
	st.global.f32 	[%rd472], %f473;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7542;
  cvt.f32.f16 %f474, high;}

	// end inline asm
	add.s32 	%r5249, %r394, %r5245;
	mul.wide.s32 	%rd473, %r5249, 4;
	add.s64 	%rd474, %rd32, %rd473;
	st.global.f32 	[%rd474], %f474;

$L__BB0_563:
	add.s32 	%r1319, %r1317, %r1315;
	@%p12 bra 	$L__BB0_565;

	mul.lo.s32 	%r5254, %r1319, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7541;
  cvt.f32.f16 %f475, low;}

	// end inline asm
	add.s32 	%r5255, %r379, %r5254;
	mul.wide.s32 	%rd475, %r5255, 4;
	add.s64 	%rd476, %rd32, %rd475;
	st.global.f32 	[%rd476], %f475;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7541;
  cvt.f32.f16 %f476, high;}

	// end inline asm
	add.s32 	%r5256, %r380, %r5254;
	mul.wide.s32 	%rd477, %r5256, 4;
	add.s64 	%rd478, %rd32, %rd477;
	st.global.f32 	[%rd478], %f476;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7540;
  cvt.f32.f16 %f477, low;}

	// end inline asm
	add.s32 	%r5257, %r393, %r5254;
	mul.wide.s32 	%rd479, %r5257, 4;
	add.s64 	%rd480, %rd32, %rd479;
	st.global.f32 	[%rd480], %f477;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7540;
  cvt.f32.f16 %f478, high;}

	// end inline asm
	add.s32 	%r5258, %r394, %r5254;
	mul.wide.s32 	%rd481, %r5258, 4;
	add.s64 	%rd482, %rd32, %rd481;
	st.global.f32 	[%rd482], %f478;

$L__BB0_565:
	add.s32 	%r1320, %r656, 1;
	@%p12 bra 	$L__BB0_567;

	add.s32 	%r5263, %r1307, %r1320;
	mad.lo.s32 	%r5264, %r5263, %r1738, %r657;
	mul.lo.s32 	%r5265, %r5264, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7409;
  cvt.f32.f16 %f479, low;}

	// end inline asm
	add.s32 	%r5266, %r379, %r5265;
	mul.wide.s32 	%rd483, %r5266, 4;
	add.s64 	%rd484, %rd32, %rd483;
	st.global.f32 	[%rd484], %f479;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7409;
  cvt.f32.f16 %f480, high;}

	// end inline asm
	add.s32 	%r5267, %r380, %r5265;
	mul.wide.s32 	%rd485, %r5267, 4;
	add.s64 	%rd486, %rd32, %rd485;
	st.global.f32 	[%rd486], %f480;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7402;
  cvt.f32.f16 %f481, low;}

	// end inline asm
	add.s32 	%r5268, %r393, %r5265;
	mul.wide.s32 	%rd487, %r5268, 4;
	add.s64 	%rd488, %rd32, %rd487;
	st.global.f32 	[%rd488], %f481;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7402;
  cvt.f32.f16 %f482, high;}

	// end inline asm
	add.s32 	%r5269, %r394, %r5265;
	mul.wide.s32 	%rd489, %r5269, 4;
	add.s64 	%rd490, %rd32, %rd489;
	st.global.f32 	[%rd490], %f482;

$L__BB0_567:
	add.s32 	%r5270, %r1313, %r1320;
	mul.lo.s32 	%r1321, %r5270, %r1738;
	@%p12 bra 	$L__BB0_569;

	add.s32 	%r5275, %r1321, %r657;
	mul.lo.s32 	%r5276, %r5275, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7538;
  cvt.f32.f16 %f483, low;}

	// end inline asm
	add.s32 	%r5277, %r379, %r5276;
	mul.wide.s32 	%rd491, %r5277, 4;
	add.s64 	%rd492, %rd32, %rd491;
	st.global.f32 	[%rd492], %f483;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7538;
  cvt.f32.f16 %f484, high;}

	// end inline asm
	add.s32 	%r5278, %r380, %r5276;
	mul.wide.s32 	%rd493, %r5278, 4;
	add.s64 	%rd494, %rd32, %rd493;
	st.global.f32 	[%rd494], %f484;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7536;
  cvt.f32.f16 %f485, low;}

	// end inline asm
	add.s32 	%r5279, %r393, %r5276;
	mul.wide.s32 	%rd495, %r5279, 4;
	add.s64 	%rd496, %rd32, %rd495;
	st.global.f32 	[%rd496], %f485;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7536;
  cvt.f32.f16 %f486, high;}

	// end inline asm
	add.s32 	%r5280, %r394, %r5276;
	mul.wide.s32 	%rd497, %r5280, 4;
	add.s64 	%rd498, %rd32, %rd497;
	st.global.f32 	[%rd498], %f486;

$L__BB0_569:
	add.s32 	%r1322, %r1321, %r1308;
	@%p12 bra 	$L__BB0_571;

	mul.lo.s32 	%r5285, %r1322, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7535;
  cvt.f32.f16 %f487, low;}

	// end inline asm
	add.s32 	%r5286, %r379, %r5285;
	mul.wide.s32 	%rd499, %r5286, 4;
	add.s64 	%rd500, %rd32, %rd499;
	st.global.f32 	[%rd500], %f487;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7535;
  cvt.f32.f16 %f488, high;}

	// end inline asm
	add.s32 	%r5287, %r380, %r5285;
	mul.wide.s32 	%rd501, %r5287, 4;
	add.s64 	%rd502, %rd32, %rd501;
	st.global.f32 	[%rd502], %f488;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7534;
  cvt.f32.f16 %f489, low;}

	// end inline asm
	add.s32 	%r5288, %r393, %r5285;
	mul.wide.s32 	%rd503, %r5288, 4;
	add.s64 	%rd504, %rd32, %rd503;
	st.global.f32 	[%rd504], %f489;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7534;
  cvt.f32.f16 %f490, high;}

	// end inline asm
	add.s32 	%r5289, %r394, %r5285;
	mul.wide.s32 	%rd505, %r5289, 4;
	add.s64 	%rd506, %rd32, %rd505;
	st.global.f32 	[%rd506], %f490;

$L__BB0_571:
	setp.eq.s32 	%p301, %r23, %r2132;
	@%p301 bra 	$L__BB0_573;

	mad.lo.s32 	%r5290, %r1733, %r23, %r24;
	mov.u32 	%r5291, _ZN6kernel5shmemE;
	mad.lo.s32 	%r5292, %r5290, 1280, %r5291;
	add.s32 	%r5293, %r5292, -256;
	shl.b32 	%r5294, %r28, 4;
	add.s32 	%r5295, %r5293, %r5294;
	st.shared.v4.u32 	[%r5295+256], {%r3839, %r3916, %r7556, %r7554};
	st.shared.v4.u32 	[%r5295+1024], {%r3606, %r3683, %r7569, %r7566};
	shl.b32 	%r5296, %r28, 3;
	add.s32 	%r5297, %r5293, %r5296;
	st.shared.v2.u32 	[%r5297+768], {%r3882, %r3948};

$L__BB0_573:
	setp.eq.s32 	%p302, %r24, %r2137;
	@%p302 bra 	$L__BB0_577;

	mad.lo.s32 	%r5301, %r1732, 384, -64;
	mul.lo.s32 	%r5302, %r5301, %r24;
	mad.lo.s32 	%r5304, %r2133, %r2132, %r5302;
	mad.lo.s32 	%r5305, %r2213, 384, %r5304;
	shl.b32 	%r5306, %r5305, 2;
	mov.u32 	%r5307, _ZN6kernel5shmemE;
	add.s32 	%r5308, %r5307, %r5306;
	add.s32 	%r5309, %r5308, -256;
	shl.b32 	%r5310, %r28, 4;
	add.s32 	%r5311, %r5309, %r5310;
	st.shared.v4.u32 	[%r5311+256], {%r3760, %r3794, %r7563, %r7560};
	st.shared.v4.u32 	[%r5311+1024], {%r4361, %r4395, %r7541, %r7540};
	shl.b32 	%r5312, %r28, 3;
	add.s32 	%r1326, %r5309, %r5312;
	@%p301 bra 	$L__BB0_576;

	st.shared.v2.u32 	[%r1326], {%r3649, %r3715};

$L__BB0_576:
	st.shared.v2.u32 	[%r1326+768], {%r4220, %r4301};

$L__BB0_577:
	setp.ne.s32 	%p304, %r23, %r2132;
	ld.param.u64 	%rd507, [%rd1+56];
	cvta.to.global.u64 	%rd33, %rd507;
	@%p304 bra 	$L__BB0_579;

	mad.lo.s32 	%r5314, %r654, %r1735, %r26;
	mul.lo.s32 	%r5315, %r5314, %r1733;
	mul.lo.s32 	%r5316, %r5315, 768;
	mad.lo.s32 	%r5317, %r24, 384, %r5316;
	add.s32 	%r5318, %r5317, -64;
	mul.wide.s32 	%rd508, %r5318, 4;
	add.s64 	%rd509, %rd33, %rd508;
	add.s64 	%rd511, %rd509, %rd273;
	st.global.v4.u32 	[%rd511+256], {%r3839, %r3916, %r7556, %r7554};
	st.global.v4.u32 	[%rd511+1024], {%r3606, %r3683, %r7569, %r7566};
	add.s64 	%rd513, %rd509, %rd275;
	st.global.v2.u32 	[%rd513+768], {%r3882, %r3948};
	st.global.v2.u32 	[%rd513+1536], {%r3649, %r3715};

$L__BB0_579:
	setp.ne.s32 	%p305, %r24, %r2137;
	@%p305 bra 	$L__BB0_584;

	ld.param.u64 	%rd557, [%rd1+56];
	cvta.to.global.u64 	%rd556, %rd557;
	mad.lo.s32 	%r5321, %r655, %r1734, %r25;
	mad.lo.s32 	%r5325, %r5321, %r1789, %r412;
	mul.wide.s32 	%rd514, %r5325, 4;
	add.s64 	%rd515, %rd556, %rd514;
	add.s64 	%rd517, %rd515, %rd273;
	st.global.v4.u32 	[%rd517+256], {%r3760, %r3794, %r7563, %r7560};
	st.global.v4.u32 	[%rd517+1024], {%r4361, %r4395, %r7541, %r7540};
	add.s64 	%rd34, %rd515, %rd275;
	@%p301 bra 	$L__BB0_582;

	st.global.v2.u32 	[%rd34], {%r3649, %r3715};

$L__BB0_582:
	st.global.v2.u32 	[%rd34+768], {%r4220, %r4301};
	@%p205 bra 	$L__BB0_584;

	st.global.v2.u32 	[%rd34+1536], {%r7648, %r7645};

$L__BB0_584:
	setp.ge.s32 	%p308, %r23, %r2132;
	@%p308 bra 	$L__BB0_586;

	mul.lo.s32 	%r5326, %r1733, 320;
	mul.lo.s32 	%r5327, %r24, 320;
	mad.lo.s32 	%r5328, %r5326, %r23, %r5327;
	add.s32 	%r5332, %r1788, -64;
	mad.lo.s32 	%r5336, %r5332, %r2137, %r2134;
	add.s32 	%r5337, %r5328, %r5336;
	shl.b32 	%r5338, %r5337, 2;
	mov.u32 	%r5339, _ZN6kernel5shmemE;
	add.s32 	%r5340, %r5339, %r5338;
	shl.b32 	%r5341, %r28, 4;
	add.s32 	%r5342, %r5340, %r5341;
	st.shared.v4.u32 	[%r5342], {%r7699, %r7698, %r7694, %r7692};
	shl.b32 	%r5343, %r28, 3;
	add.s32 	%r5344, %r5340, %r5343;
	st.shared.v2.u32 	[%r5344+512], {%r7460, %r7457};
	st.shared.v4.u32 	[%r5342+768], {%r7473, %r7468, %r7448, %r7439};

$L__BB0_586:
	setp.ge.s32 	%p309, %r24, %r2137;
	@%p309 bra 	$L__BB0_590;

	mad.lo.s32 	%r5350, %r2213, 384, %r2140;
	mad.lo.s32 	%r5353, %r2135, %r24, %r5350;
	add.s32 	%r5359, %r5353, %r2138;
	shl.b32 	%r5360, %r5359, 2;
	mov.u32 	%r5361, _ZN6kernel5shmemE;
	add.s32 	%r5362, %r5361, %r5360;
	shl.b32 	%r5363, %r28, 3;
	add.s32 	%r5364, %r5362, %r5363;
	@%p308 bra 	$L__BB0_589;

	add.s32 	%r7222, %r5364, -256;
	st.shared.v2.u32 	[%r7222], {%r7472, %r7467};

$L__BB0_589:
	shl.b32 	%r5383, %r28, 4;
	add.s32 	%r5384, %r5362, %r5383;
	st.shared.v4.u32 	[%r5384], {%r7465, %r7463, %r7431, %r7423};
	add.s32 	%r7223, %r5364, -256;
	st.shared.v2.u32 	[%r7223+768], {%r7432, %r7424};
	st.shared.v4.u32 	[%r5384+768], {%r7697, %r7696, %r7685, %r7684};

$L__BB0_590:
	bar.sync 	0;
	@%p200 bra 	$L__BB0_592;

	mul.lo.s32 	%r5385, %r1733, 320;
	add.s32 	%r5386, %r23, -1;
	mul.lo.s32 	%r5387, %r24, 320;
	mad.lo.s32 	%r5388, %r5385, %r5386, %r5387;
	shl.b32 	%r5389, %r5388, 2;
	mov.u32 	%r5390, _ZN6kernel5shmemE;
	add.s32 	%r5391, %r5390, %r5389;
	add.s32 	%r5392, %r5391, -256;
	shl.b32 	%r5393, %r28, 4;
	add.s32 	%r5394, %r5392, %r5393;
	ld.shared.v4.u32 	{%r7643, %r7641, %r7650, %r7651}, [%r5394+256];
	ld.shared.v4.u32 	{%r7649, %r7646, %r7638, %r7639}, [%r5394+1024];
	shl.b32 	%r5403, %r28, 3;
	add.s32 	%r5404, %r5392, %r5403;
	ld.shared.v2.u32 	{%r7642, %r7640}, [%r5404+768];

$L__BB0_592:
	@%p203 bra 	$L__BB0_595;

	mad.lo.s32 	%r5409, %r1732, 384, -64;
	add.s32 	%r5410, %r24, -1;
	mul.lo.s32 	%r5411, %r5409, %r5410;
	mad.lo.s32 	%r5414, %r2133, %r2132, %r5411;
	mad.lo.s32 	%r5415, %r2213, 384, %r5414;
	shl.b32 	%r5416, %r5415, 2;
	mov.u32 	%r5417, _ZN6kernel5shmemE;
	add.s32 	%r5418, %r5417, %r5416;
	add.s32 	%r5419, %r5418, -256;
	shl.b32 	%r5420, %r28, 4;
	add.s32 	%r5421, %r5419, %r5420;
	ld.shared.v4.u32 	{%r7663, %r7662, %r7658, %r7656}, [%r5421+256];
	ld.shared.v4.u32 	{%r7653, %r7652, %r7655, %r7661}, [%r5421+1024];
	shl.b32 	%r5430, %r28, 3;
	add.s32 	%r5431, %r5419, %r5430;
	ld.shared.v2.u32 	{%r7659, %r7657}, [%r5431+768];
	@%p200 bra 	$L__BB0_595;

	add.s32 	%r7224, %r5431, 768;
	ld.shared.v2.u32 	{%r7644, %r7647}, [%r7224+768];

$L__BB0_595:
	ld.param.u64 	%rd519, [%rd1+56];
	cvta.to.global.u64 	%rd35, %rd519;
	mov.u32 	%r7775, %r7609;
	mov.u32 	%r7776, %r7610;
	mov.u32 	%r7778, %r7612;
	mov.u32 	%r7779, %r7613;
	mov.u32 	%r7799, %r7629;
	mov.u32 	%r7803, %r7633;
	mov.u32 	%r7784, %r7616;
	mov.u32 	%r7785, %r7617;
	mov.u32 	%r7786, %r7618;
	mov.u32 	%r7787, %r7619;
	mov.u32 	%r7804, %r7634;
	mov.u32 	%r7805, %r7635;
	@%p205 bra 	$L__BB0_599;

	mad.lo.s32 	%r5437, %r654, %r1735, %r26;
	mad.lo.s32 	%r5438, %r5437, 768, 384;
	mul.lo.s32 	%r5439, %r5438, %r1733;
	mad.lo.s32 	%r5440, %r24, 384, %r5439;
	add.s32 	%r5441, %r5440, -128;
	mul.wide.s32 	%rd520, %r5441, 4;
	add.s64 	%rd521, %rd35, %rd520;
	add.s64 	%rd523, %rd521, %rd273;
	add.s64 	%rd36, %rd523, 512;
	mov.u32 	%r7799, %r7629;
	mov.u32 	%r7803, %r7633;
	mov.u32 	%r7804, %r7634;
	mov.u32 	%r7805, %r7635;
	@%p203 bra 	$L__BB0_598;

	ld.global.v4.u32 	{%r7804, %r7805, %r7799, %r7803}, [%rd36+-512];

$L__BB0_598:
	ld.global.v4.u32 	{%r7785, %r7787, %r7784, %r7786}, [%rd36];
	ld.global.v4.u32 	{%r7779, %r7776, %r7775, %r7778}, [%rd36+512];
	ld.global.v4.u32 	{%r7608, %r7611, %r7615, %r7614}, [%rd36+1024];

$L__BB0_599:
	mov.u32 	%r7790, %r7620;
	mov.u32 	%r7791, %r7621;
	mov.u32 	%r7792, %r7622;
	mov.u32 	%r7793, %r7623;
	mov.u32 	%r7794, %r7624;
	mov.u32 	%r7795, %r7625;
	mov.u32 	%r7796, %r7626;
	mov.u32 	%r7801, %r7631;
	@%p208 bra 	$L__BB0_601;

	mad.lo.s32 	%r5459, %r655, %r1734, %r25;
	mad.lo.s32 	%r5463, %r5459, %r1789, %r413;
	mul.wide.s32 	%rd524, %r5463, 4;
	add.s64 	%rd525, %rd35, %rd524;
	add.s64 	%rd527, %rd525, %rd273;
	ld.global.v4.u32 	{%r7628, %r7627, %r7632, %r7630}, [%rd527];
	ld.global.v4.u32 	{%r7796, %r7793, %r7790, %r7791}, [%rd527+512];
	ld.global.v4.u32 	{%r7795, %r7792, %r7794, %r7801}, [%rd527+1024];
	ld.global.v4.u32 	{%r7804, %r7805, %r7799, %r7803}, [%rd527+1536];

$L__BB0_601:
	neg.s32 	%r7230, %r1737;
	not.b32 	%r7229, %r26;
	add.s32 	%r7228, %r1735, %r7229;
	mul.lo.s32 	%r7227, %r7228, %r1736;
	not.b32 	%r7226, %r25;
	add.s32 	%r7225, %r1734, %r7226;
	mad.lo.s32 	%r5487, %r7225, %r1736, %r7227;
	add.s32 	%r5488, %r5487, %r1737;
	add.s32 	%r5497, %r5488, %r2544;
	add.s32 	%r1446, %r7495, 1;
	add.s32 	%r5498, %r1446, %r5497;
	div.s32 	%r5499, %r5498, %r1737;
	mad.lo.s32 	%r1447, %r5499, %r7230, %r5498;
	mad.lo.s32 	%r5506, %r5499, %r30, %r2555;
	ld.param.u64 	%rd528, [%rd1+72];
	cvta.to.global.u64 	%rd529, %rd528;
	rem.s32 	%r5507, %r5506, %r1738;
	shr.u32 	%r5508, %r5507, 31;
	add.s32 	%r5509, %r5507, %r5508;
	shr.s32 	%r5510, %r5509, 1;
	mad.lo.s32 	%r5511, %r5510, %r1737, %r1447;
	shl.b32 	%r5512, %r5511, 5;
	add.s32 	%r5513, %r5512, %r28;
	cvt.s64.s32 	%rd37, %r5513;
	mul.wide.s32 	%rd530, %r5513, 4;
	add.s64 	%rd531, %rd529, %rd530;
	ld.global.u32 	%r7497, [%rd531];
	ld.param.u64 	%rd532, [%rd1+80];
	cvta.to.global.u64 	%rd38, %rd532;
	@%p71 bra 	$L__BB0_603;
	bra.uni 	$L__BB0_602;

$L__BB0_603:
	shl.b64 	%rd535, %rd37, 2;
	add.s64 	%rd536, %rd38, %rd535;
	ld.global.u32 	%r7496, [%rd536];
	bra.uni 	$L__BB0_604;

$L__BB0_602:
	shl.b32 	%r5514, %r1447, 5;
	add.s32 	%r5515, %r5514, %r28;
	mul.wide.s32 	%rd533, %r5515, 16;
	add.s64 	%rd534, %rd38, %rd533;
	ld.global.v4.u32 	{%r5516, %r5517, %r5518, %r5519}, [%rd534];
	mov.u32 	%r7477, %r7481;
	mov.u32 	%r7478, %r7482;
	mov.u32 	%r7479, %r7483;
	mov.u32 	%r7480, %r7484;
	mov.u32 	%r7481, %r7485;
	mov.u32 	%r7482, %r7486;
	mov.u32 	%r7483, %r7487;
	mov.u32 	%r7484, %r7488;
	mov.u32 	%r7485, %r5519;
	mov.u32 	%r7486, %r5518;
	mov.u32 	%r7487, %r5517;
	mov.u32 	%r7488, %r5516;

$L__BB0_604:
	mov.f32 	%f538, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5520, {low,high};}

	// end inline asm
	selp.b32 	%r5522, %r7326, %r5520, %p12;
	// begin inline asm
	{mul.f16x2 %r7474,%r5522,%r7451;
}
	// end inline asm
	selp.b32 	%r5525, %r7330, %r5520, %p12;
	// begin inline asm
	{mul.f16x2 %r7469,%r5525,%r7442;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5527, {low,high};}

	// end inline asm
	selp.b32 	%r5529, %r7326, %r5527, %p12;
	// begin inline asm
	{mul.f16x2 %r7461,%r5529,%r7415;
}
	// end inline asm
	selp.b32 	%r5532, %r7330, %r5527, %p12;
	// begin inline asm
	{mul.f16x2 %r7458,%r5532,%r7410;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5534, {low,high};}

	// end inline asm
	selp.b32 	%r5536, %r7326, %r5534, %p12;
	// begin inline asm
	{mul.f16x2 %r5535,%r5536,%r7407;
}
	// end inline asm
	selp.b32 	%r5539, %r7330, %r5534, %p12;
	// begin inline asm
	{mul.f16x2 %r5538,%r5539,%r7400;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5541, {low,high};}

	// end inline asm
	selp.b32 	%r5543, %r7326, %r5541, %p12;
	// begin inline asm
	{mul.f16x2 %r5542,%r5543,%r7406;
}
	// end inline asm
	selp.b32 	%r5546, %r7330, %r5541, %p12;
	// begin inline asm
	{mul.f16x2 %r5545,%r5546,%r7399;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5548, {low,high};}

	// end inline asm
	selp.b32 	%r5550, %r7326, %r5548, %p12;
	// begin inline asm
	{mul.f16x2 %r7451,%r5550,%r7405;
}
	// end inline asm
	selp.b32 	%r5553, %r7330, %r5548, %p12;
	// begin inline asm
	{mul.f16x2 %r7442,%r5553,%r7398;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5555, {low,high};}

	// end inline asm
	selp.b32 	%r5557, %r7326, %r5555, %p12;
	// begin inline asm
	{mul.f16x2 %r5556,%r5557,%r7393;
}
	// end inline asm
	selp.b32 	%r5560, %r7330, %r5555, %p12;
	// begin inline asm
	{mul.f16x2 %r5559,%r5560,%r7388;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5562, {low,high};}

	// end inline asm
	selp.b32 	%r5564, %r7326, %r5562, %p12;
	// begin inline asm
	{mul.f16x2 %r7434,%r5564,%r7392;
}
	// end inline asm
	selp.b32 	%r5567, %r7330, %r5562, %p12;
	// begin inline asm
	{mul.f16x2 %r7426,%r5567,%r7387;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5569, {low,high};}

	// end inline asm
	selp.b32 	%r5571, %r7326, %r5569, %p12;
	// begin inline asm
	{mul.f16x2 %r5570,%r5571,%r7372;
}
	// end inline asm
	selp.b32 	%r5574, %r7330, %r5569, %p12;
	// begin inline asm
	{mul.f16x2 %r5573,%r5574,%r7365;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5576, {low,high};}

	// end inline asm
	selp.b32 	%r5578, %r7326, %r5576, %p12;
	// begin inline asm
	{mul.f16x2 %r5577,%r5578,%r7626;
}
	// end inline asm
	selp.b32 	%r5581, %r7330, %r5576, %p12;
	// begin inline asm
	{mul.f16x2 %r5580,%r5581,%r7623;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5583, {low,high};}

	// end inline asm
	selp.b32 	%r5585, %r7326, %r5583, %p12;
	// begin inline asm
	{mul.f16x2 %r7415,%r5585,%r7625;
}
	// end inline asm
	selp.b32 	%r5588, %r7330, %r5583, %p12;
	// begin inline asm
	{mul.f16x2 %r7410,%r5588,%r7622;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5590, {low,high};}

	// end inline asm
	selp.b32 	%r5592, %r7326, %r5590, %p12;
	// begin inline asm
	{mul.f16x2 %r5591,%r5592,%r7359;
}
	// end inline asm
	selp.b32 	%r5595, %r7330, %r5590, %p12;
	// begin inline asm
	{mul.f16x2 %r5594,%r5595,%r7352;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5597, {low,high};}

	// end inline asm
	selp.b32 	%r5599, %r7326, %r5597, %p12;
	// begin inline asm
	{mul.f16x2 %r5598,%r5599,%r7358;
}
	// end inline asm
	selp.b32 	%r5602, %r7330, %r5597, %p12;
	// begin inline asm
	{mul.f16x2 %r5601,%r5602,%r7351;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5604, {low,high};}

	// end inline asm
	selp.b32 	%r5606, %r7326, %r5604, %p12;
	// begin inline asm
	{mul.f16x2 %r7405,%r5606,%r7357;
}
	// end inline asm
	selp.b32 	%r5609, %r7330, %r5604, %p12;
	// begin inline asm
	{mul.f16x2 %r7398,%r5609,%r7350;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5611, {low,high};}

	// end inline asm
	selp.b32 	%r5613, %r7326, %r5611, %p12;
	// begin inline asm
	{mul.f16x2 %r5612,%r5613,%r7345;
}
	// end inline asm
	selp.b32 	%r5616, %r7330, %r5611, %p12;
	// begin inline asm
	{mul.f16x2 %r5615,%r5616,%r7337;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5618, {low,high};}

	// end inline asm
	selp.b32 	%r5620, %r7326, %r5618, %p12;
	// begin inline asm
	{mul.f16x2 %r5619,%r5620,%r7344;
}
	// end inline asm
	selp.b32 	%r5623, %r7330, %r5618, %p12;
	// begin inline asm
	{mul.f16x2 %r5622,%r5623,%r7336;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5625, {low,high};}

	// end inline asm
	selp.b32 	%r5627, %r7326, %r5625, %p12;
	// begin inline asm
	{mul.f16x2 %r7392,%r5627,%r7613;
}
	// end inline asm
	selp.b32 	%r5630, %r7330, %r5625, %p12;
	// begin inline asm
	{mul.f16x2 %r7387,%r5630,%r7610;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5632, {low,high};}

	// end inline asm
	selp.b32 	%r5634, %r7326, %r5632, %p12;
	// begin inline asm
	{mul.f16x2 %r5633,%r5634,%r7609;
}
	// end inline asm
	selp.b32 	%r5637, %r7330, %r5632, %p12;
	// begin inline asm
	{mul.f16x2 %r5636,%r5637,%r7612;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5639, {low,high};}

	// end inline asm
	selp.b32 	%r5641, %r7326, %r5639, %p12;
	// begin inline asm
	{mul.f16x2 %r5640,%r5641,%r7620;
}
	// end inline asm
	selp.b32 	%r5644, %r7330, %r5639, %p12;
	// begin inline asm
	{mul.f16x2 %r5643,%r5644,%r7621;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5646, {low,high};}

	// end inline asm
	selp.b32 	%r5648, %r7326, %r5646, %p12;
	// begin inline asm
	{mul.f16x2 %r5647,%r5648,%r7368;
}
	// end inline asm
	selp.b32 	%r5651, %r7330, %r5646, %p12;
	// begin inline asm
	{mul.f16x2 %r5650,%r5651,%r7414;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5653, {low,high};}

	// end inline asm
	selp.b32 	%r5655, %r7326, %r5653, %p12;
	// begin inline asm
	{mul.f16x2 %r5654,%r5655,%r7624;
}
	// end inline asm
	selp.b32 	%r5658, %r7330, %r5653, %p12;
	// begin inline asm
	{mul.f16x2 %r5657,%r5658,%r7631;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5660, {low,high};}

	// end inline asm
	selp.b32 	%r5662, %r7326, %r5660, %p12;
	// begin inline asm
	{mul.f16x2 %r7357,%r5662,%r7629;
}
	// end inline asm
	selp.b32 	%r5665, %r7330, %r5660, %p12;
	// begin inline asm
	{mul.f16x2 %r7350,%r5665,%r7633;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5667, {low,high};}

	// end inline asm
	selp.b32 	%r5669, %r7326, %r5667, %p12;
	// begin inline asm
	{mul.f16x2 %r5668,%r5669,%r7616;
}
	// end inline asm
	selp.b32 	%r5672, %r7330, %r5667, %p12;
	// begin inline asm
	{mul.f16x2 %r5671,%r5672,%r7618;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5674, {low,high};}

	// end inline asm
	selp.b32 	%r5676, %r7326, %r5674, %p12;
	// begin inline asm
	{mul.f16x2 %r5675,%r5676,%r7617;
}
	// end inline asm
	selp.b32 	%r5679, %r7330, %r5674, %p12;
	// begin inline asm
	{mul.f16x2 %r5678,%r5679,%r7619;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5681, {low,high};}

	// end inline asm
	selp.b32 	%r5683, %r7326, %r5681, %p12;
	// begin inline asm
	{mul.f16x2 %r5682,%r5683,%r7634;
}
	// end inline asm
	selp.b32 	%r5686, %r7330, %r5681, %p12;
	// begin inline asm
	{mul.f16x2 %r5685,%r5686,%r7635;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5688,%r7475,%r3649;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5691,%r3760,%r3606;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5694,%r5688,%r5691;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5697,%r7234,%r5694;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5700,%r7474,%r5697;
}
	// end inline asm
	@%p12 bra 	$L__BB0_606;

	mov.u32 	%r7474, %r5700;

$L__BB0_606:
	// begin inline asm
	{sub.f16x2 %r5703,%r7470,%r3715;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5706,%r3794,%r3683;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5709,%r5703,%r5706;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5712,%r7234,%r5709;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5715,%r7469,%r5712;
}
	// end inline asm
	@%p12 bra 	$L__BB0_608;

	mov.u32 	%r7469, %r5715;

$L__BB0_608:
	// begin inline asm
	{sub.f16x2 %r5718,%r7462,%r3882;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5721,%r7476,%r3839;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5724,%r5718,%r5721;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5727,%r7234,%r5724;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5730,%r7461,%r5727;
}
	// end inline asm
	@%p12 bra 	$L__BB0_610;

	mov.u32 	%r7461, %r5730;

$L__BB0_610:
	// begin inline asm
	{sub.f16x2 %r5733,%r7459,%r3948;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5736,%r7471,%r3916;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5739,%r5733,%r5736;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5742,%r7234,%r5739;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5745,%r7458,%r5742;
}
	// end inline asm
	@%p12 bra 	$L__BB0_612;

	mov.u32 	%r7458, %r5745;

$L__BB0_612:
	// begin inline asm
	{sub.f16x2 %r5748,%r7470,%r7475;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5751,%r7325,%r5748;
}
	// end inline asm
	@%p12 bra 	$L__BB0_614;
	bra.uni 	$L__BB0_613;

$L__BB0_614:
	// begin inline asm
	{neg.f16x2 %r7823,%r5535;
}
	// end inline asm
	bra.uni 	$L__BB0_615;

$L__BB0_613:
	// begin inline asm
	{mul.f16x2 %r7823,%r7326,%r5748;
}
	// end inline asm

$L__BB0_615:
	mov.u32 	%r5762, 31;
	mov.u32 	%r5764, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5760,%r7823,%r5762,%r2241,%r5764;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5765,%r5751,%r5760;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5768,%r7563,%r7569;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5771,%r5768,%r5765;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5774,%r7234,%r5771;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7453,%r5535,%r5774;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5780,%r7471,%r7476;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5783,%r7325,%r5780;
}
	// end inline asm
	mov.u32 	%r7824, %r5542;
	@%p12 bra 	$L__BB0_617;

	// begin inline asm
	{mul.f16x2 %r7824,%r7326,%r5780;
}
	// end inline asm

$L__BB0_617:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5792,%r7824,%r5762,%r2241,%r5764;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5797,%r5783,%r5792;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5800,%r7551,%r7569;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5803,%r5797,%r5800;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5806,%r7234,%r5803;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7452,%r5542,%r5806;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5812,%r7455,%r7475;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5815,%r7466,%r7476;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5818,%r5812,%r5815;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5821,%r7234,%r5818;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5824,%r7451,%r5821;
}
	// end inline asm
	@%p12 bra 	$L__BB0_619;

	mov.u32 	%r7451, %r5824;

$L__BB0_619:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7475;
 mov.b16 %rs65, high;}
	// end inline asm
	mov.u32 	%r5835, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r5831,%r7475,%r416,%r2241,%r5835;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5831;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5837, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5838,%r5837,%r7470;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5841,%r7329,%r5838;
}
	// end inline asm
	@%p12 bra 	$L__BB0_621;
	bra.uni 	$L__BB0_620;

$L__BB0_621:
	// begin inline asm
	{neg.f16x2 %r7826,%r5538;
}
	// end inline asm
	bra.uni 	$L__BB0_622;

$L__BB0_620:
	// begin inline asm
	{mul.f16x2 %r7826,%r7330,%r5838;
}
	// end inline asm

$L__BB0_622:
	mov.u32 	%r5854, 31;
	mov.u32 	%r5878, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5852,%r7826,%r5854,%r2241,%r5878;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5857,%r5841,%r5852;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5860,%r7560,%r7566;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5863,%r5860,%r5857;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5866,%r7234,%r5863;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7444,%r5538,%r5866;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7476;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5874,%r7476,%r416,%r2241,%r5878;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5874;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5880, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5881,%r5880,%r7471;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5884,%r7329,%r5881;
}
	// end inline asm
	mov.u32 	%r7827, %r5545;
	@%p12 bra 	$L__BB0_624;

	// begin inline asm
	{mul.f16x2 %r7827,%r7330,%r5881;
}
	// end inline asm

$L__BB0_624:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5895,%r7827,%r5854,%r2241,%r5878;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5900,%r5884,%r5895;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5903,%r7548,%r7566;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5906,%r5900,%r5903;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5909,%r7234,%r5906;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7443,%r5545,%r5909;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5915,%r7446,%r7470;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5918,%r7464,%r7471;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5921,%r5915,%r5918;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5924,%r7234,%r5921;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5927,%r7442,%r5924;
}
	// end inline asm
	@%p12 bra 	$L__BB0_626;

	mov.u32 	%r7442, %r5927;

$L__BB0_626:
	// begin inline asm
	{sub.f16x2 %r5932,%r7464,%r7466;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5935,%r7325,%r5932;
}
	// end inline asm
	mov.u32 	%r7829, %r5556;
	@%p12 bra 	$L__BB0_628;

	// begin inline asm
	{mul.f16x2 %r7829,%r7326,%r5932;
}
	// end inline asm

$L__BB0_628:
	mov.u32 	%r5944, 31;
	mov.u32 	%r5946, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5942,%r7829,%r5944,%r2241,%r5946;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5947,%r5935,%r5942;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5950,%r7545,%r7563;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5953,%r5947,%r5950;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5956,%r7234,%r5953;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7435,%r5556,%r5956;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5962,%r7437,%r4220;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5965,%r4361,%r7466;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5968,%r5962,%r5965;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5971,%r7234,%r5968;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5974,%r7434,%r5971;
}
	// end inline asm
	@%p12 bra 	$L__BB0_630;

	mov.u32 	%r7434, %r5974;

$L__BB0_630:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7466;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5981,%r7466,%r416,%r2241,%r5946;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5981;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5987, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5988,%r5987,%r7464;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5991,%r7329,%r5988;
}
	// end inline asm
	mov.u32 	%r7831, %r5559;
	@%p12 bra 	$L__BB0_632;

	// begin inline asm
	{mul.f16x2 %r7831,%r7330,%r5988;
}
	// end inline asm

$L__BB0_632:
	mov.u32 	%r6002, 31;
	mov.u32 	%r6004, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6000,%r7831,%r6002,%r2241,%r6004;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6005,%r5991,%r6000;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6008,%r7542,%r7560;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6011,%r6005,%r6008;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6014,%r7234,%r6011;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7427,%r5559,%r6014;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6020,%r7429,%r4301;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6023,%r4395,%r7464;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6026,%r6020,%r6023;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6029,%r7234,%r6026;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6032,%r7426,%r6029;
}
	// end inline asm
	@%p12 bra 	$L__BB0_634;

	mov.u32 	%r7426, %r6032;

$L__BB0_634:
	// begin inline asm
	{sub.f16x2 %r6037,%r7459,%r7462;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6040,%r7325,%r6037;
}
	// end inline asm
	@%p12 bra 	$L__BB0_636;
	bra.uni 	$L__BB0_635;

$L__BB0_636:
	// begin inline asm
	{neg.f16x2 %r7833,%r5570;
}
	// end inline asm
	bra.uni 	$L__BB0_637;

$L__BB0_635:
	// begin inline asm
	{mul.f16x2 %r7833,%r7326,%r6037;
}
	// end inline asm

$L__BB0_637:
	mov.u32 	%r6051, 31;
	mov.u32 	%r6053, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6049,%r7833,%r6051,%r2241,%r6053;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6054,%r6040,%r6049;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6057,%r7551,%r7556;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6060,%r6057,%r6054;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6063,%r7234,%r6060;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7417,%r5570,%r6063;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6069,%r7662,%r7663;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6072,%r7325,%r6069;
}
	// end inline asm
	mov.u32 	%r7834, %r5577;
	@%p12 bra 	$L__BB0_639;

	// begin inline asm
	{mul.f16x2 %r7834,%r7326,%r6069;
}
	// end inline asm

$L__BB0_639:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6081,%r7834,%r6051,%r2241,%r6053;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6086,%r6072,%r6081;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6089,%r7658,%r7556;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6092,%r6086,%r6089;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6095,%r7234,%r6092;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7416,%r5577,%r6095;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6101,%r7659,%r7462;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6104,%r7456,%r7663;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6107,%r6101,%r6104;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6110,%r7234,%r6107;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6113,%r7415,%r6110;
}
	// end inline asm
	@%p12 bra 	$L__BB0_641;

	mov.u32 	%r7415, %r6113;

$L__BB0_641:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7462;
 mov.b16 %rs77, high;}
	// end inline asm
	mov.u32 	%r6124, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6120,%r7462,%r416,%r2241,%r6124;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6120;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6126, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6127,%r6126,%r7459;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6130,%r7329,%r6127;
}
	// end inline asm
	@%p12 bra 	$L__BB0_643;
	bra.uni 	$L__BB0_642;

$L__BB0_643:
	// begin inline asm
	{neg.f16x2 %r7836,%r5573;
}
	// end inline asm
	bra.uni 	$L__BB0_644;

$L__BB0_642:
	// begin inline asm
	{mul.f16x2 %r7836,%r7330,%r6127;
}
	// end inline asm

$L__BB0_644:
	mov.u32 	%r6143, 31;
	mov.u32 	%r6167, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6141,%r7836,%r6143,%r2241,%r6167;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6146,%r6130,%r6141;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6149,%r7548,%r7554;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6152,%r6149,%r6146;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6155,%r7234,%r6152;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7412,%r5573,%r6155;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7663;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6163,%r7663,%r416,%r2241,%r6167;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6163;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6169, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6170,%r6169,%r7662;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6173,%r7329,%r6170;
}
	// end inline asm
	mov.u32 	%r7837, %r5580;
	@%p12 bra 	$L__BB0_646;

	// begin inline asm
	{mul.f16x2 %r7837,%r7330,%r6170;
}
	// end inline asm

$L__BB0_646:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6184,%r7837,%r6143,%r2241,%r6167;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6189,%r6173,%r6184;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6192,%r7656,%r7554;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6195,%r6189,%r6192;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6198,%r7234,%r6195;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7411,%r5580,%r6198;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6204,%r7657,%r7459;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6207,%r7447,%r7662;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6210,%r6204,%r6207;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6213,%r7234,%r6210;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6216,%r7410,%r6213;
}
	// end inline asm
	@%p12 bra 	$L__BB0_648;

	mov.u32 	%r7410, %r6216;

$L__BB0_648:
	// begin inline asm
	{sub.f16x2 %r6221,%r7446,%r7455;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6224,%r7325,%r6221;
}
	// end inline asm
	@%p12 bra 	$L__BB0_650;
	bra.uni 	$L__BB0_649;

$L__BB0_650:
	// begin inline asm
	{neg.f16x2 %r7839,%r5591;
}
	// end inline asm
	bra.uni 	$L__BB0_651;

$L__BB0_649:
	// begin inline asm
	{mul.f16x2 %r7839,%r7326,%r6221;
}
	// end inline asm

$L__BB0_651:
	mov.u32 	%r6235, 31;
	mov.u32 	%r6237, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6233,%r7839,%r6235,%r2241,%r6237;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6238,%r6224,%r6233;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6241,%r7545,%r7551;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6244,%r6241,%r6238;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6247,%r7234,%r6244;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7407,%r5591,%r6247;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6253,%r7447,%r7456;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6256,%r7325,%r6253;
}
	// end inline asm
	mov.u32 	%r7840, %r5598;
	@%p12 bra 	$L__BB0_653;

	// begin inline asm
	{mul.f16x2 %r7840,%r7326,%r6253;
}
	// end inline asm

$L__BB0_653:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6265,%r7840,%r6235,%r2241,%r6237;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6270,%r6256,%r6265;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6273,%r7538,%r7551;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6276,%r6270,%r6273;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6279,%r7234,%r6276;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7406,%r5598,%r6279;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6285,%r7409,%r7455;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6288,%r7438,%r7456;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6291,%r6285,%r6288;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6294,%r7234,%r6291;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6297,%r7405,%r6294;
}
	// end inline asm
	@%p12 bra 	$L__BB0_655;

	mov.u32 	%r7405, %r6297;

$L__BB0_655:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7455;
 mov.b16 %rs85, high;}
	// end inline asm
	mov.u32 	%r6308, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6304,%r7455,%r416,%r2241,%r6308;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6304;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6310, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6311,%r6310,%r7446;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6314,%r7329,%r6311;
}
	// end inline asm
	@%p12 bra 	$L__BB0_657;
	bra.uni 	$L__BB0_656;

$L__BB0_657:
	// begin inline asm
	{neg.f16x2 %r7842,%r5594;
}
	// end inline asm
	bra.uni 	$L__BB0_658;

$L__BB0_656:
	// begin inline asm
	{mul.f16x2 %r7842,%r7330,%r6311;
}
	// end inline asm

$L__BB0_658:
	mov.u32 	%r6327, 31;
	mov.u32 	%r6351, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6325,%r7842,%r6327,%r2241,%r6351;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6330,%r6314,%r6325;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6333,%r7542,%r7548;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6336,%r6333,%r6330;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6339,%r7234,%r6336;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7400,%r5594,%r6339;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7456;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6347,%r7456,%r416,%r2241,%r6351;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6347;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6353, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6354,%r6353,%r7447;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6357,%r7329,%r6354;
}
	// end inline asm
	mov.u32 	%r7843, %r5601;
	@%p12 bra 	$L__BB0_660;

	// begin inline asm
	{mul.f16x2 %r7843,%r7330,%r6354;
}
	// end inline asm

$L__BB0_660:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6368,%r7843,%r6327,%r2241,%r6351;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6373,%r6357,%r6368;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6376,%r7536,%r7548;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6379,%r6373,%r6376;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6382,%r7234,%r6379;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7399,%r5601,%r6382;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6388,%r7402,%r7446;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6391,%r7430,%r7447;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6394,%r6388,%r6391;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6397,%r7234,%r6394;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6400,%r7398,%r6397;
}
	// end inline asm
	@%p12 bra 	$L__BB0_662;

	mov.u32 	%r7398, %r6400;

$L__BB0_662:
	// begin inline asm
	{sub.f16x2 %r6405,%r7429,%r7437;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6408,%r7325,%r6405;
}
	// end inline asm
	@%p12 bra 	$L__BB0_664;
	bra.uni 	$L__BB0_663;

$L__BB0_664:
	// begin inline asm
	{neg.f16x2 %r7845,%r5612;
}
	// end inline asm
	bra.uni 	$L__BB0_665;

$L__BB0_663:
	// begin inline asm
	{mul.f16x2 %r7845,%r7326,%r6405;
}
	// end inline asm

$L__BB0_665:
	mov.u32 	%r6419, 31;
	mov.u32 	%r6421, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6417,%r7845,%r6419,%r2241,%r6421;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6422,%r6408,%r6417;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6425,%r7541,%r7545;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6428,%r6425,%r6422;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6431,%r7234,%r6428;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7394,%r5612,%r6431;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6437,%r7430,%r7438;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6440,%r7325,%r6437;
}
	// end inline asm
	mov.u32 	%r7846, %r5619;
	@%p12 bra 	$L__BB0_667;

	// begin inline asm
	{mul.f16x2 %r7846,%r7326,%r6437;
}
	// end inline asm

$L__BB0_667:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6449,%r7846,%r6419,%r2241,%r6421;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6454,%r6440,%r6449;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6457,%r7535,%r7545;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6460,%r6454,%r6457;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6463,%r7234,%r6460;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7393,%r5619,%r6463;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6469,%r7642,%r7437;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6472,%r7649,%r7438;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6475,%r6469,%r6472;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6478,%r7234,%r6475;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6481,%r7392,%r6478;
}
	// end inline asm
	@%p12 bra 	$L__BB0_669;

	mov.u32 	%r7392, %r6481;

$L__BB0_669:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7437;
 mov.b16 %rs93, high;}
	// end inline asm
	mov.u32 	%r6492, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6488,%r7437,%r416,%r2241,%r6492;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6488;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6494, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6495,%r6494,%r7429;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6498,%r7329,%r6495;
}
	// end inline asm
	@%p12 bra 	$L__BB0_671;
	bra.uni 	$L__BB0_670;

$L__BB0_671:
	// begin inline asm
	{neg.f16x2 %r7848,%r5615;
}
	// end inline asm
	bra.uni 	$L__BB0_672;

$L__BB0_670:
	// begin inline asm
	{mul.f16x2 %r7848,%r7330,%r6495;
}
	// end inline asm

$L__BB0_672:
	mov.u32 	%r6511, 31;
	mov.u32 	%r6535, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6509,%r7848,%r6511,%r2241,%r6535;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6514,%r6498,%r6509;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6517,%r7540,%r7542;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6520,%r6517,%r6514;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6523,%r7234,%r6520;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7389,%r5615,%r6523;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7438;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6531,%r7438,%r416,%r2241,%r6535;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6531;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6537, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6538,%r6537,%r7430;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6541,%r7329,%r6538;
}
	// end inline asm
	mov.u32 	%r7849, %r5622;
	@%p12 bra 	$L__BB0_674;

	// begin inline asm
	{mul.f16x2 %r7849,%r7330,%r6538;
}
	// end inline asm

$L__BB0_674:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6552,%r7849,%r6511,%r2241,%r6535;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6557,%r6541,%r6552;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6560,%r7534,%r7542;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6563,%r6557,%r6560;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6566,%r7234,%r6563;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7388,%r5622,%r6566;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6572,%r7640,%r7429;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6575,%r7646,%r7430;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6578,%r6572,%r6575;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6581,%r7234,%r6578;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6584,%r7387,%r6581;
}
	// end inline asm
	@%p12 bra 	$L__BB0_676;

	mov.u32 	%r7387, %r6584;

$L__BB0_676:
	// begin inline asm
	{sub.f16x2 %r6589,%r7646,%r7649;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6592,%r7325,%r6589;
}
	// end inline asm
	mov.u32 	%r7851, %r5633;
	@%p12 bra 	$L__BB0_678;

	// begin inline asm
	{mul.f16x2 %r7851,%r7326,%r6589;
}
	// end inline asm

$L__BB0_678:
	mov.u32 	%r6601, 31;
	mov.u32 	%r6625, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6599,%r7851,%r6601,%r2241,%r6625;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6604,%r6592,%r6599;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6607,%r7638,%r7541;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6610,%r6604,%r6607;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6613,%r7234,%r6610;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7383,%r5633,%r6613;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7649;
 mov.b16 %rs101, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6621,%r7649,%r416,%r2241,%r6625;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6621;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6627, {%rs101,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6628,%r6627,%r7646;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6631,%r7329,%r6628;
}
	// end inline asm
	mov.u32 	%r7852, %r5636;
	@%p12 bra 	$L__BB0_680;

	// begin inline asm
	{mul.f16x2 %r7852,%r7330,%r6628;
}
	// end inline asm

$L__BB0_680:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6642,%r7852,%r6601,%r2241,%r6625;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6647,%r6631,%r6642;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6650,%r7639,%r7540;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6653,%r6647,%r6650;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6656,%r7234,%r6653;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7379,%r5636,%r6656;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6662,%r7657,%r7659;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6665,%r7325,%r6662;
}
	// end inline asm
	@%p12 bra 	$L__BB0_682;
	bra.uni 	$L__BB0_681;

$L__BB0_682:
	// begin inline asm
	{neg.f16x2 %r7853,%r5640;
}
	// end inline asm
	bra.uni 	$L__BB0_683;

$L__BB0_681:
	// begin inline asm
	{mul.f16x2 %r7853,%r7326,%r6662;
}
	// end inline asm

$L__BB0_683:
	mov.u32 	%r6678, 31;
	mov.u32 	%r6702, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6676,%r7853,%r6678,%r2241,%r6702;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6681,%r6665,%r6676;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6684,%r7538,%r7658;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6687,%r6684,%r6681;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6690,%r7234,%r6687;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7372,%r5640,%r6690;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7659;
 mov.b16 %rs105, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6698,%r7659,%r416,%r2241,%r6702;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6698;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6704, {%rs105,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6705,%r6704,%r7657;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6708,%r7329,%r6705;
}
	// end inline asm
	@%p12 bra 	$L__BB0_685;
	bra.uni 	$L__BB0_684;

$L__BB0_685:
	// begin inline asm
	{neg.f16x2 %r7854,%r5643;
}
	// end inline asm
	bra.uni 	$L__BB0_686;

$L__BB0_684:
	// begin inline asm
	{mul.f16x2 %r7854,%r7330,%r6705;
}
	// end inline asm

$L__BB0_686:
	mov.u32 	%r6723, 31;
	mov.u32 	%r6725, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6721,%r7854,%r6723,%r2241,%r6725;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6726,%r6708,%r6721;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6729,%r7536,%r7656;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6732,%r6729,%r6726;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6735,%r7234,%r6732;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7365,%r5643,%r6735;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6741,%r7402,%r7409;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6744,%r7325,%r6741;
}
	// end inline asm
	@%p12 bra 	$L__BB0_688;
	bra.uni 	$L__BB0_687;

$L__BB0_688:
	// begin inline asm
	{neg.f16x2 %r7855,%r5647;
}
	// end inline asm
	bra.uni 	$L__BB0_689;

$L__BB0_687:
	// begin inline asm
	{mul.f16x2 %r7855,%r7326,%r6741;
}
	// end inline asm

$L__BB0_689:
	mov.u32 	%r6757, 31;
	mov.u32 	%r6759, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6755,%r7855,%r6757,%r2241,%r6759;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6760,%r6744,%r6755;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6763,%r7535,%r7538;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6766,%r6763,%r6760;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6769,%r7234,%r6766;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7359,%r5647,%r6769;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6775,%r7652,%r7653;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6778,%r7325,%r6775;
}
	// end inline asm
	mov.u32 	%r7856, %r5654;
	@%p12 bra 	$L__BB0_691;

	// begin inline asm
	{mul.f16x2 %r7856,%r7326,%r6775;
}
	// end inline asm

$L__BB0_691:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6787,%r7856,%r6757,%r2241,%r6759;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6792,%r6778,%r6787;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6795,%r7655,%r7538;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6798,%r6792,%r6795;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6801,%r7234,%r6798;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7358,%r5654,%r6801;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6807,%r7644,%r7409;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6810,%r7643,%r7653;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6813,%r6807,%r6810;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6816,%r7234,%r6813;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6819,%r7357,%r6816;
}
	// end inline asm
	@%p12 bra 	$L__BB0_693;

	mov.u32 	%r7357, %r6819;

$L__BB0_693:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7409;
 mov.b16 %rs109, high;}
	// end inline asm
	mov.u32 	%r6830, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6826,%r7409,%r416,%r2241,%r6830;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6826;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6832, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6833,%r6832,%r7402;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6836,%r7329,%r6833;
}
	// end inline asm
	@%p12 bra 	$L__BB0_695;
	bra.uni 	$L__BB0_694;

$L__BB0_695:
	// begin inline asm
	{neg.f16x2 %r7858,%r5650;
}
	// end inline asm
	bra.uni 	$L__BB0_696;

$L__BB0_694:
	// begin inline asm
	{mul.f16x2 %r7858,%r7330,%r6833;
}
	// end inline asm

$L__BB0_696:
	mov.u32 	%r6849, 31;
	mov.u32 	%r6873, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6847,%r7858,%r6849,%r2241,%r6873;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6852,%r6836,%r6847;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6855,%r7534,%r7536;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6858,%r6855,%r6852;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6861,%r7234,%r6858;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7352,%r5650,%r6861;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7653;
 mov.b16 %rs113, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6869,%r7653,%r416,%r2241,%r6873;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6869;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6875, {%rs113,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6876,%r6875,%r7652;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6879,%r7329,%r6876;
}
	// end inline asm
	mov.u32 	%r7859, %r5657;
	@%p12 bra 	$L__BB0_698;

	// begin inline asm
	{mul.f16x2 %r7859,%r7330,%r6876;
}
	// end inline asm

$L__BB0_698:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6890,%r7859,%r6849,%r2241,%r6873;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6895,%r6879,%r6890;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6898,%r7661,%r7536;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6901,%r6895,%r6898;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6904,%r7234,%r6901;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7351,%r5657,%r6904;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6910,%r7647,%r7402;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6913,%r7641,%r7652;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6916,%r6910,%r6913;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6919,%r7234,%r6916;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6922,%r7350,%r6919;
}
	// end inline asm
	@%p12 bra 	$L__BB0_700;

	mov.u32 	%r7350, %r6922;

$L__BB0_700:
	// begin inline asm
	{sub.f16x2 %r6927,%r7640,%r7642;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6930,%r7325,%r6927;
}
	// end inline asm
	@%p12 bra 	$L__BB0_702;
	bra.uni 	$L__BB0_701;

$L__BB0_702:
	// begin inline asm
	{neg.f16x2 %r7861,%r5668;
}
	// end inline asm
	bra.uni 	$L__BB0_703;

$L__BB0_701:
	// begin inline asm
	{mul.f16x2 %r7861,%r7326,%r6927;
}
	// end inline asm

$L__BB0_703:
	mov.u32 	%r6941, 31;
	mov.u32 	%r6943, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6939,%r7861,%r6941,%r2241,%r6943;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6944,%r6930,%r6939;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6947,%r7638,%r7535;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6950,%r6947,%r6944;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6953,%r7234,%r6950;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7345,%r5668,%r6953;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6959,%r7641,%r7643;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6962,%r7325,%r6959;
}
	// end inline asm
	mov.u32 	%r7862, %r5675;
	@%p12 bra 	$L__BB0_705;

	// begin inline asm
	{mul.f16x2 %r7862,%r7326,%r6959;
}
	// end inline asm

$L__BB0_705:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6971,%r7862,%r6941,%r2241,%r6943;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6976,%r6962,%r6971;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6979,%r7650,%r7535;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6982,%r6976,%r6979;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6985,%r7234,%r6982;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7344,%r5675,%r6985;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7642;
 mov.b16 %rs117, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6993,%r7642,%r416,%r2241,%r6943;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6993;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6999, {%rs117,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7000,%r6999,%r7640;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7003,%r7329,%r7000;
}
	// end inline asm
	@%p12 bra 	$L__BB0_707;
	bra.uni 	$L__BB0_706;

$L__BB0_707:
	// begin inline asm
	{neg.f16x2 %r7863,%r5671;
}
	// end inline asm
	bra.uni 	$L__BB0_708;

$L__BB0_706:
	// begin inline asm
	{mul.f16x2 %r7863,%r7330,%r7000;
}
	// end inline asm

$L__BB0_708:
	mov.u32 	%r7018, 31;
	mov.u32 	%r7042, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7016,%r7863,%r7018,%r2241,%r7042;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7021,%r7003,%r7016;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7024,%r7639,%r7534;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7027,%r7024,%r7021;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7030,%r7234,%r7027;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7337,%r5671,%r7030;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7643;
 mov.b16 %rs121, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7038,%r7643,%r416,%r2241,%r7042;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7038;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7044, {%rs121,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7045,%r7044,%r7641;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7048,%r7329,%r7045;
}
	// end inline asm
	mov.u32 	%r7864, %r5678;
	@%p12 bra 	$L__BB0_710;

	// begin inline asm
	{mul.f16x2 %r7864,%r7330,%r7045;
}
	// end inline asm

$L__BB0_710:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7059,%r7864,%r7018,%r2241,%r7042;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7064,%r7048,%r7059;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7067,%r7651,%r7534;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7070,%r7064,%r7067;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7073,%r7234,%r7070;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7336,%r5678,%r7073;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7079,%r7647,%r7644;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7082,%r7325,%r7079;
}
	// end inline asm
	@%p12 bra 	$L__BB0_712;
	bra.uni 	$L__BB0_711;

$L__BB0_712:
	// begin inline asm
	{neg.f16x2 %r7865,%r5682;
}
	// end inline asm
	bra.uni 	$L__BB0_713;

$L__BB0_711:
	// begin inline asm
	{mul.f16x2 %r7865,%r7326,%r7079;
}
	// end inline asm

$L__BB0_713:
	mov.u32 	%r7095, 31;
	mov.u32 	%r7119, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7093,%r7865,%r7095,%r2241,%r7119;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7098,%r7082,%r7093;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7101,%r7650,%r7655;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7104,%r7101,%r7098;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7107,%r7234,%r7104;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7368,%r5682,%r7107;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7644;
 mov.b16 %rs125, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7115,%r7644,%r416,%r2241,%r7119;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7115;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7121, {%rs125,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7122,%r7121,%r7647;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7125,%r7329,%r7122;
}
	// end inline asm
	@%p12 bra 	$L__BB0_715;
	bra.uni 	$L__BB0_714;

$L__BB0_715:
	// begin inline asm
	{neg.f16x2 %r7866,%r5685;
}
	// end inline asm
	bra.uni 	$L__BB0_716;

$L__BB0_714:
	// begin inline asm
	{mul.f16x2 %r7866,%r7330,%r7122;
}
	// end inline asm

$L__BB0_716:
	mov.u32 	%r7140, 31;
	mov.u32 	%r7142, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7138,%r7866,%r7140,%r2241,%r7142;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7143,%r7125,%r7138;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7146,%r7651,%r7661;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7149,%r7146,%r7143;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7152,%r7234,%r7149;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7414,%r5685,%r7152;
}
	// end inline asm
	bar.sync 	0;
	@%p301 bra 	$L__BB0_719;

	setp.ne.s32 	%p380, %r24, %r2137;
	shl.b32 	%r7161, %r24, 8;
	shl.b32 	%r7165, %r1733, 8;
	or.b32  	%r7166, %r7165, 128;
	mad.lo.s32 	%r7167, %r7166, %r23, %r2140;
	add.s32 	%r7168, %r7167, %r7161;
	shl.b32 	%r7169, %r7168, 2;
	mov.u32 	%r7170, _ZN6kernel5shmemE;
	add.s32 	%r7171, %r7170, %r7169;
	shl.b32 	%r7172, %r28, 4;
	add.s32 	%r1729, %r7171, %r7172;
	st.shared.v4.u32 	[%r1729], {%r7416, %r7411, %r7417, %r7412};
	st.shared.v4.u32 	[%r1729+512], {%r7461, %r7458, %r7452, %r7443};
	@%p380 bra 	$L__BB0_719;

	st.shared.v4.u32 	[%r1729+1024], {%r7453, %r7444, %r7474, %r7469};

$L__BB0_719:
	setp.eq.s32 	%p378, %r24, %r2137;
	@%p378 bra 	$L__BB0_721;

	mad.lo.s32 	%r7177, %r52, %r24, %r2217;
	mad.lo.s32 	%r7180, %r2135, %r2137, %r7177;
	mad.lo.s32 	%r7183, %r2133, %r2132, %r7180;
	shl.b32 	%r7184, %r7183, 2;
	mov.u32 	%r7185, _ZN6kernel5shmemE;
	add.s32 	%r7186, %r7185, %r7184;
	shl.b32 	%r7187, %r28, 4;
	add.s32 	%r7188, %r7186, %r7187;
	st.shared.v4.u32 	[%r7188], {%r7453, %r7444, %r7474, %r7469};
	st.shared.v4.u32 	[%r7188+512], {%r7435, %r7427, %r7394, %r7389};
	st.shared.v4.u32 	[%r7188+1024], {%r7434, %r7426, %r7383, %r7379};

$L__BB0_721:
	setp.ne.s32 	%p379, %r23, %r2132;
	ld.param.u64 	%rd537, [%rd1+56];
	cvta.to.global.u64 	%rd39, %rd537;
	@%p379 bra 	$L__BB0_723;

	mad.lo.s32 	%r7190, %r654, %r1735, %r26;
	mul.lo.s32 	%r7191, %r7190, %r1733;
	mul.lo.s32 	%r7192, %r7191, 768;
	add.s32 	%r7193, %r1733, %r24;
	mad.lo.s32 	%r7194, %r7193, 384, %r7192;
	add.s32 	%r7195, %r7194, -128;
	mul.wide.s32 	%rd538, %r7195, 4;
	add.s64 	%rd539, %rd39, %rd538;
	add.s64 	%rd541, %rd539, %rd273;
	st.global.v4.u32 	[%rd541+512], {%r7416, %r7411, %r7417, %r7412};
	st.global.v4.u32 	[%rd541+1024], {%r7461, %r7458, %r7452, %r7443};
	st.global.v4.u32 	[%rd541+1536], {%r7453, %r7444, %r7474, %r7469};

$L__BB0_723:
	setp.ne.s32 	%p381, %r24, %r2137;
	@%p381 bra 	$L__BB0_726;

	mad.lo.s32 	%r7197, %r655, %r1734, %r25;
	mad.lo.s32 	%r7201, %r7197, %r1789, %r413;
	mul.wide.s32 	%rd542, %r7201, 4;
	add.s64 	%rd543, %rd39, %rd542;
	add.s64 	%rd40, %rd543, %rd273;
	st.global.v4.u32 	[%rd40], {%r7453, %r7444, %r7474, %r7469};
	st.global.v4.u32 	[%rd40+512], {%r7435, %r7427, %r7394, %r7389};
	st.global.v4.u32 	[%rd40+1024], {%r7434, %r7426, %r7383, %r7379};
	@%p205 bra 	$L__BB0_726;

	st.global.v4.u32 	[%rd40+1536], {%r7608, %r7611, %r7615, %r7614};

$L__BB0_726:
	rem.s32 	%r7202, %r7495, %r1736;
	setp.eq.s32 	%p372, %r7202, 0;
	@%p372 bra 	$L__BB0_728;

	bar.sync 	0;
	bra.uni 	$L__BB0_735;

$L__BB0_728:
	@%p147 bra 	$L__BB0_730;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_730:
	bar.sync 	0;
	@%p148 bra 	$L__BB0_734;

	membar.gl;
	add.s64 	%rd545, %rd24, 4;
	setp.eq.s32 	%p375, %r408, %r409;
	mov.u32 	%r7215, -2147483647;
	sub.s32 	%r7216, %r7215, %r407;
	selp.b32 	%r7217, %r7216, 1, %p375;
	atom.add.u32 	%r1730, [%rd545], %r7217;

$L__BB0_732:
	ld.volatile.u32 	%r7218, [%rd24+4];
	xor.b32  	%r7219, %r7218, %r1730;
	setp.gt.s32 	%p376, %r7219, -1;
	@%p376 bra 	$L__BB0_732;

	membar.gl;

$L__BB0_734:
	bar.sync 	0;

$L__BB0_735:
	add.s32 	%r7495, %r7495, 1;
	setp.lt.s32 	%p377, %r7495, %r31;
	mov.u32 	%r7609, %r7775;
	mov.u32 	%r7610, %r7776;
	mov.u32 	%r7612, %r7778;
	mov.u32 	%r7613, %r7779;
	mov.u32 	%r7620, %r7790;
	mov.u32 	%r7621, %r7791;
	mov.u32 	%r7622, %r7792;
	mov.u32 	%r7623, %r7793;
	mov.u32 	%r7624, %r7794;
	mov.u32 	%r7625, %r7795;
	mov.u32 	%r7626, %r7796;
	mov.u32 	%r7629, %r7799;
	mov.u32 	%r7631, %r7801;
	mov.u32 	%r7633, %r7803;
	mov.u32 	%r7423, %r477;
	mov.u32 	%r7424, %r7686;
	mov.u32 	%r7431, %r484;
	mov.u32 	%r7432, %r7688;
	mov.u32 	%r7439, %r491;
	mov.u32 	%r7448, %r499;
	mov.u32 	%r7457, %r7693;
	mov.u32 	%r7460, %r7695;
	mov.u32 	%r7463, %r529;
	mov.u32 	%r7465, %r537;
	mov.u32 	%r7467, %r544;
	mov.u32 	%r7468, %r545;
	mov.u32 	%r7472, %r553;
	mov.u32 	%r7473, %r554;
	mov.u32 	%r7616, %r7784;
	mov.u32 	%r7617, %r7785;
	mov.u32 	%r7618, %r7786;
	mov.u32 	%r7619, %r7787;
	mov.u32 	%r7634, %r7804;
	mov.u32 	%r7635, %r7805;
	@%p377 bra 	$L__BB0_302;

$L__BB0_736:
	ret;

}

